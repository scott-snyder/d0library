#! /bin/csh -f
#------------------------------------------------------------------------------
#
# Name      : unix_release
#
# Purpuse   : Build unix utility object libraries and executables.
#
# Usage:
#
#     unix_release
#
# The library and executables are placed in libdir.
#
# Created 8-AUG-1991   Herbert B. Greenlee
#
#------------------------------------------------------------------------------
set libdir = `d0pwd`
#
# Define the environment variable d0unix and path appropriately.
#
if( "$libdir" == "$d0library/unix" )then
  setenv d0unix $libdir
  set path = ( $libdir $path )
else
  setenv d0unix "{$libdir,$d0library/unix}"
  set path = ( $libdir $d0library/unix $path )
endif
#
# Make sure uff executable is defined.
#
if( ! -x uff )then
  cp $d0library/unix/shell/find_first uff
  chmod +x uff
endif
rehash
#
# Source d0local.cshrc to define system dependent shell variables.
#
source `uff $d0unix/shell/d0local.cshrc`
#
# Make sure d0echo executable is defined.
#
if( ! -x d0echo )then
  $cc $optflags $ccflags -o d0echo `uff $d0unix/source/d0echo.c`
endif
#
# I don't see line(1) on linux...
#
if ( ! -x line && `uname -s` == 'Linux') then
  echo '#include <stdio.h>\n int gtc(void) {int c=0; if (read(0,&c,1)<1) return EOF; else return c;} main(){int c,stat=1; while ((c=gtc())!=EOF&&c!='\''\\n'\''){stat=0;putchar(c);}putchar('\''\\n'\''); return stat;}' > line.c
  $cc $optflags $ccflags -o line line.c
endif
#
# Make sure unix_pre_release has been executed.  This is only relevant for the
# first test release of this version.
#
if( -f unix.mms )source `uff $d0unix/shell/unix_pre_release`
#
# (Re-)build executables from current (old) main program library.
#
if( -f mains.a )then
  main_bld mains.a
endif
#
# Make sure we have executables for ff, fa, vff, fn, tasteofd0, vmstounix,
# f_depend and c_depend.
#
if( ! -x c_depend )then
  d0echo "\nBuilding c_depend:\n"
  lex `uff $d0unix/source/c_depend.lex`
  $cc -I$libdir/source -I$d0library/unix/source $optflags $lccflags -o c_depend lex.yy.c $lexlib \
    `uff $d0unix/source/find_file.c` \
    `uff $d0unix/source/cstring.c` \
    `uff $d0unix/source/fstring.c` \
    `uff $d0unix/source/glob.c` \
    `uff $d0unix/source/getusernetrc.c` \
    `uff $d0unix/source/getpassnetrc.c`
endif
if( ! -x f_depend )then
  d0echo "\nBuilding f_depend:\n"
  lex `uff $d0unix/source/f_depend.lex`
  $cc -I$libdir/source -I$d0library/unix/source $optflags $lccflags -o f_depend lex.yy.c $lexlib \
    `uff $d0unix/source/find_file.c` \
    `uff $d0unix/source/cstring.c` \
    `uff $d0unix/source/fstring.c` \
    `uff $d0unix/source/glob.c` \
    `uff $d0unix/source/getusernetrc.c` \
    `uff $d0unix/source/getpassnetrc.c`
endif
if( ! -x tasteofd0 )then
  d0echo "\nBuilding tasteofd0:\n"
  lex `uff $d0unix/source/tasteofd0.lex`
  $cc -I$libdir/source -I$d0library/unix/source $optflags $lccflags -o tasteofd0 lex.yy.c $lexlib
endif
if( ! -x vmstounix )then
  d0echo "\nBuilding vmstounix:\n"
  lex `uff $d0unix/source/vmstounix.lex`
  $cc -I$libdir/source -I$d0library/unix/source $optflags $lccflags -o vmstounix lex.yy.c \
    `uff $d0unix/source/lib_find_file.c` \
    `uff $d0unix/source/find_file.c` \
    `uff $d0unix/source/cstring.c` \
    `uff $d0unix/source/fstring.c` \
    `uff $d0unix/source/glob.c` \
    `uff $d0unix/source/fatmen_find.c` \
    `uff $d0unix/source/getusernetrc.c` \
    `uff $d0unix/source/getpassnetrc.c` \
    $lexlib
endif
if( ! -x vff )then
  d0echo "\nBuilding vff:\n"
  $cc -I$libdir/source -I$d0library/unix/source $optflags $ccflags -o vff \
    `uff $d0unix/source/vff.c` \
    `uff $d0unix/source/lib_find_file.c` \
    `uff $d0unix/source/find_file.c` \
    `uff $d0unix/source/getword.c` \
    `uff $d0unix/source/cstring.c` \
    `uff $d0unix/source/fstring.c` \
    `uff $d0unix/source/glob.c` \
    `uff $d0unix/source/fatmen_find.c` \
    `uff $d0unix/source/getusernetrc.c` \
    `uff $d0unix/source/getpassnetrc.c`
endif
if( ! -x fa )then
  d0echo "\nBuilding fa:\n"
  $cc -I$libdir/source -I$d0library/unix/source $optflags $ccflags -o fa \
    `uff $d0unix/source/fa.c` \
    `uff $d0unix/source/lib_find_file.c` \
    `uff $d0unix/source/find_file.c` \
    `uff $d0unix/source/getword.c` \
    `uff $d0unix/source/cstring.c` \
    `uff $d0unix/source/fstring.c` \
    `uff $d0unix/source/glob.c` \
    `uff $d0unix/source/fatmen_find.c` \
    `uff $d0unix/source/getusernetrc.c` \
    `uff $d0unix/source/getpassnetrc.c`
endif
if( ! -x fn || 1 )then
  d0echo "\nBuilding fn:\n"
  $cc -I$libdir/source -I$d0library/unix/source $optflags $ccflags -o fn \
    `uff $d0unix/source/fn.c` \
    `uff $d0unix/source/lib_find_file.c` \
    `uff $d0unix/source/find_file.c` \
    `uff $d0unix/source/getword.c` \
    `uff $d0unix/source/cstring.c` \
    `uff $d0unix/source/fstring.c` \
    `uff $d0unix/source/glob.c` \
    `uff $d0unix/source/fatmen_find.c` \
    `uff $d0unix/source/getusernetrc.c` \
    `uff $d0unix/source/getpassnetrc.c`
endif
rm lex.yy.c >& /dev/null
rm *.o >& /dev/null
ln -f fa ufa >& /dev/null
ln -f fn ufn >& /dev/null
rehash
#
# Generate makefile ane build libraries
#
setenv d0root $d0library/scratch
mkdirp $d0root
ufn '$d0unix/source/*.lex' '$d0unix/source/*.for' '$d0unix/source/*' | \
  userlib -d -o Makefile -c $d0root -l unix.a -
d0echo "\nBuilding deb_unix.a:\n"
make -f Makefile pre
make -f Makefile debug |& grep -v 'second.*definition'
ufn '$d0unix/source/*.lex' '$d0unix/source/*.for' '$d0unix/source/*' | \
  userlib -n -o makefile -c $d0root -l unix.a -
d0echo "\nBuilding unix.a:\n"
make -f makefile opt |& grep -v 'second.*definition'
#
# Move main programs from unix.a and deb_unix.a to mains.a and deb_mains.a
#
d0echo "\nBuilding main program libraries\n"
foreach main (`main_list unix.a`)
  ar x unix.a $main
  ar $arflags mains.a $main >& /dev/null
  ar dsl unix.a $main >& /dev/null
  rm $main
end
foreach main (`main_list deb_unix.a`)
  ar x deb_unix.a $main
  ar $arflags deb_mains.a $main >& /dev/null
  ar dsl deb_unix.a $main >& /dev/null
  rm $main
end
#
# Build executables again using latest object modules
#
d0echo "\nBuilding executables:\n"
main_bld mains.a
#
# Fix up executables with long names
#
foreach source ( make_copy_fz_rcp.c )
  set object = `archive_name $source`
  set oldexe = $object:r
  set newexe = $source:r
  if( -x $oldexe )then
    set cmd = "mv -f $oldexe $newexe"
    echo "$cmd"
    $cmd
  endif
end
#
# Link ff, fa and comp to uff, ufa and fort respectively because of naming
# conflicts on ibm.
#
ln -f ff uff >& /dev/null
ln -f fa ufa >& /dev/null
ln -f fl ufl >& /dev/null
ln -f fn ufn >& /dev/null
ln -f comp fort >& /dev/null
