


   Version 4.1b                                               CONDOR_INTRO(1)



   NAME
     condor - a facility for executing UNIX jobs on remote machines

   DESCRIPTION
     Condor is a facility for executing UNIX jobs on a pool of cooperating
     workstations.  Jobs are queued and executed remotely on workstations at
     times when those workstations would otherwise be idle.  A transparent
     checkpointing mechanism is provided, and jobs migrate from workstation
     to workstation without user intervention.  When the jobs complete, users
     are notified by mail.

     No source code changes are required for use of Condor, but executables
     must be specially linked.  Linking instructions vary slightly from
     language to language - see condor(1).

   LIMITATIONS

     Due to the limitations of the remote execution and checkpointing mechan-
     isms, there are several restrictions on the type of program which can be
     executed by the condor facility.  Most importantly only single process
     jobs are supported, (i.e. the fork() and exec() system calls are not
     supported).  Secondly, signal and IPC calls are not implemented, (e.g.
     signal(), kill(), and socket() calls will fail).  Finally the check-
     pointing mechanism will only work correctly if all file operations are
     idempotent - read-only and write-only file access works correctly, but
     programs which both read and write the same file may become confused
     after a checkpoint.

     There are also some practical limitations regarding use of disk space
     for execution of condor jobs.  During the time when a job is waiting for
     a workstation to become available, it is stored as a "checkpoint file"
     on the machine from which the job was submitted.  The file contains all
     the text, data, and stack space for the process, along with some addi-
     tional control information.  This means jobs which use a very large vir-
     tual address space will generate very large checkpoint files.  Some
     advantage can be gained by submitting multiple jobs which share the same
     executable as a single unit or "job cluster".  This is because all jobs
     in a cluster share a single copy of the checkpoint file until they begin
     execution.  See condor(1) for details on how to submit multiple jobs as
     a cluster.  Also the workstations on which the jobs will actually exe-
     cute often have very little free disk.  Thus it is not always possible
     to transfer a condor job to a machine, even though that machine is idle.
     Since large virtual memory jobs must wait for a machine that is both
     idle, and has a sufficient amount of free disk space, such jobs may
     suffer long turnaround times.

     Checkpointing is not supported on R6000/AIX and IRIX 4D workstations at
     this time.  Condor jobs which fail to complete before the machine where
     they are being exeucted becomes busy with non condor work will be res-
     tarted from the beginnning when another machine becomes available.  This
     imposes a practical limit on the length of job which can be run with
     condor on those machines.



                                                                            1






   CONDOR_INTRO(1)                                               Version 4.1b


   USER INTERFACE

     The condor user interface consists of several programs which are
     described separately.

     condor_submit(1)
          Submit jobs to the condor job queue.

     condor_q(1)
          Examine the local condor job queue.

     condor_globalq(1)
          Examine the condor job queue for all machines in the pool.

     condor_prio(1)
          Change priority of jobs in the condor job queue.

     condor_rm(1)
          Remove jobs from the condor job queue.

     condor_status(1)
          Examine the status of the condor machine pool.

     condor_summary(1)
          Summarize recent condor usage on the local machine.

   SEE ALSO
     condor_submit.1, condor_q.1, condor_globalq.1, condor_prio.1,
     condor_rm.1, condor_status.1, condor_summary.1, condor_config.5,
     condor_control.8, condor_master.8, condor_off.8, condor_on.8, "Condor
     Installation Guide", "Condor Technical Summary"

   COPYRIGHT INFORMATION

     Copyright 1986, 1987, 1988, 1989, 1990, 1991 by the Condor Design Team

     Permission to use, copy, modify, and distribute this software and its
     documentation for any purpose and without fee is hereby granted, pro-
     vided that the above copyright notice appear in all copies and that both
     that copyright notice and this permission notice appear in supporting
     documentation, and that the names of the University of Wisconsin and the
     Condor Design Team not be used in advertising or publicity pertaining to
     distribution of the software without specific, written prior permission.
     The University of Wisconsin and the Condor Design Team make no represen-
     tations about the suitability of this software for any purpose.  It is
     provided "as is" without express or implied warranty.

     THE UNIVERSITY OF WISCONSIN AND THE CONDOR DESIGN TEAM DISCLAIM ALL WAR-
     RANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES
     OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE UNIVERSITY OF
     WISCONSIN OR THE CONDOR DESIGN TEAM BE LIABLE FOR ANY SPECIAL, INDIRECT
     OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
     OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
     OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR


   2






   Version 4.1b                                               CONDOR_INTRO(1)


     PERFORMANCE OF THIS SOFTWARE.

     Authors:  Allan Bricker, Michael J. Litzkow, and others.
               University of Wisconsin, Computer Sciences Dept.




















































                                                                            3



