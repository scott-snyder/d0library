      SUBROUTINE TOP_FIT_MAKE_RCP
C----------------------------------------------------------------------
C-
C-   Purpose and Methods : Will make RCP events WITH ISOTROPIC DECAYS
C-                         TTBAR ISPTROPIC IN LAB WITH MOMENTUM TMOM
C-                         FOR TESTING PURPOSES ONLY
C-
C-   Inputs  :
C-   Outputs :
C-   Controls:
C-
C-   Created  20-FEB-1994   Rajendran Raja
C-
C----------------------------------------------------------------------
      IMPLICIT NONE
C
      INCLUDE 'D0$INC:EVENT_QUAN_2C.INC'
      INCLUDE 'D0$INC:KINE_FIT.INC'
      INCLUDE 'D0$INC:FIT_QUAN_2C.INC'
      INCLUDE 'D0$INC:TOP_FIT_SMEAR.INC'
      INCLUDE 'D0$INC:TOP_FIT_RCP.INC'
C
      INTEGER I,K,IER
      INTEGER NEVTS
      DOUBLE PRECISION    LEPMASS
      DOUBLE PRECISION    LINV
C
      REAL    TMASS_S,TMOM_S,REST_EVENT_PT_S
C
      CHARACTER*80 FILENAME
C
      LOGICAL first
      SAVE first
      DATA first / .true. /
      INTEGER INO,IRO,IEV
      REAL    RNDM
      REAL    R1,R2,R3,R4
      LOGICAL WILL_SMEAR
C----------------------------------------------------------------------
      RES(A1,A2,A3,E) = SQRT(A1*A1 + A2*A2/E + (A3/E)**2) !FRACTIONAL RESOLUTION
      RES_MU(A1,A2,KK) = SQRT(A1*A1 + (A2/KK)**2)
C
      IF( first ) THEN
        first = .false.
        CALL EZPICK('TOP_FIT_RCP')
        CALL EZGET('NEV_RCP',NEVTS,IER)
        CALL EZGET('TOP_MASS_RCP',TMASS_S,IER)
        CALL EZGET('TOP_MOMENTUM_RCP',TMOM_S,IER)
        CALL EZGET('REST_EVENT_PT',REST_EVENT_PT_S,IER)
C
        CALL UCOPYSD(TMASS_S,TMASS,1)
        CALL UCOPYSD(TMOM_S,TMOM,1)
        CALL UCOPYSD(REST_EVENT_PT_S,REST_EVENT_PT,1)
C
        CALL EZ_FILE_OPEN(1234,'TOP_EVENT_NOSMEAR_FILE','OF',INO,
     &    FILENAME,IER)
        CALL EZ_FILE_OPEN(1234,'TOP_EVENT_SMEAR_FILE','OF',IRO,
     &    FILENAME,IER)
C
        CALL EZGET('SMEAR_RCP_EVENTS',WILL_SMEAR,IER)
C
        CALL TOP_FIT_SETUP_SMEAR
C
        CALL EZRSET
        LEPMASS = ELMASS
        IF ( LEPTON_TYPE.EQ.2 ) THEN
          LEPMASS=MUMASS
        ENDIF
      ENDIF
C
      DO IEV = 1 , NEVTS
        CALL GENERATE_CTHETA_PHI(COST,SINT,PHI)
        TLEP(1) = TMOM*SINT*COS(PHI)
        TLEP(2) = TMOM*SINT*SIN(PHI)
        TLEP(3) = TMOM*COST
C
        DO I = 1 , 3
          THAD(I) = -TLEP(I)
        ENDDO
C
        CPHI = 2.0*RNDM(0)-1.0
        SPHI = SQRT(1.-CPHI*CPHI)
        REST_EVENT(1) = REST_EVENT_PT*CPHI
        REST_EVENT(2) = REST_EVENT_PT*SPHI
C
        DO I = 1 , 2
          THAD(I) = THAD(I) - 0.5*REST_EVENT(I)
          TLEP(I) = TLEP(I) - 0.5*REST_EVENT(I)  !ADDING REST OF EVENT
        ENDDO
C
        CALL MAKE_ON_SHELL(TLEP,TMASS,TLEP,2)
        CALL MAKE_ON_SHELL(THAD,TMASS,THAD,2)
C
C
C ****  NOW TO DO LEPTONIC DECAYS
C
        CALL GENERATE_CTHETA_PHI(CTH_TL,SINT,PH_TL)  !TOP DECAY
        CALL MAKE_DECAY_VECTOR(TMASS,CTH_TL,PH_TL,
     &    WMASS,BMASS,WLEP_T,BLEP_T)
        CALL DLORENB(TMASS,TLEP,WLEP_T,WLEP)
        CALL DLORENB(TMASS,TLEP,BLEP_T,BLEP)
C
        CALL GENERATE_CTHETA_PHI(CTH_WL,SINT,PH_WL)  !W DECAY
        CALL MAKE_DECAY_VECTOR(WMASS,CTH_WL,PH_WL,LEPMASS,NUMASS,
     &    LEP_W,NEUT_W)
        CALL DLORENB(WMASS,WLEP,LEP_W,EL)
        CALL DLORENB(WMASS,WLEP,NEUT_W,NU)
C
C
C ****  NOW TO DO HADRONIC DECAYS
C
        CALL GENERATE_CTHETA_PHI(CTH_TH,SINT,PH_TH)  !TOP DECAY
        CALL MAKE_DECAY_VECTOR(TMASS,CTH_TH,PH_TH,
     &    WMASS,BMASS,WHAD_T,BHAD_T)
        CALL DLORENB(TMASS,THAD,WHAD_T,WHAD)
        CALL DLORENB(TMASS,THAD,BHAD_T,BHAD)
C
        CALL GENERATE_CTHETA_PHI(CTH_WH,SINT,PH_WH)  !W DECAY
        CALL MAKE_DECAY_VECTOR(WMASS,CTH_WH,PH_WH,
     &    HADMASS,HADMASS,J1_W,J2_W)
        CALL DLORENB(WMASS,WHAD,J1_W,J1)
        CALL DLORENB(WMASS,WHAD,J2_W,J2)
C
C
C ****  smear if needed
C
        CALL TOP_FIT_WRITE_RCP(INO,IEV)  !NO SMEAR
C
        IF ( WILL_SMEAR ) THEN
C
          IF ( LEPTON_TYPE.EQ.1 ) THEN
C
C ****  ELECTRON. ENERGY RESOLUTIONS ARE FRACTIONAL
C
            SIG_L1 = EL(4)*RES(ELECTRON_RESOLN(1),
     &        ELECTRON_RESOLN(2), ELECTRON_RESOLN(3),EL(4))

            SIG_L1_ETA = RES(ELEC_ETA_RESOLN(1),ELEC_ETA_RESOLN(2),
     &        ELEC_ETA_RESOLN(3),EL(4))
C
            SIG_L1_PHI = RES(ELEC_PHI_RESOLN(1),ELEC_PHI_RESOLN(2),
     &        ELEC_PHI_RESOLN(3),EL(4))
          ELSE
C
C ****  MUON
C
            LINV = 1./EL(4)
            SIG_L1 = LINV*RES_MU(MUON_RESOLN(1),
     &        MUON_RESOLN(2), LINV)
            SIG_L1_ETA = RES(MUON_ETA_RESOLN(1),MUON_ETA_RESOLN(2),
     &        MUON_ETA_RESOLN(3),LINV)
C
            SIG_L1_PHI = RES(MUON_PHI_RESOLN(1),MUON_PHI_RESOLN(2),
     &        MUON_PHI_RESOLN(3),LINV)
          ENDIF
C
          CALL GET_ET_ETA_PHI(EL)
          CALL GET_ET_ETA_PHI(BLEP)
          CALL GET_ET_ETA_PHI(BHAD)
          CALL GET_ET_ETA_PHI(J1)
          CALL GET_ET_ETA_PHI(J2)
C
          CALL GET_POLAR(EL,LEPTON)
          IF ( LEPTON_TYPE.EQ.2 ) THEN
C MUON
            LEPTON(1) = 1.0/LEPTON(1)   ! 1/P
          ENDIF
C
          CALL GET_POLAR(BLEP,BLEP_JET)
          CALL GET_POLAR(BHAD,BHAD_JET)
          CALL GET_POLAR(J1,HAD_JET1)
          CALL GET_POLAR(J2,HAD_JET2)
C
          SIG_BLEP = BLEP_JET(1)*RES(JET_RESOLN(1),JET_RESOLN(2),
     &      JET_RESOLN(3), BLEP_JET(1))
          SIG_BLEP_ETA = RES(JET_ETA_RESOLN(1),JET_ETA_RESOLN(2),
     &      JET_ETA_RESOLN(3), BLEP_JET(1))
          SIG_BLEP_PHI = RES(JET_PHI_RESOLN(1),JET_PHI_RESOLN(2),
     &      JET_PHI_RESOLN(3), BLEP_JET(1))
C
          SIG_BHAD = BHAD_JET(1)*RES(JET_RESOLN(1),JET_RESOLN(2),
     &      JET_RESOLN(3), BHAD_JET(1))
          SIG_BHAD_ETA = RES(JET_ETA_RESOLN(1),JET_ETA_RESOLN(2),
     &      JET_ETA_RESOLN(3), BHAD_JET(1))
          SIG_BHAD_PHI = RES(JET_PHI_RESOLN(1),JET_PHI_RESOLN(2),
     &      JET_PHI_RESOLN(3), BHAD_JET(1))
C
          SIG_J1 = HAD_JET1(1)*RES(JET_RESOLN(1),JET_RESOLN(2),
     &      JET_RESOLN(3), HAD_JET1(1))
          SIG_J1_ETA = RES(JET_ETA_RESOLN(1),JET_ETA_RESOLN(2),
     &      JET_ETA_RESOLN(3), HAD_JET1(1))
          SIG_J1_PHI = RES(JET_PHI_RESOLN(1),JET_PHI_RESOLN(2),
     &      JET_PHI_RESOLN(3), HAD_JET1(1))
C
          SIG_J2 = HAD_JET2(1)*RES(JET_RESOLN(1),JET_RESOLN(2),
     &      JET_RESOLN(3), HAD_JET2(1))
          SIG_J2_ETA = RES(JET_ETA_RESOLN(1),JET_ETA_RESOLN(2),
     &      JET_ETA_RESOLN(3), HAD_JET2(1))
          SIG_J2_PHI = RES(JET_PHI_RESOLN(1),JET_PHI_RESOLN(2),
     &      JET_PHI_RESOLN(3), HAD_JET2(1))
C
          CALL RANNOR(R1,R2)
          CALL RANNOR(R3,R4)
C
C SMEAR LEPTON
C
          LEPTON(1) = LEPTON(1)+R1*SIG_L1
          LEPTON(2) = LEPTON(2)+R2*SIG_L1_ETA
          LEPTON(3) = LEPTON(3)+R3*SIG_L1_PHI
C
          IF ( LEPTON_TYPE.EQ.2 ) THEN
            LEPTON(1) = 1.0/LEPTON(1)  !BACK TO ENERGY
          ENDIF
          CALL GET_CART(LEPTON,EL,LEPMASS)
C
          CALL DO_SMEAR(BLEP_JET,SIG_BLEP,SIG_BLEP_ETA,SIG_BLEP_PHI,
     &      BMASS,BLEP)
          CALL DO_SMEAR(BHAD_JET,SIG_BHAD,SIG_BHAD_ETA,SIG_BHAD_PHI,
     &      BMASS,BHAD)
          CALL DO_SMEAR(HAD_JET1,SIG_J1,SIG_J1_ETA,SIG_J1_PHI,
     &      HADMASS,J1)
          CALL DO_SMEAR(HAD_JET2,SIG_J2,SIG_J2_ETA,SIG_J2_PHI,
     &      HADMASS,J2)
C
          SIG_REST = RES(REST_RESOLN(1),REST_RESOLN(2),REST_RESOLN(3),
     &      REST_EVENT_PT)
C
          CALL RANNOR(R1,R2)
          REST_EVENT_PT1 = REST_EVENT_PT*(1.0+R1*SIG_REST)
          REST_EVENT(1) = (REST_EVENT_PT1/REST_EVENT_PT)*REST_EVENT(1)
          REST_EVENT(2) = (REST_EVENT_PT1/REST_EVENT_PT)*REST_EVENT(2)
C
          DO I = 1 , 2
            NU(I) = BHAD(I)+J1(I)+J2(I)+BLEP(I)+EL(I)
     &        +REST_EVENT(I)
            NU(I) = -NU(I)
          ENDDO
C
        ENDIF
        CALL TOP_FIT_WRITE_RCP(IRO,IEV)
      ENDDO
      CLOSE(UNIT=IRO)
      CLOSE(UNIT=INO)
  999 RETURN
      END
