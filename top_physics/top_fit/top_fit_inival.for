      SUBROUTINE TOP_FIT_INIVAL
C----------------------------------------------------------------------
C-
C-   Purpose and Methods : SET UP INITIAL VALUES FOR FITTING
C-
C-   Inputs  :
C-   Outputs :
C-   Controls:
C-
C-   Created  14-FEB-1994   Rajendran Raja
C-
C----------------------------------------------------------------------
      IMPLICIT NONE
      INCLUDE 'D0$INC:EVENT_QUAN_2C.INC'
      INCLUDE 'D0$INC:KINE_FIT.INC'
      INCLUDE 'D0$INC:FIT_QUAN_2C.INC'
      INCLUDE 'D0$INC:TOP_FIT_SMEAR.INC'
      INTEGER I,J
C

      INTEGER IER
      DOUBLE PRECISION    LINV
      DOUBLE PRECISION    ET_REST
      DOUBLE PRECISION    W_HADRON(4),W_HAD_TOP(4)
      DOUBLE PRECISION    JET1_W_W(4)
      DOUBLE PRECISION    W_LEPTON(4),W_LEP_TOP(4),LEPTON1_W(4)
      DOUBLE PRECISION    W_LEPTON1(4),W_LEPTON2(4)
      DOUBLE PRECISION    TOP_LEPTON1(4),TOP_LEPTON2(4)
      DOUBLE PRECISION    WPZ2,TMASSL,TMASSL1,TMASSL2
      LOGICAL OK
C

C
      LOGICAL first
      SAVE first
      DATA first / .true. /
C----------------------------------------------------------------------
      RES(A1,A2,A3,E) = SQRT(A1*A1 + A2*A2/E + (A3/E)**2) !FRACTIONAL RESOLUTION
      RES_MU(A1,A2,KK) = SQRT(A1*A1 + (A2/KK)**2)
C
      IF( first ) THEN
        first = .false.
        CALL TOP_FIT_SETUP_SMEAR
      ENDIF
C
C ****  NOW TO WORK OUT INITAL VALUES
C
      DO I = 1 , 4
        W_HADRON(I)   = JET1_W(I) + JET2_W(I)
      ENDDO
C
C
C ****  IMPOSING W MASS CONSTRAINT ON JET JET SYSTEM
C
C
      CALL MAKE_ON_SHELL(W_HADRON,WMASS,W_HADRON,2)
C
      DO I = 1 , 4
        TOP_HADRON(I) = BJET_HADRON(I) + W_HADRON(I)
      ENDDO
C
      TOP_MASS = SQRT(TOP_HADRON(4)**2-
     &  TOP_HADRON(3)**2-TOP_HADRON(2)**2-TOP_HADRON(1)**2)
C
C TRANSFORM W_HADRON TO TOP_HADRON REST FRAME
C
      CALL DLORENF(TOP_MASS,TOP_HADRON,W_HADRON,W_HAD_TOP)
      CALL COS_THETA_PHI(W_HAD_TOP,CTHETA_TH,PHI_TH) !COS THETA AND PHI OF
                                                     ! W IN TOP RESTFRAME
C
C TRANSFORM JET1_W TO W_HADRON REST FRAME
C
      CALL DLORENF(WMASS,W_HADRON,JET1_W,JET1_W_W)
      CALL COS_THETA_PHI(JET1_W_W,CTHETA_WH,PHI_WH) !COS THETA AND PHI OF
                                                    ! HIGHEST ET JET IN W REST
C                                                   ! FRAME
C
C ****  ATTEMPTING TO MANUFACTURE THE TOP DECAYING LEPTONICALLY
C ****  4 VECTOR SUCH THAT IT BALANCES PT. IMPOSE THE MASS OF THE
C ****  HADRONIC TOP QUARK
C
      CALL FIND_WLNU2D(WMASS,LEPTON1,NEUTRINO,W_LEPTON1,W_LEPTON2,OK)
C
      DO I = 1 , 4
        TOP_LEPTON1(I) = W_LEPTON1(I) + BJET_LEPTON(I)
        TOP_LEPTON2(I) = W_LEPTON2(I) + BJET_LEPTON(I)
      ENDDO
C
      TMASSL1 = (TOP_LEPTON1(4)**2-TOP_LEPTON1(3)**2-
     &  TOP_LEPTON1(2)**2 -TOP_LEPTON1(1)**2)
      IF ( TMASSL1.GT.0.0 ) THEN
        TMASSL1 = SQRT(TMASSL1)
      ELSE
        TMASSL1 = 0.0
      ENDIF
C
      TMASSL2 = (TOP_LEPTON2(4)**2-TOP_LEPTON2(3)**2-
     &  TOP_LEPTON2(2)**2 -TOP_LEPTON2(1)**2)
C
      IF ( TMASSL2.GT.0.0 ) THEN
        TMASSL2 = SQRT(TMASSL2)
      ELSE
        TMASSL2 = 0.0
      ENDIF
C
      IF ( ABS(TMASSL1-TOP_MASS).LT.ABS(TMASSL2-TOP_MASS) ) THEN
C 1ST SOLUTION IS CLOSEST
        TMASSL = TMASSL1
        CALL UCOPYDD(TOP_LEPTON1,TOP_LEPTON,4)
        CALL UCOPYDD(W_LEPTON1,W_LEPTON,4)
      ELSE
C 2ND SOLUTION IS CLOSEST
        TMASSL = TMASSL2
        CALL UCOPYDD(TOP_LEPTON2,TOP_LEPTON,4)
        CALL UCOPYDD(W_LEPTON2,W_LEPTON,4)
      ENDIF
C
      CALL DLORENF(TMASSL,TOP_LEPTON,W_LEPTON,W_LEP_TOP)
      CALL COS_THETA_PHI(W_LEP_TOP,CTHETA_TL,PHI_TL) !COS THETA AND PHI OF
                                                     ! W IN TOP RESTFRAME
C
      CALL DLORENF(WMASS,W_LEPTON,LEPTON1,LEPTON1_W)
      CALL COS_THETA_PHI(LEPTON1_W,CTHETA_WL,PHI_WL) !COS THETA AND PHI OF
                                                    ! HIGHEST ET JET IN W REST
                                                    ! FRAME
C
      TOP_MASS = 0.5*(TOP_MASS+TMASSL)
C
C
      REST (1) = 0.
      REST (2) = 0.
      DO I = 1 , 2
        REST(I) = TOP_LEPTON(I) + TOP_HADRON(I)
        REST(I) = -REST(I)  !PT OF REST OF EVENT.
      ENDDO
C
      ET_REST = SQRT(REST(1)**2 + REST(2)**2)
C
C ****  to fill EMAT and HMAT
C
C
      IF ( LEPTON_TYPE.EQ.1 ) THEN
C
C ****  ELECTRON. ENERGY RESOLUTIONS ARE FRACTIONAL
C
        SIG_L1 = LEPTON1(4)*RES(ELECTRON_RESOLN(1),
     &      ELECTRON_RESOLN(2), ELECTRON_RESOLN(3),LEPTON1(4))

        SIG_L1_ETA = RES(ELEC_ETA_RESOLN(1),ELEC_ETA_RESOLN(2),
     &      ELEC_ETA_RESOLN(3),LEPTON1(4))
C
        SIG_L1_PHI = RES(ELEC_PHI_RESOLN(1),ELEC_PHI_RESOLN(2),
     &      ELEC_PHI_RESOLN(3),LEPTON1(4))
      ELSE
C
C ****  MUON
C
        LINV = 1./LEPTON1(4)
        SIG_L1 = LINV*RES_MU(MUON_RESOLN(1),
     &      MUON_RESOLN(2), LINV)
        SIG_L1_ETA = RES(MUON_ETA_RESOLN(1),MUON_ETA_RESOLN(2),
     &      MUON_ETA_RESOLN(3),LINV)
C
        SIG_L1_PHI = RES(MUON_PHI_RESOLN(1),MUON_PHI_RESOLN(2),
     &      MUON_PHI_RESOLN(3),LINV)
      ENDIF
C
C
      CALL GET_POLAR(LEPTON1,LEPTON)
      IF ( LEPTON_TYPE.EQ.2 ) THEN
C MUON
        LEPTON(1) = 1.0/LEPTON(1)   ! 1/P
      ENDIF
C
      CALL GET_POLAR(BJET_LEPTON,BLEP_JET)
      CALL GET_POLAR(BJET_HADRON,BHAD_JET)
      CALL GET_POLAR(JET1_W,HAD_JET1)
      CALL GET_POLAR(JET2_W,HAD_JET2)
C
      SIG_BLEP = BLEP_JET(1)*RES(JET_RESOLN(1),JET_RESOLN(2),
     &  JET_RESOLN(3), BLEP_JET(1))
      SIG_BLEP_ETA = RES(JET_ETA_RESOLN(1),JET_ETA_RESOLN(2),
     &  JET_ETA_RESOLN(3), BLEP_JET(1))
      SIG_BLEP_PHI = RES(JET_PHI_RESOLN(1),JET_PHI_RESOLN(2),
     &  JET_PHI_RESOLN(3), BLEP_JET(1))
C
      SIG_BHAD = BHAD_JET(1)*RES(JET_RESOLN(1),JET_RESOLN(2),
     &  JET_RESOLN(3), BHAD_JET(1))
      SIG_BHAD_ETA = RES(JET_ETA_RESOLN(1),JET_ETA_RESOLN(2),
     &  JET_ETA_RESOLN(3), BHAD_JET(1))
      SIG_BHAD_PHI = RES(JET_PHI_RESOLN(1),JET_PHI_RESOLN(2),
     &  JET_PHI_RESOLN(3), BHAD_JET(1))
C
      SIG_J1 = HAD_JET1(1)*RES(JET_RESOLN(1),JET_RESOLN(2),
     &  JET_RESOLN(3), HAD_JET1(1))
      SIG_J1_ETA = RES(JET_ETA_RESOLN(1),JET_ETA_RESOLN(2),
     &  JET_ETA_RESOLN(3), HAD_JET1(1))
      SIG_J1_PHI = RES(JET_PHI_RESOLN(1),JET_PHI_RESOLN(2),
     &  JET_PHI_RESOLN(3), HAD_JET1(1))
C
      SIG_J2 = HAD_JET2(1)*RES(JET_RESOLN(1),JET_RESOLN(2),
     &  JET_RESOLN(3), HAD_JET2(1))
      SIG_J2_ETA = RES(JET_ETA_RESOLN(1),JET_ETA_RESOLN(2),
     &  JET_ETA_RESOLN(3), HAD_JET2(1))
      SIG_J2_PHI = RES(JET_PHI_RESOLN(1),JET_PHI_RESOLN(2),
     &  JET_PHI_RESOLN(3), HAD_JET2(1))
C
      SIG_REST = ET_REST*RES(JET_RESOLN(1),JET_RESOLN(2),
     &  JET_RESOLN(3), ET_REST)
C
      DO I = 1 , NMEAS
        DO J = 1 , NMEAS
          EMAT(I,J) = 0.0
        ENDDO
      ENDDO
C
      EMAT(1,1) = (SIG_REST*REST(1)/ET_REST)**2  !REST OF THE EVENT
      EMAT(2,2) = (SIG_REST*REST(2)/ET_REST)**2
C
      EMAT(3,3) = SIG_BLEP**2  !BJET LEPTON
      EMAT(4,4) = SIG_BLEP_ETA**2
      EMAT(5,5) = SIG_BLEP_PHI**2
C
      EMAT(6,6) = SIG_L1**2  !LEPTON
      EMAT(7,7) = SIG_L1_ETA**2
      EMAT(8,8) = SIG_L1_PHI**2
C
      EMAT(9,9)   = SIG_BHAD**2    !HADRONIC B JET
      EMAT(10,10) = SIG_BHAD_ETA**2
      EMAT(11,11) = SIG_BHAD_PHI**2
C
      EMAT(12,12) = SIG_J1**2    !HADRONIC W JET1
      EMAT(13,13) = SIG_J1_ETA**2
      EMAT(14,14) = SIG_J1_PHI**2
C
      EMAT(15,15) = SIG_J2**2    !HADRONIC W JET2
      EMAT(16,16) = SIG_J2_ETA**2
      EMAT(17,17) = SIG_J2_PHI**2
C
      CALL UCOPYDD(EMAT,HMAT,NMEAS*NMEAS)
      CALL DINV(NMEAS,HMAT,NMEAS,WORK,IER)
      IF ( IER.NE.0 ) THEN
        CALL ERRMSG(' TOP_FIT', 'TOP_FIT_INIVAL',
     &    ' Error inverting EMAT ','W')
      ENDIF
  999 RETURN
      END
