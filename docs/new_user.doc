                                              Olivier Callot
                                              Serban Protopopescu
                                              April 27,1989
                                              Updated Nov. 8,1991

                              D0 New user guide
                              =================


    Welcome  to D0.  This  document is  intended to  give you  some help in
trying to  understand how the  software effort is  structured, what are the
tools, what are  the methods, and  where you can find  more information. If
you find a particular document difficult to understand (including this one)
contact the author(s) of the document.



[1] HOW TO START:
_________________

    The D0 software is mainly  developped on VAX/VMS systems, and generally
available   at  every D0  node  for  use. The   official  source  files are
maintained on the FNALD0 cluster  using DEC CMS ( Code Management System ).
See D0$DOCS:CMS_USER.DOC for how to  use CMS . The software is divided into
many CMS libraries. You need to use  CMS only to make your modifications to
some library available to everybody  and you must contact the library CZAR.
The library  XXXX czar's name  and address  is given by the  logical symbol
D0$XXXX$CZAR.

    On every  D0 Vax,  there is an  area to store  the  sources and binary
files used in the D0 software. This  area is pointed to by the logical name
D0$ROOT, which is a virtual device,  i.e. you have to give a directory like
D0$ROOT:[DOCS]. Another logical name D0$BASE points to the top directory. 

    A  lot  of   logical  names  are   defined  to  point  to  most  of the
subdirectories of  this area. In  order to have the D0  environment ( i.e.
all the  logical names and  all the symbols  to call some  D0 procedures ),
each user has to put in his/her LOGIN.COM file the following statement: 

$ @device:[D0LIBRARY]D0LOCAL    ( "device" is the  name  of the disk  where
                                  [D0LIBRARY] resides.  You may try D0$DISK,
                                  or your own  default device,  or call your
                                  local librarian )

    This  defines the  general logical  names (  calls  D0PROLOG.COM ), the
general symbols ( calls D0PROSYMCOM.COM ) and the local symbols. D0LOCAL is
maintained   by  the  local D0    Librarian, all  other   files by  the BNL
librarians.  Contact first your  local librarian  in  case of problems with
the setting-up of your LOGIN, the list is in:

D0$DOCS:LOCAL_LIBRARIANS.LIST



[2] CODING RULES:
_________________ 

    In  order to  have   transportable   software,  and to   facilitate the
maintenance  of  existing  software by  people other  than the  authors, D0
impose some rules  for the offline  software. These  rules are described in
various documents. Refer  to  D0$DOCS:OFFLINE_STANDARDS for the limitations
on how to write FORTRAN programs,  and to D0$DOCS:LIBRARY_RULES for the way
to contribute to the D0 software, have the file maintained and distributed.
Refer to D0$DOCS:COOR_SYSTEM for the coordinate system and units to be used
in the software. 



[3] USEFUL TOOLS:
_________________

    Various  tools  are  available to  help  develop  software.  From small
command files to a D0 specific editor, they are all intended to help you be
more productive. They  are listed in  D0$DOCS:SOFTWARE_TOOLS.DOC, and their
use is strongly  encouraged. The most frequently  used tools invoked at the
DCL command level are:
$ EVE                (starts the D0 editor EVEDT)
$ D0ENTRY name       (finds the location of entry point name in the library) 
$ PBD                (starts the program builder)
$ LIBT library_name  (redefines symbols to use test version of
                      library_name)

 Another set of utilities that are useful for developing and debugging code
are DBANK (to use with debugger, called inside debugger) and ZBANK ( called
at DCL  level to  create the  utility  subroutines  needed for  a new Zebra
bank), see D0$DOCS:DBANK.DOC and D0$DOCS:ZBANK.DOC.


[4] WHERE TO FIND DOCUMENTATION:
________________________________

    Documentation of general interest is D0$DOCS. The following documents
will help you get started:

D0_ZEBRA_GUIDE.DOC        How Zebra is used in D0      
DST_GUIDE.DOC             Guide to standard DST data
LIBTEST.DOC               guide to LIBTEST facility
SOFTWARE_TOOLS.DOC        helpful tools
PAW_BEGINNERS_GUIDE.DOC   how to get started with PAW
PROGRAM_BUILDER.DOC       simple guide to program builder

In addition most libraries have more extensive documentation and manuals.
At some point you may find it useful to look at:

D0$DOCS:STRINGS_MANUAL.MEM            string manipulation subroutines
D0$EVENT_UTIL:EVENT_DUMP_GUIDE.DOC    event dumping facilities
D0$EVENT_UTIL:EVENT_IO_GUIDE.DOC      event I/O facilities
D0$ISAJET:ISAJET.DOC                  description of ISAJET
D0$ISAJET:ISAJET_COMMANDS.DOC         list of ISAJET commands
D0$ISAZEB:ISAZEB.MEM                  Zebra version of ISAJET (for D0)
D0$SRCP_UTIL:FLAGS_GUIDE.DOC          use of flags
D0$SRCP_UTIL:RCP_MANUAL.MEM           use of RCP files (run control parameters)
D0$UTIL:D0FLAVOR.DOC                  how to code for machine dependencies
D0$DOCS:DBANK.DOC                     how to look at Zebra banks in debugger
D0$DOCS:ZBANK.DOC                     how to generate templates for Zebra banks

All subroutines in the D0 library  are supposed to have headers documenting
what  they do and  how to  use them.  You can  get any  entry  point in the
library into the EVE editor by Gold-E followed by the entry point name.


[5] USE OF ZEBRA:
_________________

    D0 software uses the  CERN data management  system ZEBRA to handle data
and parameters. Sooner  or later you will have to  acquire some familiarity
with that system. The  best way to get started is  to read chapter 1 of the
Cern ZEBRA user guide and then  D0$DOCS:D0_ZEBRA_GUIDE.DOC. All Zebra banks
are documented in files of the form xxxx.ZEB (where xxxx is the name of the
bank). They  are in  subdirectories  of the form   D0$ZEB$yyyy, each one of
those subdirectories has a file of the form yyyy_TREE.ZEB, this gives you a
section of the Zebra  tree structure. You can  always get the documentation
for a bank into the EVE editor by giving  COMMAND: ZEB xxxx


[6] PROGRAM BUILDER:
____________________

    The reconstruction and  analysis code is being  developed in detachable
packages,  these  packages can be  used singly or  combined  with others by
means of the PROGRAM_BUILDER. To get started read 
D0$DOCS:PROGRAM_BUILDER.DOC. 


[7] FILE EXTENSIONS:
____________________

    You will find in the library files  with different extensions, many are
standard like .FOR or .PAS, some are specific to D0 software:

.DEF        parameter definitions (older files, should not be used for new)
.DOC        short documents not using RUNOFF
.INC        include file, must contain only common blocks
.LINK       parameter files, each is an offset for a ZEBRA structural link
.LNK        link command file
.MENU       COMPACK menu files (derived from .SET files, see below)
.PARAMS     parameter definitions
.PBD        PROGRAM_BUILDER files
.RCP        run control parameter files
.SET        definition files for COMPACK menu files
.STR        structure charts for D0 code (with RUNOFF instructions)
.STRUC      result of running RUNOFF on .STR files
.ZEB        Zebra bank documentation


[8] TUTORIALS:
==============

    A set of  tutorials on D0  software were  given in the  summer of 1990.
Copies of the  transparencies are  available as D0  Notes #1001-1009. Those
tutorials  were  also  video  taped, you  can  view the  tapes at  the FNAL
computer library.
