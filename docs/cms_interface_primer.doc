
                         --- CMS Interface Primer ---

    Yet another Priming Document.

    Intro: This document should get you started using the CMS interface.

    1) Tid bits about the CMS interface.

       - Currently, it is only located on the BNLCLx:: cluster.
       - It should only be used with OFFLINE libraries.
       - It only does Fortran code standards checking.

    2) To run the CMS interface enter the following command.

$ cmsinterface

    or 

$ cmsint

    for short.

    3) You can perform the following operations using the CMS interface.

        - Select a CMS library
        - Create new elements
        - Reserve elements
        - Replace elements
        - Make elements obsolete
        - Move elements to *other* CMS libraries

    The cms interface has been written using the COMPACK user interface. Once
you start up the program, all menu commands are self evident. Once you start to
use the CMS interface, you must adhere the following rules.

        1! - You must always create elements with the CMS interface
        2! - You must always replace elements with the CMS interface
        3! - You must always make elements obsolete with the CMS interface
        4! - You must always move elements to other libraries using the CMS
             interface

    The following resons motivate the above 4 rules. The CMS interface works
with both the CMS libraries and a database file. The database file keeps
information about all the elements which are inserted into any offline library,
thus when you create, modify or obsolete an element, the database must be
updated in order to keep the integrity of the CMS interface. The above 4 CMS
interface menu commands update the database. At some point in the future I will
setup the CMS interface/ CMS offline libraries such that the only way to
create, replace, obsolete and move an element is with the CMS interface.

    -- The following rules for entering elements when prompted by the CMS
       interface should be remembered.

        1) You can specify and element or list of elements using wild cards and
           separated by commas. The following string is a valid 'element set'.

        Enter elements: *.for,*.inc,c*.c,test.junk

        2) When you are requested to enter a list of elements you will also be
           asked to enter a list of elements to exclude from the initial list.
           This 'exclude element list' has the same format as the regular
           element list described in 1).

        3) Do not enter CMS remarks in quotes.

        4) There is one COMPACK menu command by the name of

                REDEFINE INC LOGICALS

           which is not self evident.

           One of the primary functions of the CMS interface is to run
       D0FLAVOR/CHECK on all created and replaced elements. D0FLAVOR/CHECK
       operates by compiling the element and checking the resulting listing
       file. Since the fortran compiler is used, all logical name which point
       to include files must be correctly defined. In most cases, if an element
       which uses an include file which has been modified along with the
       include file, you will have the include file somewhere outside the
       D0library directory structure. (i.e. your modified .inc file will not be
       in the directory D0$INC:) This means that we need to redefine the
       logical name D0$INC to be a search list which first points to the
       directory where the .inc file is to be found, followed by
       D0$INC$ROOT:[000000]. Only by redefining D0$INC: in this manner will the
       D0FLAVOR/CHECK command work on the created or replaced elements. This
       COMPACK command 'REDEFINE INC LOGICALS' does this redefinition. By
       default D0$INC, D0$LINKS, D0$PARMAS, D0$RCP are redefined as search
       lists which first point to the default directory and then to
       D0$xxxx$ROOT:[000000], (where xxxx is INC, LINKS ... etc). So, if your
       modified .inc, .links etc files are located in your default directory,
       then you do not have anything to worry about. But if they are in a
       different directory, you will need to execute this command in order to
       have the 'include' logical names properly defined.



    Ok, so this is the primer. Please send messages to BNLD0::ADLER for
questions or comments.


