
                                                   Serban D. Protopopescu
                                                   May 30,1991
                                                   version 2.0

                   GUIDE TO USE OF ZEBRA IN D0
                   ===========================
    

    This document is  meant as  introductory guide to  users (in particular
new users) to the way the D0 programs employ Zebra to organize the data and
detector parameters, and  to the available  utilities. Programmers who need
to create  new banks  should refer  to   D0$DOCS:ZEBRA_RULES.MEM. A certain
minimum familiarity with Zebra is  required. Users should read Chapter 1 of
the Cern ZEBRA user  guide, there the concepts of  stores, divisions, banks
and links are described. The sizes  of the Zebra common blocks are variable
since  they depend  on the size  of the  events and  amount of  information
needed for particular  applications. The way to  vary their sizes is to use
frames  which are  handled via  the  PROGRAM_BUILDER  which  constructs the
appropriate initialization subroutines.




[1] DOCUMENTATION:

    All   Zebra  banks  are    documented  and  kept  in  the  D0LIBRARY in
subdirectories of  D0$ZEB. They  have extension .ZEB  for bank contents and
the form XXXX_TREE.ZEB for tree  structure description. You can also access
the documentation  of any bank  directly from the D0  EVE editor by issuing
the command 'ZEB  xxxx' where xxxx  is the name of  the bank except for the
HEAD bank where one needs to specify  EVENT_HEAD or RUN_HEAD. To understand
the  documentation  users must be  familiar  with the  structure of a Zebra
bank,  this  is  described  in the  Cern  ZEBRA  user  guide  (page 5). The
documentation  is also used  in the VAX  symbolic debugger  using the DBANK
facility, see D0$DOCS:DBANK.DOC.


[2] UTILITIES:

    For creating Zebra banks the following subroutines must exist:
BKxxxx: book bank xxxx, one of the arguments must be the link to
        the created bank. See any of the BKxxxx subroutines in the
        library as an example.
    For filling a bank it is recommended to use a subroutine with name
xxxxFL, it in turn should call BKxxxx (if appropriate).
There is a subroutine MKRECO that can be called to create all the header
banks for event reconstruction  (RECO, PROC, HITS and HSTR). It  in turn
calls the above facilities.

    All Zebra banks  (if the rules in  ZEBRA_RULES.MEM  have been followed)
have utility subroutines to facilitate access to the information:
PRxxxx : do a formatted dump of the contents of bank xxxx
GZxxxx : integer function, give Zebra pointer to bank xxxx
GTxxxx : give contents of bank xxxx

    Programmers should use ZBANK facility when creating new banks, it is
invoked by simply:
$ ZBANK
it will then prompt for bank name and generate templates of all the files
that need to be made for a new bank.

    The PRxxxx   subroutines have a  universal  form but not  the GZxxxx or
GTxxxx. They should be,  however, well documented  and users should look at
the subroutines before using them.  Any subroutine in the D0 library can be
easily found with  the D0 EVE  editor, simply do  Gold-E and give the entry
point name (no  extension).  If the use of a  utility  subroutine cannot be
understood from  the comments  provided in the  subroutine header users are
encouraged to contact  the author(s) of the  offending module and complain.
Hits or processed event data may have been generated by the D0GEANT program
or by a reconstruction  program. In the first  case the banks hang from the
GEAN bank, in the second  from the RECO bank. See  subroutine PATHST on how
to select which ones the GZxxxx or GTxxxx subroutines will access.
The standard way to get a pointer to a bank xxxx is
    Lxxxx=GZxxxx()
by convention in the code pointers  to Zebra banks always start with letter
L. If the bank is  stand alone  GZxxxx has no  arguments. If it is a linear
structure  and GZxxxx  has no  arguments it  returns the  first bank in the
structure. In  this case GZxxxx may  also have as  argument the bank number
and will  return  the  pointer to  the bank  specified  unless  called with
argument 0 in  which case it will  return the first  bank in the structure.
Note that bank 1 is not  necessarily the first  bank in a linear structure.
In cases where more than one bank of  that name exists and they are not all
in one linear structure GZxxxx may  have more than one argument. Thus users
should look at a GZxxxx function before they use it for the first time.

    To read and write Zebra files the following utilities exist in the
D0$EVENT_UTIL$EVENT_IO directory (part of GENERAL):

EVTIN: read an event (previous event overwritten)
EVTIN2: read a 2nd event without wiping previous event
EVTRD: calls EVTIN, calls raw event dump facility (activated only on
       request) and increments event counter. Normally this is the
       subroutine that should be used to read events from file.
EVTCNT: integer function, gives number of events read by EVTRD.
EVWRIT: write one event to file E_run#_id#.DAT (and close file). A file
        E_run#_id#.DAT containing one event is generated with every call.
EVTWOS: write to selected output streams
EVDROP: add to list of banks to drop from output streams
EVBACK: remove from        "            "
WREVNT: write events to a previously defined file.


    To dump Zebra banks in a readable form all frames provide facilities to
request   event  dumps.  They use   utilities  in the    D0$EVENT_UTIL$DUMP
directory.


  For more details on event I/O and event dump utilities look at

D0$EVENT_UTIL:EVENT_IO_GUIDE.DOC
D0$EVENT_UTIL:EVENT_DUMP_GUIDE.DOC


[3] ZEBRA COMMON BLOCKS:

/ZEBCOM/:

    The event data is stored in the common block /ZEBCOM/ in two divisions:
a short term division for the event data itself (division 1 for online or 2
for offline) and  a long term  division for run  information. To initialize
ZEBCOM  there is  a utility   subroutine  INZCOM(I),  where I  must be 1 if
division 1 is to be used, for any  other value the default is division 2. A
version   of    INZCOM.FOR  exists  in    ZEBRA_UTIL,  it  is  used  by the
PROGRAM_BUILDER as a  template, users should not  modify it themselves. The
store number is IXCOM  and the event division  IXMAIN, normally IXCOM=0 and
IXMAIN=2 but users should not assume  that to be the case. The run division
number is IXDIVR. Most D0 programs  automatically call INZCOM so users need
not usually  concern  themselves  with the  initialization.  All event data
written or  read from files  has an inverted  tree  structure with the bank
HEAD as overall  supporting structure. The  structural link LHEAD in ZEBCOM
always points to  the last HEAD bank  read. Normally  HEAD is a single bank
but if events are being read in from more than one input file and more than
one event is  being kept in  memory at the  same time then  the user may be
dealing with a  linear  structure, each  event hanging from  different HEAD
banks.  The  structural link  LHEADR  points to the  HEAD bank  for the run
information (kept in the long term division).


/ZEBSTP/:

    Detector   and  program   parameters are  stored  in  the  common block
/ZEBSTP/.  The  utility  INZSTP must  be  called to  initialize  the ZEBSTP
common. A  version of  INZSTP.FOR exists in  ZEBRA_UTIL, it  is used by the
PROGRAM_BUILDER  as  a  template, users  should not  modify it  themselves.
Whether ZEBSTP is  initialized or not depends on  the applications program.
The store number is kept in IXSTP and the number of the division containing
the  parameters in  IDVSTP. There is  provision  for a  division containing
summaries  (IDVSUM), this is NOT  created by a call to  INZSTP. All data in
ZEBSTP  hangs  from  the  header  bank STPH,  the  common  has a  number of
permanent   structural links  defined for  each  detector.  Program control
parameters  are  in the  SRCP bank  under  STPH, users  should  familiarize
themselves with the  facility available to handle  those control parameters
by reading D0$DOCS:RCP_MANUAL.MEM.


/ZLINKA/:

     A  general  link  area  is   available  as a   facility  for reserving
structural  links  for  banks in  ZEBCOM, it  cannot  be used  for banks in
ZEBSTP. This is  meant to reduce  the need for every  user to create common
blocks  for his  own  link  areas. The  utility  INZLNK  must  be called to
initialize  the  link area.  See   D0$DOCS:ZEBRA_RULES.MEM  section [7] for
details.


/ZEBWRK/

    This a working area  common block. Can be used  by programs who want to
create long term banks that are never written to any files and are not part
of the ZEBSTP  structures. The utility INZWRK  must be called to initialize
this common block.


D0$LINKS:

    In the   D0$LINKS area  of the   D0LIBRARY  there is a   parameter file
IZxxxx.LINK   for every  Zebra  bank  xxxx.  This  parameter  indicates the
position of the structural link of the bank xxxx in the supporting bank.
Example:   

    INCLUDE 'D0$LINKS:IZRECO.LINK'
    LRECO=LQ(LHEAD-IZRECO)
is one way to get the pointer LRECO to the bank RECO. These parameteres
are normally used inside a GZxxxx function (see below), users should
get the pointer using them instead, i.e.
    LRECO=GZRECO()
