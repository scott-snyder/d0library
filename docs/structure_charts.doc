                                                     SDP Nov. 26,1986
                                                     Version 1.1

                      RULES FOR STRUCTURE CHARTS
                      ==========================


      Structure charts and state transition diagrams will be kept in the
  BNL cluster as part of the documentation for a given library. The
  structure charts for XXXX should be inserted into group STRUC in
  [D0CMS.XXXX]. Each file must have runoff instructions for proper
  centering and have extension .STR (for structure charts) and .STD (for
  state transition diagrams).Library procedures exist which fetch the
  files from [D0CMS.XXXX], run runoff and insert the result into
  [D0LIBRARY.XXXX.STRUC], the files there have extension .STRUC and
  .STDIA respectively. 

      Each structure chart must be divided into separate files in such a
  way that each file will not print more than one page in landscape form
  on a laser printer. Files that belong to the same structure chart
  should have the same name plus a number, the name should correspond to
  the name of the program. For example: The main program for the
  calibration task is called D0CALIB, the corresponding one-page files
  are D0CALIB_0.STR, D0CALIB_1.STR, D0CALIB_1_1.STR,etc.. Subroutines
  whose structure is shown on a separate page should include the number
  of that page the first time they appear. 

      Each .STR file must have:
   1) runoff centering instructions plus .LITERAL at the beginning 
      and .END LITERAL at the end 
   2) the structure chart title
   3) an author list
   4) a version number
   5) a date 
   6) a page identifier
      For example the page identifier for D0CALIB_1_1.STRUC 
      is D0CALIB_1_1. 

      A box in the structure chart should contain the name of the
  subroutine it represents, a short description, common blocks used and a
  page number if the calls are shown on a separate page. The data flows
  should indicate the control flags being passed, the data and the Zebra
  banks (the direction of the arrows indicating whether they are being
  filled or expected to be available). Notation for data flows: 

  *--> control,  o--> data,  @--> Zebra banks

 
       The simplest way to make sure these rules are satisfied is to use
  existing files in [D0CMS.CALIB] as templates. 

                  
      To create and edit structure chart files it is recommended that
  EVEDT be used, which will be properly setup if you include
  @appropriate_disk:[D0LIBRARY]D0LOCAL in your login file. To edit a file
  using EVEDT you simply type: EVE file_name. Once in the editor the most
  convenient way to use EVEDT for structure charts is to: 
 
   set the width of the screen to 132      (PF1 W: 132)
   set margins to 1 and 132                (PF1 M: 1 and 132)
   set overstrike mode                     (PF1 A)
   set rectangular mode                    (COMMAND: SET RECTANGULAR)

  When in overstrike mode you can go back to insert mode by PF1 A again.
  For additional commands refer to [D0LIBRARY.DOCS]EVEDT_GUIDE.MEM. 

    To use EVEDT you must ensure that your terminal is properly
  identified to the VAX. The simplest way is with the VMS command SET
  TERM/INQUIRE. Note that EVEDT will only work on VT200 or VT100
  terminals (or emulators). 
