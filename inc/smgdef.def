C----------------------------------------------------------------------
C-
C-   Created   3-SEP-1991   Herbert Greenlee
C-
C-   This file contains fortran-77 versions of some of the definitions
C-   in the SYS$LIBRARY:FORSYSDEF.TLB($SMGDEF).  It is intended to
C-   be used with the SMG emulator package on non-VAX computers.
C-
C----------------------------------------------------------------------
C*** MODULE $SMGDEF ***
C  Definitions for RTL Screen Management Facility
C
C  Input terminator codes
C
C
C  Control characters
C
      INTEGER SMG$K_TRM_NULL_CHAR
      data SMG$K_TRM_NULL_CHAR / z'00000000' /
      INTEGER SMG$K_TRM_CTRLA
      data SMG$K_TRM_CTRLA / z'00000001' /
      INTEGER SMG$K_TRM_CTRLB
      data SMG$K_TRM_CTRLB / z'00000002' /
      INTEGER SMG$K_TRM_CTRLC
      data SMG$K_TRM_CTRLC / z'00000003' /
      INTEGER SMG$K_TRM_CTRLD
      data SMG$K_TRM_CTRLD / z'00000004' /
      INTEGER SMG$K_TRM_CTRLE
      data SMG$K_TRM_CTRLE / z'00000005' /
      INTEGER SMG$K_TRM_CTRLF
      data SMG$K_TRM_CTRLF / z'00000006' /
      INTEGER SMG$K_TRM_CTRLG
      data SMG$K_TRM_CTRLG / z'00000007' /
      INTEGER SMG$K_TRM_CTRLH
      data SMG$K_TRM_CTRLH / z'00000008' /
      INTEGER SMG$K_TRM_CTRLI
      data SMG$K_TRM_CTRLI / z'00000009' /
      INTEGER SMG$K_TRM_CTRLJ
      data SMG$K_TRM_CTRLJ / z'0000000A' /
      INTEGER SMG$K_TRM_CTRLK
      data SMG$K_TRM_CTRLK / z'0000000B' /
      INTEGER SMG$K_TRM_CTRLL
      data SMG$K_TRM_CTRLL / z'0000000C' /
      INTEGER SMG$K_TRM_CTRLM
      data SMG$K_TRM_CTRLM / z'0000000D' /
      INTEGER SMG$K_TRM_CTRLN
      data SMG$K_TRM_CTRLN / z'0000000E' /
      INTEGER SMG$K_TRM_CTRLO
      data SMG$K_TRM_CTRLO / z'0000000F' /
      INTEGER SMG$K_TRM_CTRLP
      data SMG$K_TRM_CTRLP / z'00000010' /
      INTEGER SMG$K_TRM_CTRLQ
      data SMG$K_TRM_CTRLQ / z'00000011' /
      INTEGER SMG$K_TRM_CTRLR
      data SMG$K_TRM_CTRLR / z'00000012' /
      INTEGER SMG$K_TRM_CTRLS
      data SMG$K_TRM_CTRLS / z'00000013' /
      INTEGER SMG$K_TRM_CTRLT
      data SMG$K_TRM_CTRLT / z'00000014' /
      INTEGER SMG$K_TRM_CTRLU
      data SMG$K_TRM_CTRLU / z'00000015' /
      INTEGER SMG$K_TRM_CTRLV
      data SMG$K_TRM_CTRLV / z'00000016' /
      INTEGER SMG$K_TRM_CTRLW
      data SMG$K_TRM_CTRLW / z'00000017' /
      INTEGER SMG$K_TRM_CTRLX
      data SMG$K_TRM_CTRLX / z'00000018' /
      INTEGER SMG$K_TRM_CTRLY
      data SMG$K_TRM_CTRLY / z'00000019' /
      INTEGER SMG$K_TRM_CTRLZ
      data SMG$K_TRM_CTRLZ / z'0000001A' /
      INTEGER SMG$K_TRM_ESCAPE
      data SMG$K_TRM_ESCAPE / z'0000001B' /
      INTEGER SMG$K_TRM_FS
      data SMG$K_TRM_FS / z'0000001C' /
      INTEGER SMG$K_TRM_GS
      data SMG$K_TRM_GS / z'0000001D' /
      INTEGER SMG$K_TRM_RS
      data SMG$K_TRM_RS / z'0000001E' /
      INTEGER SMG$K_TRM_US
      data SMG$K_TRM_US / z'0000001F' /
      INTEGER SMG$K_TRM_SPACE
      data SMG$K_TRM_SPACE / z'00000020' /
      INTEGER SMG$K_TRM_EXCLAMATION_POINT
      data SMG$K_TRM_EXCLAMATION_POINT / z'00000021' /
      INTEGER SMG$K_TRM_DOUBLE_QUOTE
      data SMG$K_TRM_DOUBLE_QUOTE / z'00000022' /
      INTEGER SMG$K_TRM_NUMBER_SIGN
      data SMG$K_TRM_NUMBER_SIGN / z'00000023' /
      INTEGER SMG$K_TRM_DOLLAR_SIGN
      data SMG$K_TRM_DOLLAR_SIGN / z'00000024' /
      INTEGER SMG$K_TRM_PERCENT_SIGN
      data SMG$K_TRM_PERCENT_SIGN / z'00000025' /
      INTEGER SMG$K_TRM_AMPERSAND
      data SMG$K_TRM_AMPERSAND / z'00000026' /
      INTEGER SMG$K_TRM_QUOTE
      data SMG$K_TRM_QUOTE / z'00000027' /
      INTEGER SMG$K_TRM_LEFT_PAREN
      data SMG$K_TRM_LEFT_PAREN / z'00000028' /
      INTEGER SMG$K_TRM_RIGHT_PAREN
      data SMG$K_TRM_RIGHT_PAREN / z'00000029' /
      INTEGER SMG$K_TRM_ASTERISK
      data SMG$K_TRM_ASTERISK / z'0000002A' /
      INTEGER SMG$K_TRM_PLUS_SIGN
      data SMG$K_TRM_PLUS_SIGN / z'0000002B' /
      INTEGER SMG$K_TRM_COMMA_CHAR
      data SMG$K_TRM_COMMA_CHAR / z'0000002C' /
      INTEGER SMG$K_TRM_DASH
      data SMG$K_TRM_DASH / z'0000002D' /
      INTEGER SMG$K_TRM_DOT
      data SMG$K_TRM_DOT / z'0000002E' /
      INTEGER SMG$K_TRM_SLASH
      data SMG$K_TRM_SLASH / z'0000002F' /
      INTEGER SMG$K_TRM_ZERO
      data SMG$K_TRM_ZERO / z'00000030' /
      INTEGER SMG$K_TRM_ONE
      data SMG$K_TRM_ONE / z'00000031' /
      INTEGER SMG$K_TRM_TWO
      data SMG$K_TRM_TWO / z'00000032' /
      INTEGER SMG$K_TRM_THREE
      data SMG$K_TRM_THREE / z'00000033' /
      INTEGER SMG$K_TRM_FOUR
      data SMG$K_TRM_FOUR / z'00000034' /
      INTEGER SMG$K_TRM_FIVE
      data SMG$K_TRM_FIVE / z'00000035' /
      INTEGER SMG$K_TRM_SIX
      data SMG$K_TRM_SIX / z'00000036' /
      INTEGER SMG$K_TRM_SEVEN
      data SMG$K_TRM_SEVEN / z'00000037' /
      INTEGER SMG$K_TRM_EIGHT
      data SMG$K_TRM_EIGHT / z'00000038' /
      INTEGER SMG$K_TRM_NINE
      data SMG$K_TRM_NINE / z'00000039' /
      INTEGER SMG$K_TRM_COLON
      data SMG$K_TRM_COLON / z'0000003A' /
      INTEGER SMG$K_TRM_SEMICOLON
      data SMG$K_TRM_SEMICOLON / z'0000003B' /
      INTEGER SMG$K_TRM_LESS_THAN
      data SMG$K_TRM_LESS_THAN / z'0000003C' /
      INTEGER SMG$K_TRM_EQUAL
      data SMG$K_TRM_EQUAL / z'0000003D' /
      INTEGER SMG$K_TRM_GREATER_THAN
      data SMG$K_TRM_GREATER_THAN / z'0000003E' /
      INTEGER SMG$K_TRM_QUESTION_MARK
      data SMG$K_TRM_QUESTION_MARK / z'0000003F' /
      INTEGER SMG$K_TRM_AT_SIGN
      data SMG$K_TRM_AT_SIGN / z'00000040' /
      INTEGER SMG$K_TRM_UPPERCASE_A
      data SMG$K_TRM_UPPERCASE_A / z'00000041' /
      INTEGER SMG$K_TRM_UPPERCASE_B
      data SMG$K_TRM_UPPERCASE_B / z'00000042' /
      INTEGER SMG$K_TRM_UPPERCASE_C
      data SMG$K_TRM_UPPERCASE_C / z'00000043' /
      INTEGER SMG$K_TRM_UPPERCASE_D
      data SMG$K_TRM_UPPERCASE_D / z'00000044' /
      INTEGER SMG$K_TRM_UPPERCASE_E
      data SMG$K_TRM_UPPERCASE_E / z'00000045' /
      INTEGER SMG$K_TRM_UPPERCASE_F
      data SMG$K_TRM_UPPERCASE_F / z'00000046' /
      INTEGER SMG$K_TRM_UPPERCASE_G
      data SMG$K_TRM_UPPERCASE_G / z'00000047' /
      INTEGER SMG$K_TRM_UPPERCASE_H
      data SMG$K_TRM_UPPERCASE_H / z'00000048' /
      INTEGER SMG$K_TRM_UPPERCASE_I
      data SMG$K_TRM_UPPERCASE_I / z'00000049' /
      INTEGER SMG$K_TRM_UPPERCASE_J
      data SMG$K_TRM_UPPERCASE_J / z'0000004A' /
      INTEGER SMG$K_TRM_UPPERCASE_K
      data SMG$K_TRM_UPPERCASE_K / z'0000004B' /
      INTEGER SMG$K_TRM_UPPERCASE_L
      data SMG$K_TRM_UPPERCASE_L / z'0000004C' /
      INTEGER SMG$K_TRM_UPPERCASE_M
      data SMG$K_TRM_UPPERCASE_M / z'0000004D' /
      INTEGER SMG$K_TRM_UPPERCASE_N
      data SMG$K_TRM_UPPERCASE_N / z'0000004E' /
      INTEGER SMG$K_TRM_UPPERCASE_O
      data SMG$K_TRM_UPPERCASE_O / z'0000004F' /
      INTEGER SMG$K_TRM_UPPERCASE_P
      data SMG$K_TRM_UPPERCASE_P / z'00000050' /
      INTEGER SMG$K_TRM_UPPERCASE_Q
      data SMG$K_TRM_UPPERCASE_Q / z'00000051' /
      INTEGER SMG$K_TRM_UPPERCASE_R
      data SMG$K_TRM_UPPERCASE_R / z'00000052' /
      INTEGER SMG$K_TRM_UPPERCASE_S
      data SMG$K_TRM_UPPERCASE_S / z'00000053' /
      INTEGER SMG$K_TRM_UPPERCASE_T
      data SMG$K_TRM_UPPERCASE_T / z'00000054' /
      INTEGER SMG$K_TRM_UPPERCASE_U
      data SMG$K_TRM_UPPERCASE_U / z'00000055' /
      INTEGER SMG$K_TRM_UPPERCASE_V
      data SMG$K_TRM_UPPERCASE_V / z'00000056' /
      INTEGER SMG$K_TRM_UPPERCASE_W
      data SMG$K_TRM_UPPERCASE_W / z'00000057' /
      INTEGER SMG$K_TRM_UPPERCASE_X
      data SMG$K_TRM_UPPERCASE_X / z'00000058' /
      INTEGER SMG$K_TRM_UPPERCASE_Y
      data SMG$K_TRM_UPPERCASE_Y / z'00000059' /
      INTEGER SMG$K_TRM_UPPERCASE_Z
      data SMG$K_TRM_UPPERCASE_Z / z'0000005A' /
      INTEGER SMG$K_TRM_LEFT_BRACKET
      data SMG$K_TRM_LEFT_BRACKET / z'0000005B' /
      INTEGER SMG$K_TRM_BACKSLASH
      data SMG$K_TRM_BACKSLASH / z'0000005C' /
      INTEGER SMG$K_TRM_RIGHT_BRACKET
      data SMG$K_TRM_RIGHT_BRACKET / z'0000005D' /
      INTEGER SMG$K_TRM_CARET
      data SMG$K_TRM_CARET / z'0000005E' /
      INTEGER SMG$K_TRM_UNDERLINE
      data SMG$K_TRM_UNDERLINE / z'0000005F' /
      INTEGER SMG$K_TRM_GRAVE_ACCENT
      data SMG$K_TRM_GRAVE_ACCENT / z'00000060' /
      INTEGER SMG$K_TRM_LOWERCASE_A
      data SMG$K_TRM_LOWERCASE_A / z'00000061' /
      INTEGER SMG$K_TRM_LOWERCASE_B
      data SMG$K_TRM_LOWERCASE_B / z'00000062' /
      INTEGER SMG$K_TRM_LOWERCASE_C
      data SMG$K_TRM_LOWERCASE_C / z'00000063' /
      INTEGER SMG$K_TRM_LOWERCASE_D
      data SMG$K_TRM_LOWERCASE_D / z'00000064' /
      INTEGER SMG$K_TRM_LOWERCASE_E
      data SMG$K_TRM_LOWERCASE_E / z'00000065' /
      INTEGER SMG$K_TRM_LOWERCASE_F
      data SMG$K_TRM_LOWERCASE_F / z'00000066' /
      INTEGER SMG$K_TRM_LOWERCASE_G
      data SMG$K_TRM_LOWERCASE_G / z'00000067' /
      INTEGER SMG$K_TRM_LOWERCASE_H
      data SMG$K_TRM_LOWERCASE_H / z'00000068' /
      INTEGER SMG$K_TRM_LOWERCASE_I
      data SMG$K_TRM_LOWERCASE_I / z'00000069' /
      INTEGER SMG$K_TRM_LOWERCASE_J
      data SMG$K_TRM_LOWERCASE_J / z'0000006A' /
      INTEGER SMG$K_TRM_LOWERCASE_K
      data SMG$K_TRM_LOWERCASE_K / z'0000006B' /
      INTEGER SMG$K_TRM_LOWERCASE_L
      data SMG$K_TRM_LOWERCASE_L / z'0000006C' /
      INTEGER SMG$K_TRM_LOWERCASE_M
      data SMG$K_TRM_LOWERCASE_M / z'0000006D' /
      INTEGER SMG$K_TRM_LOWERCASE_N
      data SMG$K_TRM_LOWERCASE_N / z'0000006E' /
      INTEGER SMG$K_TRM_LOWERCASE_O
      data SMG$K_TRM_LOWERCASE_O / z'0000006F' /
      INTEGER SMG$K_TRM_LOWERCASE_P
      data SMG$K_TRM_LOWERCASE_P / z'00000070' /
      INTEGER SMG$K_TRM_LOWERCASE_Q
      data SMG$K_TRM_LOWERCASE_Q / z'00000071' /
      INTEGER SMG$K_TRM_LOWERCASE_R
      data SMG$K_TRM_LOWERCASE_R / z'00000072' /
      INTEGER SMG$K_TRM_LOWERCASE_S
      data SMG$K_TRM_LOWERCASE_S / z'00000073' /
      INTEGER SMG$K_TRM_LOWERCASE_T
      data SMG$K_TRM_LOWERCASE_T / z'00000074' /
      INTEGER SMG$K_TRM_LOWERCASE_U
      data SMG$K_TRM_LOWERCASE_U / z'00000075' /
      INTEGER SMG$K_TRM_LOWERCASE_V
      data SMG$K_TRM_LOWERCASE_V / z'00000076' /
      INTEGER SMG$K_TRM_LOWERCASE_W
      data SMG$K_TRM_LOWERCASE_W / z'00000077' /
      INTEGER SMG$K_TRM_LOWERCASE_X
      data SMG$K_TRM_LOWERCASE_X / z'00000078' /
      INTEGER SMG$K_TRM_LOWERCASE_Y
      data SMG$K_TRM_LOWERCASE_Y / z'00000079' /
      INTEGER SMG$K_TRM_LOWERCASE_Z
      data SMG$K_TRM_LOWERCASE_Z / z'0000007A' /
      INTEGER SMG$K_TRM_LEFT_BRACE
      data SMG$K_TRM_LEFT_BRACE / z'0000007B' /
      INTEGER SMG$K_TRM_VERTICAL_LINE
      data SMG$K_TRM_VERTICAL_LINE / z'0000007C' /
      INTEGER SMG$K_TRM_RIGHT_BRACE
      data SMG$K_TRM_RIGHT_BRACE / z'0000007D' /
      INTEGER SMG$K_TRM_TILDE
      data SMG$K_TRM_TILDE / z'0000007E' /
      INTEGER SMG$K_TRM_DELETE
      data SMG$K_TRM_DELETE / z'0000007F' /
C
C  Synonyms for control characters
C
      INTEGER SMG$K_TRM_BS
      data SMG$K_TRM_BS / z'00000008' /
      INTEGER SMG$K_TRM_HT
      data SMG$K_TRM_HT / z'00000009' /
      INTEGER SMG$K_TRM_LF
      data SMG$K_TRM_LF / z'0000000A' /
      INTEGER SMG$K_TRM_VT
      data SMG$K_TRM_VT / z'0000000B' /
      INTEGER SMG$K_TRM_FF
      data SMG$K_TRM_FF / z'0000000C' /
      INTEGER SMG$K_TRM_CR
      data SMG$K_TRM_CR / z'0000000D' /
C
C  Keypad keys
C
      INTEGER SMG$K_TRM_PF1
      data SMG$K_TRM_PF1 / z'00000100' /
      INTEGER SMG$K_TRM_PF2
      data SMG$K_TRM_PF2 / z'00000101' /
      INTEGER SMG$K_TRM_PF3
      data SMG$K_TRM_PF3 / z'00000102' /
      INTEGER SMG$K_TRM_PF4
      data SMG$K_TRM_PF4 / z'00000103' /
      INTEGER SMG$K_TRM_KP0
      data SMG$K_TRM_KP0 / z'00000104' /
      INTEGER SMG$K_TRM_KP1
      data SMG$K_TRM_KP1 / z'00000105' /
      INTEGER SMG$K_TRM_KP2
      data SMG$K_TRM_KP2 / z'00000106' /
      INTEGER SMG$K_TRM_KP3
      data SMG$K_TRM_KP3 / z'00000107' /
      INTEGER SMG$K_TRM_KP4
      data SMG$K_TRM_KP4 / z'00000108' /
      INTEGER SMG$K_TRM_KP5
      data SMG$K_TRM_KP5 / z'00000109' /
      INTEGER SMG$K_TRM_KP6
      data SMG$K_TRM_KP6 / z'0000010A' /
      INTEGER SMG$K_TRM_KP7
      data SMG$K_TRM_KP7 / z'0000010B' /
      INTEGER SMG$K_TRM_KP8
      data SMG$K_TRM_KP8 / z'0000010C' /
      INTEGER SMG$K_TRM_KP9
      data SMG$K_TRM_KP9 / z'0000010D' /
      INTEGER SMG$K_TRM_ENTER
      data SMG$K_TRM_ENTER / z'0000010E' /
      INTEGER SMG$K_TRM_MINUS
      data SMG$K_TRM_MINUS / z'0000010F' /
      INTEGER SMG$K_TRM_COMMA
      data SMG$K_TRM_COMMA / z'00000110' /
      INTEGER SMG$K_TRM_PERIOD
      data SMG$K_TRM_PERIOD / z'00000111' /
C
C  Cursor positioning keys
C
      INTEGER SMG$K_TRM_UP
      data SMG$K_TRM_UP / z'00000112' /
      INTEGER SMG$K_TRM_DOWN
      data SMG$K_TRM_DOWN / z'00000113' /
      INTEGER SMG$K_TRM_LEFT
      data SMG$K_TRM_LEFT / z'00000114' /
      INTEGER SMG$K_TRM_RIGHT
      data SMG$K_TRM_RIGHT / z'00000115' /
C
C  Function keys
C
      INTEGER SMG$K_TRM_F1
      data SMG$K_TRM_F1 / z'00000119' /
      INTEGER SMG$K_TRM_F2
      data SMG$K_TRM_F2 / z'0000011A' /
      INTEGER SMG$K_TRM_F3
      data SMG$K_TRM_F3 / z'0000011B' /
      INTEGER SMG$K_TRM_F4
      data SMG$K_TRM_F4 / z'0000011C' /
      INTEGER SMG$K_TRM_F5
      data SMG$K_TRM_F5 / z'0000011D' /
      INTEGER SMG$K_TRM_F6
      data SMG$K_TRM_F6 / z'0000011E' /
      INTEGER SMG$K_TRM_F7
      data SMG$K_TRM_F7 / z'0000011F' /
      INTEGER SMG$K_TRM_F8
      data SMG$K_TRM_F8 / z'00000120' /
      INTEGER SMG$K_TRM_F9
      data SMG$K_TRM_F9 / z'00000121' /
      INTEGER SMG$K_TRM_F10
      data SMG$K_TRM_F10 / z'00000122' /
      INTEGER SMG$K_TRM_F11
      data SMG$K_TRM_F11 / z'00000123' /
      INTEGER SMG$K_TRM_F12
      data SMG$K_TRM_F12 / z'00000124' /
      INTEGER SMG$K_TRM_F13
      data SMG$K_TRM_F13 / z'00000125' /
      INTEGER SMG$K_TRM_F14
      data SMG$K_TRM_F14 / z'00000126' /
      INTEGER SMG$K_TRM_F15
      data SMG$K_TRM_F15 / z'00000127' /
      INTEGER SMG$K_TRM_F16
      data SMG$K_TRM_F16 / z'00000128' /
      INTEGER SMG$K_TRM_F17
      data SMG$K_TRM_F17 / z'00000129' /
      INTEGER SMG$K_TRM_F18
      data SMG$K_TRM_F18 / z'0000012A' /
      INTEGER SMG$K_TRM_F19
      data SMG$K_TRM_F19 / z'0000012B' /
      INTEGER SMG$K_TRM_F20
      data SMG$K_TRM_F20 / z'0000012C' /
C
C  Synonyms for function keys
C
      INTEGER SMG$K_TRM_HELP
      data SMG$K_TRM_HELP / z'00000127' /
      INTEGER SMG$K_TRM_DO
      data SMG$K_TRM_DO / z'00000128' /
C
C  Editing keys
C
      INTEGER SMG$K_TRM_E1
      data SMG$K_TRM_E1 / z'00000137' /
      INTEGER SMG$K_TRM_E2
      data SMG$K_TRM_E2 / z'00000138' /
      INTEGER SMG$K_TRM_E3
      data SMG$K_TRM_E3 / z'00000139' /
      INTEGER SMG$K_TRM_E4
      data SMG$K_TRM_E4 / z'0000013A' /
      INTEGER SMG$K_TRM_E5
      data SMG$K_TRM_E5 / z'0000013B' /
      INTEGER SMG$K_TRM_E6
      data SMG$K_TRM_E6 / z'0000013C' /
C
C  Synonyms for editing keys
C
      INTEGER SMG$K_TRM_FIND
      data SMG$K_TRM_FIND / z'00000137' /
      INTEGER SMG$K_TRM_INSERT_HERE
      data SMG$K_TRM_INSERT_HERE / z'00000138' /
      INTEGER SMG$K_TRM_REMOVE
      data SMG$K_TRM_REMOVE / z'00000139' /
      INTEGER SMG$K_TRM_SELECT
      data SMG$K_TRM_SELECT / z'0000013A' /
      INTEGER SMG$K_TRM_PREV_SCREEN
      data SMG$K_TRM_PREV_SCREEN / z'0000013B' /
      INTEGER SMG$K_TRM_NEXT_SCREEN
      data SMG$K_TRM_NEXT_SCREEN / z'0000013C' /
C
C  Locator keys
C
      INTEGER SMG$K_TRM_FIRST_DOWN
      data SMG$K_TRM_FIRST_DOWN / z'00000141' /
      INTEGER SMG$K_TRM_SECOND_DOWN
      data SMG$K_TRM_SECOND_DOWN / z'00000142' /
      INTEGER SMG$K_TRM_THIRD_DOWN
      data SMG$K_TRM_THIRD_DOWN / z'00000143' /
      INTEGER SMG$K_TRM_FOURTH_DOWN
      data SMG$K_TRM_FOURTH_DOWN / z'00000144' /
      INTEGER SMG$K_TRM_FIRST_UP
      data SMG$K_TRM_FIRST_UP / z'00000145' /
      INTEGER SMG$K_TRM_SECOND_UP
      data SMG$K_TRM_SECOND_UP / z'00000146' /
      INTEGER SMG$K_TRM_THIRD_UP
      data SMG$K_TRM_THIRD_UP / z'00000147' /
      INTEGER SMG$K_TRM_FOURTH_UP
      data SMG$K_TRM_FOURTH_UP / z'00000148' /
C
C  Conditions
C
      INTEGER SMG$K_TRM_CANCELLED
      data SMG$K_TRM_CANCELLED / z'000001FC' /
      INTEGER SMG$K_TRM_TIMEOUT
      data SMG$K_TRM_TIMEOUT / z'000001FD' /
      INTEGER SMG$K_TRM_BUFFER_FULL
      data SMG$K_TRM_BUFFER_FULL / z'000001FE' /
      INTEGER SMG$K_TRM_UNKNOWN
      data SMG$K_TRM_UNKNOWN / z'000001FF' /
C
C  Screen Management request types - These constants are used internally
C  by SMG$ and should not be used by users.
C
      INTEGER SMG$C_CHANGE_RENDITION
      data SMG$C_CHANGE_RENDITION / z'0000000A' /
      INTEGER SMG$C_DELETE_CHARS
      data SMG$C_DELETE_CHARS / z'0000000B' /
      INTEGER SMG$C_ERASE_DISPLAY
      data SMG$C_ERASE_DISPLAY / z'0000000C' /
      INTEGER SMG$C_ERASE_LINE
      data SMG$C_ERASE_LINE / z'0000000D' /
      INTEGER SMG$C_HOME_CURSOR
      data SMG$C_HOME_CURSOR / z'0000000E' /
      INTEGER SMG$C_INSERT_CHARS
      data SMG$C_INSERT_CHARS / z'0000000F' /
      INTEGER SMG$C_INSERT_LINE
      data SMG$C_INSERT_LINE / z'00000010' /
      INTEGER SMG$C_PUT_CHARS
      data SMG$C_PUT_CHARS / z'00000011' /
      INTEGER SMG$C_PUT_LINE
      data SMG$C_PUT_LINE / z'00000012' /
      INTEGER SMG$C_PUT_DISPLAY_ENCODED
      data SMG$C_PUT_DISPLAY_ENCODED / z'00000013' /
      INTEGER SMG$C_RETURN_CURSOR_POS
      data SMG$C_RETURN_CURSOR_POS / z'00000014' /
      INTEGER SMG$C_PUT_WITH_SCROLL
      data SMG$C_PUT_WITH_SCROLL / z'00000015' /
      INTEGER SMG$C_SET_CURSOR_ABS
      data SMG$C_SET_CURSOR_ABS / z'00000016' /
      INTEGER SMG$C_SET_CURSOR_REL
      data SMG$C_SET_CURSOR_REL / z'00000017' /
      INTEGER SMG$C_DELETE_LINE
      data SMG$C_DELETE_LINE / z'00000018' /
      INTEGER SMG$C_ERASE_CHARS
      data SMG$C_ERASE_CHARS / z'00000019' /
      INTEGER SMG$C_SCROLL_DISPLAY_AREA
      data SMG$C_SCROLL_DISPLAY_AREA / z'0000001A' /
      INTEGER SMG$C_CHANGE_VIRTUAL_DISPLAY
      data SMG$C_CHANGE_VIRTUAL_DISPLAY / z'0000001B' /
      INTEGER SMG$C_LABEL_BORDER
      data SMG$C_LABEL_BORDER / z'0000001C' /
      INTEGER SMG$C_END_DISPLAY_UPDATE
      data SMG$C_END_DISPLAY_UPDATE / z'0000001D' /
      INTEGER SMG$C_MOVE_TEXT
      data SMG$C_MOVE_TEXT / z'0000001E' /
C
C  	Character Set Codes
C
      INTEGER SMG$C_UNITED_KINGDOM
      data SMG$C_UNITED_KINGDOM / z'00000000' /
      INTEGER SMG$C_ASCII
      data SMG$C_ASCII / z'00000001' /
      INTEGER SMG$C_SPEC_GRAPHICS
      data SMG$C_SPEC_GRAPHICS / z'00000002' /
      INTEGER SMG$C_ALT_CHAR
      data SMG$C_ALT_CHAR / z'00000003' /
      INTEGER SMG$C_ALT_GRAPHICS
      data SMG$C_ALT_GRAPHICS / z'00000004' /
C
C 	The following constants define corner cursor positions used in
C 	SMG$HOME_CURSOR.
C
      INTEGER SMG$C_UPPER_LEFT
      data SMG$C_UPPER_LEFT / z'00000000' /
      INTEGER SMG$C_LOWER_LEFT
      data SMG$C_LOWER_LEFT / z'00000001' /
      INTEGER SMG$C_UPPER_RIGHT
      data SMG$C_UPPER_RIGHT / z'00000002' /
      INTEGER SMG$C_LOWER_RIGHT
      data SMG$C_LOWER_RIGHT / z'00000003' /
C
C 	The following constants define label positions used in
C 	SMG$LABEL_BORDER.
C
      INTEGER SMG$K_TOP
      data SMG$K_TOP / z'00000000' /
      INTEGER SMG$K_BOTTOM
      data SMG$K_BOTTOM / z'00000001' /
      INTEGER SMG$K_LEFT
      data SMG$K_LEFT / z'00000002' /
      INTEGER SMG$K_RIGHT
      data SMG$K_RIGHT / z'00000003' /
C
C 	The following constants define menu types used in
C 	SMG$CREATE_MENU.
C
      INTEGER SMG$K_BLOCK
      data SMG$K_BLOCK / z'00000000' /
      INTEGER SMG$K_VERTICAL
      data SMG$K_VERTICAL / z'00000001' /
      INTEGER SMG$K_HORIZONTAL
      data SMG$K_HORIZONTAL / z'00000002' /
C
C 	Master color wheel for screen background colors.
C 	Used with SMG$CHANGE_PBD_CHARACTERISTICS.
C
      INTEGER SMG$C_COLOR_UNKNOWN
      data SMG$C_COLOR_UNKNOWN / z'00000000' /
      INTEGER SMG$C_COLOR_WHITE
      data SMG$C_COLOR_WHITE / z'00000001' /
      INTEGER SMG$C_COLOR_BLACK
      data SMG$C_COLOR_BLACK / z'00000002' /
      INTEGER SMG$C_COLOR_BLUE
      data SMG$C_COLOR_BLUE / z'00000003' /
      INTEGER SMG$C_COLOR_CYAN
      data SMG$C_COLOR_CYAN / z'00000004' /
      INTEGER SMG$C_COLOR_GREEN
      data SMG$C_COLOR_GREEN / z'00000005' /
      INTEGER SMG$C_COLOR_MAGENTA
      data SMG$C_COLOR_MAGENTA / z'00000006' /
      INTEGER SMG$C_COLOR_RED
      data SMG$C_COLOR_RED / z'00000007' /
      INTEGER SMG$C_COLOR_YELLOW
      data SMG$C_COLOR_YELLOW / z'00000008' /
      INTEGER SMG$C_COLOR_LIGHT
      data SMG$C_COLOR_LIGHT / z'00000009' /
      INTEGER SMG$C_COLOR_DARK
      data SMG$C_COLOR_DARK / z'0000000A' /
      INTEGER SMG$C_COLOR_USER1
      data SMG$C_COLOR_USER1 / z'0000000B' /
      INTEGER SMG$C_COLOR_USER2
      data SMG$C_COLOR_USER2 / z'0000000C' /
      INTEGER SMG$C_COLOR_USER3
      data SMG$C_COLOR_USER3 / z'0000000D' /
      INTEGER SMG$C_COLOR_USER4
      data SMG$C_COLOR_USER4 / z'0000000E' /
      INTEGER SMG$C_COLOR_USER5
      data SMG$C_COLOR_USER5 / z'0000000F' /
      INTEGER SMG$C_COLOR_USER6
      data SMG$C_COLOR_USER6 / z'00000010' /
      INTEGER SMG$C_COLOR_USER7
      data SMG$C_COLOR_USER7 / z'00000011' /
      INTEGER SMG$C_COLOR_USER8
      data SMG$C_COLOR_USER8 / z'00000012' /
C
C  The following constants describe the type of terminal
C  and are used with SMG$GET_PASTEBOARD_ATTRIBUTES.
C
      INTEGER SMG$K_UNKNOWN
      data SMG$K_UNKNOWN / z'00000000' /
      INTEGER SMG$K_VT05
      data SMG$K_VT05 / z'00000001' /
      INTEGER SMG$K_VT52
      data SMG$K_VT52 / z'00000002' /
      INTEGER SMG$K_VT100
      data SMG$K_VT100 / z'00000003' /
      INTEGER SMG$K_VTFOREIGN
      data SMG$K_VTFOREIGN / z'00000004' /
      INTEGER SMG$K_HARDCOPY
      data SMG$K_HARDCOPY / z'00000005' /
      INTEGER SMG$K_VTTERMTABLE
      data SMG$K_VTTERMTABLE / z'00000006' /
      INTEGER SMG$K_FIRST_PRIV_TYPE
      data SMG$K_FIRST_PRIV_TYPE / z'000000BF' /
C
C 	Define bits, masks, and fields for the control modes.
C
      INTEGER SMG$K_BUF_ENABLED
      data SMG$K_BUF_ENABLED / z'00000000' /
      INTEGER SMG$K_MINUPD
      data SMG$K_MINUPD / z'00000001' /
      INTEGER SMG$K_CLEAR_SCREEN
      data SMG$K_CLEAR_SCREEN / z'00000002' /
      INTEGER SMG$K_NOTABS
      data SMG$K_NOTABS / z'00000003' /
      INTEGER SMG$K_PROTECT
      data SMG$K_PROTECT / z'00000004' /
      INTEGER SMG$K_IGNORE
      data SMG$K_IGNORE / z'00000005' /
      INTEGER SMG$K_RELEASE_PBD
      data SMG$K_RELEASE_PBD / z'00000006' /
      INTEGER SMG$M_BUF_ENABLED
      data SMG$M_BUF_ENABLED / z'00000001' /
      INTEGER SMG$M_MINUPD
      data SMG$M_MINUPD / z'00000002' /
      INTEGER SMG$M_CLEAR_SCREEN
      data SMG$M_CLEAR_SCREEN / z'00000004' /
      INTEGER SMG$M_NOTABS
      data SMG$M_NOTABS / z'00000008' /
      INTEGER SMG$M_PROTECT
      data SMG$M_PROTECT / z'00000010' /
      INTEGER SMG$M_IGNORE
      data SMG$M_IGNORE / z'00000020' /
      INTEGER SMG$M_RELEASE_PBD
      data SMG$M_RELEASE_PBD / z'00000040' /
      INTEGER SMG$m_spare15
      data SMG$m_spare15 / z'FFFFFF80' /
C
C 	Key definition attributes
C
      INTEGER SMG$M_KEY_NOECHO
      data SMG$M_KEY_NOECHO / z'00000001' /
      INTEGER SMG$M_KEY_TERMINATE
      data SMG$M_KEY_TERMINATE / z'00000002' /
      INTEGER SMG$M_KEY_LOCK
      data SMG$M_KEY_LOCK / z'00000004' /
      INTEGER SMG$M_KEY_PROTECTED
      data SMG$M_KEY_PROTECTED / z'00000008' /
      INTEGER SMG$M_KEY_SETSTATE
      data SMG$M_KEY_SETSTATE / z'00000010' /
      INTEGER SMG$m_spare18
      data SMG$m_spare18 / z'FFFFFFE0' /
C
C         Define bit masks and values for display renditions.
C
      INTEGER SMG$M_BOLD
      data SMG$M_BOLD / z'00000001' /
      INTEGER SMG$M_REVERSE
      data SMG$M_REVERSE / z'00000002' /
      INTEGER SMG$M_BLINK
      data SMG$M_BLINK / z'00000004' /
      INTEGER SMG$M_UNDERLINE
      data SMG$M_UNDERLINE / z'00000008' /
      INTEGER SMG$M_INVISIBLE
      data SMG$M_INVISIBLE / z'00000010' /
      INTEGER SMG$M_USER1
      data SMG$M_USER1 / z'00000100' /
      INTEGER SMG$M_USER2
      data SMG$M_USER2 / z'00000200' /
      INTEGER SMG$M_USER3
      data SMG$M_USER3 / z'00000400' /
      INTEGER SMG$M_USER4
      data SMG$M_USER4 / z'00000800' /
      INTEGER SMG$M_USER5
      data SMG$M_USER5 / z'00001000' /
      INTEGER SMG$M_USER6
      data SMG$M_USER6 / z'00002000' /
      INTEGER SMG$M_USER7
      data SMG$M_USER7 / z'00004000' /
      INTEGER SMG$M_USER8
      data SMG$M_USER8 / z'00008000' /
      INTEGER SMG$m_spare14
      data SMG$m_spare14 / z'FFFF0000' /
      INTEGER SMG$M_NORMAL
      data SMG$M_NORMAL / z'00000000' /
C
C 	The following masks define values to be used
C 	to specify a display attribute.  These may be added
C 	together to specify multiple attributes.
C
      INTEGER SMG$M_BORDER
      data SMG$M_BORDER / z'00000001' /
      INTEGER SMG$M_TRUNC_ICON
      data SMG$M_TRUNC_ICON / z'00000002' /
      INTEGER SMG$M_DISPLAY_CONTROLS
      data SMG$M_DISPLAY_CONTROLS / z'00000004' /
      INTEGER SMG$M_USER_DISPLAY
      data SMG$M_USER_DISPLAY / z'00000008' /
      INTEGER SMG$M_BLOCK_BORDER
      data SMG$M_BLOCK_BORDER / z'00000010' /
      INTEGER SMG$M_PROTECT_DISPLAY
      data SMG$M_PROTECT_DISPLAY / z'00000020' /
      INTEGER SMG$m_spare12
      data SMG$m_spare12 / z'FFFFFFC0' /
C
C 	The following defines bits used with subprocess manipulation.
C
      INTEGER SMG$M_DATA_FOLLOWS
      data SMG$M_DATA_FOLLOWS / z'00000001' /
      INTEGER SMG$M_SEND_EOF
      data SMG$M_SEND_EOF / z'00000002' /
      INTEGER SMG$m_spare11
      data SMG$m_spare11 / z'FFFFFFFC' /
C
C       The following defines bits used with the FLAGS parameter for
C 	SMG$DELETE_PASTEBOARD.
C
      INTEGER SMG$M_ERASE_PBD
      data SMG$M_ERASE_PBD / z'00000001' /
      INTEGER SMG$M_IGNORE_BATCHED
      data SMG$M_IGNORE_BATCHED / z'00000002' /
      INTEGER SMG$m_spare10
      data SMG$m_spare10 / z'FFFFFFFC' /
C
C       The following defines bits used with the FLAGS parameter for
C 	SMG$CREATE_PASTEBOARD.
C
      INTEGER SMG$M_KEEP_CONTENTS
      data SMG$M_KEEP_CONTENTS / z'00000001' /
      INTEGER SMG$M_WORKSTATION
      data SMG$M_WORKSTATION / z'00000002' /
      INTEGER SMG$m_spare9
      data SMG$m_spare9 / z'FFFFFFFC' /
C
C       The following defines bits used with the FLAGS parameter for
C 	SMG$READ_xxxx.
C
      INTEGER SMG$M_FUNC_KEYS
      data SMG$M_FUNC_KEYS / z'00000001' /
      INTEGER SMG$M_NOKEEP
      data SMG$M_NOKEEP / z'00000002' /
      INTEGER SMG$M_NORECALL
      data SMG$M_NORECALL / z'00000004' /
      INTEGER SMG$m_spare8
      data SMG$m_spare8 / z'FFFFFFF8' /
C
C       The following defines bits used with the FLAGS parameter for
C 	SMG$SET_CURSOR_MODE.
C
      INTEGER SMG$M_CURSOR_OFF
      data SMG$M_CURSOR_OFF / z'00000001' /
      INTEGER SMG$M_CURSOR_ON
      data SMG$M_CURSOR_ON / z'00000002' /
      INTEGER SMG$M_SCROLL_JUMP
      data SMG$M_SCROLL_JUMP / z'00000004' /
      INTEGER SMG$M_SCROLL_SMOOTH
      data SMG$M_SCROLL_SMOOTH / z'00000008' /
      INTEGER SMG$m_spare16
      data SMG$m_spare16 / z'FFFFFFF0' /
C
C       The following defines bits used with the FLAGS parameter for
C 	SMG$GET_DISPLAY_ATTR.
C
      INTEGER SMG$M_VIEWPORT
      data SMG$M_VIEWPORT / z'00000001' /
      INTEGER SMG$M_SUBPROCESS
      data SMG$M_SUBPROCESS / z'00000002' /
      INTEGER SMG$M_MENU
      data SMG$M_MENU / z'00000004' /
      INTEGER SMG$m_spare7
      data SMG$m_spare7 / z'FFFFFFF8' /
C
C       The following defines bits used with the FLAGS parameter for
C 	SMG$PUT_CHARS.
C
      INTEGER SMG$M_ERASE_LINE
      data SMG$M_ERASE_LINE / z'00000001' /
      INTEGER SMG$M_ERASE_TO_EOL
      data SMG$M_ERASE_TO_EOL / z'00000002' /
      INTEGER SMG$m_spare6
      data SMG$m_spare6 / z'FFFFFFFC' /
C
C       The following defines bits used with the FLAGS parameter for
C 	SMG$MOVE_TEXT.
C
      INTEGER SMG$M_TEXT_SAVE
      data SMG$M_TEXT_SAVE / z'00000001' /
      INTEGER SMG$M_TEXT_ONLY
      data SMG$M_TEXT_ONLY / z'00000002' /
      INTEGER SMG$m_spare17
      data SMG$m_spare17 / z'FFFFFFFC' /
C
C       The following defines bits used with the FLAGS parameter for
C 	SMG$PUT_PASTEBOARD and SMG$SNAPSHOT.
C
      INTEGER SMG$M_FORM_FEED
      data SMG$M_FORM_FEED / z'00000001' /
      INTEGER SMG$m_spare5
      data SMG$m_spare5 / z'FFFFFFFE' /
C
C      The following defines bits used with the FLAGS parameter for
C 	SMG$PUT_xxxx.
C
      INTEGER SMG$M_WRAP_CHAR
      data SMG$M_WRAP_CHAR / z'00000001' /
      INTEGER SMG$M_WRAP_WORD
      data SMG$M_WRAP_WORD / z'00000002' /
      INTEGER SMG$m_spare4
      data SMG$m_spare4 / z'FFFFFFFC' /
C
C       The following defines bits used with the FLAGS parameter for
C 	SMG$SET_KEYPAD_MODE.
C
      INTEGER SMG$M_KEYPAD_APPLICATION
      data SMG$M_KEYPAD_APPLICATION / z'00000001' /
      INTEGER SMG$M_KEYPAD_NUMERIC
      data SMG$M_KEYPAD_NUMERIC / z'00000002' /
      INTEGER SMG$m_spare3
      data SMG$m_spare3 / z'FFFFFFFC' /
C
C       The following defines bits used with the FLAGS parameter for
C 	SMG$GET_PASTING_INFO.
C
      INTEGER SMG$M_DISPLAY_PASTED
      data SMG$M_DISPLAY_PASTED / z'00000001' /
      INTEGER SMG$m_spare19
      data SMG$m_spare19 / z'FFFFFFFE' /
C
C 	The following defines bits used with menu manipulation.
C
      INTEGER SMG$M_REMOVE_ITEM
      data SMG$M_REMOVE_ITEM / z'00000001' /
      INTEGER SMG$M_FIXED_FORMAT
      data SMG$M_FIXED_FORMAT / z'00000002' /
      INTEGER SMG$M_DOUBLE_SPACE
      data SMG$M_DOUBLE_SPACE / z'00000004' /
      INTEGER SMG$M_RETURN_IMMED
      data SMG$M_RETURN_IMMED / z'00000008' /
      INTEGER SMG$M_ERASE_MENU
      data SMG$M_ERASE_MENU / z'00000010' /
      INTEGER SMG$M_WIDE_MENU
      data SMG$M_WIDE_MENU / z'00000020' /
      INTEGER SMG$m_spare2
      data SMG$m_spare2 / z'FFFFFFC0' /
C
C 	The following are used with SMG$PUT_LINE_xxxx,
C 	SMG$SCROLL_DISPLAY_AREA, and SMG$DRAW_CHAR.
C
      INTEGER SMG$M_UP
      data SMG$M_UP / z'00000001' /
      INTEGER SMG$M_DOWN
      data SMG$M_DOWN / z'00000002' /
      INTEGER SMG$M_RIGHT
      data SMG$M_RIGHT / z'00000004' /
      INTEGER SMG$M_LEFT
      data SMG$M_LEFT / z'00000008' /
      INTEGER SMG$m_spare1
      data SMG$m_spare1 / z'FFFFFFF0' /
C
C  Define data structures
C
      INTEGER SMG$C_BAND_INFORMATION_TABLE
      data SMG$C_BAND_INFORMATION_TABLE / z'0000000C' /
C
      INTEGER SMG$C_PASTEBOARD_INFO_BLOCK
      data SMG$C_PASTEBOARD_INFO_BLOCK / z'00000020' /
C
      INTEGER SMG$C_KEYBOARD_INFO_BLOCK
      data SMG$C_KEYBOARD_INFO_BLOCK / z'00000014' /
C
C  Define the out-of-band information table used when an out-of-band
C  AST routine is called as it's own record.
C
      INTEGER SMG$C_OUT_OF_BAND_TABLE
      data SMG$C_OUT_OF_BAND_TABLE / z'0000000C' /
C
C  Define the subprocess information table used when a subprocess
C  AST routine is called as it's own record.
C
      INTEGER SMG$C_SUBPROCESS_INFO_TABLE
      data SMG$C_SUBPROCESS_INFO_TABLE / z'0000000C' /
C
C  Define an information table that can be used by both
C  SMG$GET_PASTEBOARD_ATTRIBUTES and SMG$GET_KEYBOARD_ATTRIBUTES
C  as it's own record.
C
      INTEGER SMG$C_ATTRIBUTE_INFO_BLOCK
      data SMG$C_ATTRIBUTE_INFO_BLOCK / z'00000020' /

