      FUNCTION LSQ_EVENT()
C----------------------------------------------------------------------
C-
C-   Purpose and Methods : Main routine for LSQ accumulation
C-
C-   Returned value  : True if OK
C-   Inputs  :
C-   Outputs :
C-   Controls:
C-
C-   Updated  21-FEB-1992   Rajendran Raja
C-
C----------------------------------------------------------------------
      IMPLICIT NONE
      LOGICAL FIRST
      DATA FIRST/.TRUE./
      LOGICAL DO_LSQ_ANAL
      INTEGER IER,DMPUNI
      INCLUDE 'D0$INC:DUMP.INC'
      INTEGER LSQ_DUMP_EVENTS
      LOGICAL LSQ_EVENT
      INTEGER INDEX,I,J,NROWS,NCOLS
      DOUBLE PRECISION VAL
      REAL    MAT1(5,5)
      DOUBLE PRECISION MAT2(5,5)
C----------------------------------------------------------------------
      IF(FIRST)THEN                     ! LOCAL INIT
        FIRST = .FALSE.
        CALL EZPICK('LSQ_RCP')
        CALL EZGET('DO_LSQ_ANAL',DO_LSQ_ANAL,IER)
        CALL EZGET('LSQ_DUMP_EVENTS',LSQ_DUMP_EVENTS,IER)
        CALL EZRSET
        DUNIT = 15
      ENDIF
C
      IF(DO_LSQ_ANAL)CALL LSQ_ANAL        ! ANALYZE
C
C
C ****  BOOK SOME MATRICES, FILL THEM, INVERT THEM ETC.
C
      NROWS = 5
      NCOLS = 5
      CALL LSQ_BKMATRIX('MATRIX1',NROWS,NCOLS,IER)
      INDEX = 0
      DO I = 1 , NROWS
        DO J = 1 , NCOLS
          VAL =  0.0
          IF ( I.EQ.J ) THEN
            VAL = I*J
          ENDIF
          CALL LSQ_SET_VAL('MATRIX1',I,J,INDEX,VAL,IER)
        ENDDO
      ENDDO
      MAT1(1,1) = 1.0
      MAT1(1,2) = 0.5
      MAT1(1,3) = 0.25
      MAT1(1,4) = 0.125
      MAT1(1,5) = 0.0625
      MAT1(2,2) = 2.0
      MAT1(2,3) = 2.25
      MAT1(2,4) = 2.125
      MAT1(2,5) = 2.0625
      MAT1(3,3) = 3.0
      MAT1(3,4) = 3.25
      MAT1(3,5) = 3.125
      MAT1(4,4) = 4.0
      MAT1(4,5) = 4.25
      MAT1(5,5) = 5.0
      DO I = 1 , NROWS
        DO J = 1 , I
          MAT1(I,J) = MAT1(J,I)
        ENDDO
      ENDDO
      CALL LSQ_MATRIX_FILL('MATRIX1',MAT1,NROWS,NCOLS,1,IER)
      CALL LSQ_MATRIX_INVERT('MATRIX1','MATRIX1_I',IER)
      CALL LSQ_MATRIX_INVERT_TEST('MATRIX1','MATRIX1_I',1.E-10,IER)
      CALL LSQ_MATRIX_MULTIPLY('MATRIX1_I','MATRIX1','PRODUCT',IER)
C
      CALL LSQ_MATRIX_PRINT(DUNIT,'MATRIX1',7,'(D10.3)',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'MATRIX1_I',7,'(D10.3)',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'PRODUCT',7,'(D10.3)',IER)
      CALL LSQ_MATRIX_COPY('MATRIX1','MATRIX2',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'MATRIX2',7,'(D10.3)',IER)
C
      WRITE(DUNIT,1)
    1 FORMAT(' COLLECTING GARBAGE' )
      CALL LSQ_COLLECT_GARBAGE(IER)
C
      CALL LSQ_MATRIX_PRINT(DUNIT,'MATRIX1',7,'(D10.3)',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'MATRIX1_I',7,'(D10.3)',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'PRODUCT',7,'(D10.3)',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'MATRIX2',7,'(D10.3)',IER)
C
      WRITE(DUNIT,2)
    2 FORMAT(' TESTING LSQ_MATRIX_GET ANDF LSQ_MATRIX_FILL '//)
      CALL LSQ_MATRIX_GET('MATRIX1',MAT1,NROWS,NCOLS,1,IER)
      CALL LSQ_MATRIX_GET('MATRIX1',MAT2,NROWS,NCOLS,2,IER)
      CALL MXPRNT(DUNIT,' PRINT OF MAT1 ',MAT1,NROWS,NCOLS,
     &  NROWS,NCOLS,NCOLS,'(E10.3)')
      CALL MXPRND(DUNIT,' PRINT OF MAT2 ',MAT2,NROWS,NCOLS,
     &  NROWS,NCOLS,NCOLS,'(D10.3)')
      CALL LSQ_MATRIX_FILL('MATRIX_FILL1',MAT1,NROWS,NCOLS,1,IER)
      CALL LSQ_MATRIX_FILL('MATRIX_FILL2',MAT2,NROWS,NCOLS,2,IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'MATRIX_FILL1',NCOLS,'(E10.3)',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'MATRIX_FILL2',NCOLS,'(D10.3)',IER)
C
      WRITE(DUNIT,3)
    3 FORMAT(' TESTING DIAGONALIZATION ')
      CALL LSQ_MATRIX_FILL('MATRIX_FILL1',MAT1,NROWS,NCOLS,1,IER)
      CALL LSQ_MATRIX_DIAG('MATRIX_FILL1','UMAT1','EIGEN1',IER)
      CALL LSQ_MATRIX_TRANSPOSE('UMAT1','UMAT1_T',IER)
      CALL LSQ_MATRIX_MULTIPLY('MATRIX_FILL1','UMAT1','PROD1',IER)
      CALL LSQ_MATRIX_MULTIPLY('UMAT1_T','PROD1','PROD2',IER)
C
      CALL LSQ_MATRIX_PRINT(DUNIT,'MATRIX_FILL1',NCOLS,'(D10.3)',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'UMAT1',NCOLS,'(D10.3)',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'EIGEN1',1,'(D10.3)',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'UMAT1_T',NCOLS,'(D10.3)',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'PROD1',NCOLS,'(D10.3)',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'PROD2',NCOLS,'(D10.3)',IER)
C
      WRITE(DUNIT,5)
    5 FORMAT(' TESTING UMAT U ORTHOGONALITY ')
      CALL LSQ_MATRIX_MULTIPLY('UMAT1','UMAT1_T','PROD3',IER)
      CALL LSQ_MATRIX_MULTIPLY('UMAT1_T','UMAT1','PROD4',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'PROD3',NCOLS,'(D10.3)',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'PROD4',NCOLS,'(D10.3)',IER)
C
      WRITE(DUNIT,6)
    6 FORMAT(' TESTING TRANSPOSE IN SITU ')
      CALL LSQ_MATRIX_TRANSPOSE('MATRIX1','MATRIX1',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'MATRIX1',NCOLS,'(D10.3)',IER)
C
      WRITE(DUNIT,7)
    7 FORMAT(' TESTING MATRIX ADD')
      CALL LSQ_MATRIX_ADD('MATRIX1','MATRIX1_I','MATRIX_ADD',
     &  1.0D0,1.0D0,IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'MATRIX_ADD',NCOLS,'(D10.3)',IER)

      INDEX = 0 !GET IT FIRST
      CALL LSQ_MATRIX_ADD_ELEMENT('MATRIX1',INDEX,1,1,1.0D0,-1.0D0,
     &  7.5D0,'MATRIX1_ELE',IER)
      CALL LSQ_MATRIX_PRINT(DUNIT,'MATRIX1_ELE',NCOLS,'(D10.3)',IER)
C
C      CALL LSQ_RZ_SAVE(' ','MATRICES','ALL',IER)
C      CALL LSQ_RZ_GET(' ','MATRICES','ALL',IER)
C
      LSQ_EVENT = .TRUE.
  999 RETURN
      END
