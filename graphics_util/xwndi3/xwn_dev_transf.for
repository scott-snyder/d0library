      SUBROUTINE DEV_TRANSF(X,Y,Z,XOUT,YOUT)
C  Apply the full transformation matrix to convert from world to
C  screen or page coordinates.
      INCLUDE 'D0$GRAPHICS_UTIL$XWNDI3:XWNEMU.INC'
      COMMON/CHECKT/T(4,4)
C      REAL T(4,4)
C      EQUIVALENCE (T,TTOTAL)
C      type *,' in DEV_TRANSF, TTOTAL:',ttotal
C      XP=X*T(1,1)+Y*T(1,2)+Z*T(1,3)+T(1,4)
C      YP=X*T(2,1)+Y*T(2,2)+Z*T(2,3)+T(2,4)
C  DO MODELLING TRANSFORMATION IF CALLED FOR
      IF(IMODEL.EQ.0) THEN
        XP=X
        YP=Y
        ZP=Z
      ELSE
C!!!!ORDER???
        XP=X*MMODEL(1,1)+Y*MMODEL(2,1)+Z*MMODEL(3,1)+MMODEL(4,1)
        YP=X*MMODEL(1,2)+Y*MMODEL(2,2)+Z*MMODEL(3,2)+MMODEL(4,2)
        ZP=X*MMODEL(1,3)+Y*MMODEL(2,3)+Z*MMODEL(3,3)+MMODEL(4,3)
      ENDIF
C  TRANSLATE TO ORIGIN OF UVN SYSTEM
      XTR=XP-XVW
      YTR=YP-YVW
      ZTR=ZP-ZVW
C  ROTATE TO UVN AXES
      XP=XTR*UVECX+YTR*UVECY+ZTR*UVECZ
      YP=XTR*VVECX+YTR*VVECY+ZTR*VVECZ
      ZP=XTR*VNORMX+YTR*VNORMY+ZTR*VNORMZ
      IF(IPROJ.EQ.3) THEN
C  THIS IS A PERSPECTIVE TRANSFORMATION.
        SFACTR=VDIST/(VDIST+ZP)
        XP=SFACTR*XP
        YP=SFACTR*YP
C  (OBLIQUE TRANSFORMATIONS NOT IMPLEMENTED YET)
      ENDIF
C  TRANSFORM TO VIEWPORT COORDINATES
C      XP=(XP-UMIN)*XSCALE+VXMIN
C      YP=(YP-VMIN)*YSCALE+VYMIN
C  Transformation will be XDEV = (X-UMINH)*XSCAL+DXOFF, etc., in
C  DEVICE
      XOUT=(XP-UMINH)*XSCAL+DXOFF
      YOUT=(YP-VMINH)*YSCAL+DYOFF
      END
