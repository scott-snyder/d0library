.ap
.p 2 1 2
.style headers 4,0,6,4,7,2,1,7,4
.layout 1,3
.no headers
.flags bold
#
.b 2
.rm 75
.lm 9
.c
^*COMPACK Version 3.3 Release Notes.\*
.b 2
.c
J. S. Hoftun
.c
Brown University
.flags substitute
.c ;27 March 1987
.noflags substitute
.noflags accept
.hl ^*Introduction\*
 Described in this note are the changes to COMPACK as implemented in version 3.3
There are NO changes to calling sequences at the application level, and this
release is fully compatible with the previous release (V3.2). This version is
released very soon after V3.2 because major problems were found in the way it 
worked in line mode. The test for uniqueness of operational commands backfired 
and did not allow user commands to be entered, and the number as substitute 
for command did not work. This is now fixed together with some small upgrades 
and fixes to features.
.hl ^*New parameter type \in GETPAR.\*
 In order to be able to ask for the whole (or the rest) of a typed command 
line as a character string, it was neccessary to add a type to GETPAR, 'A'.
It works just like 'C' when prompted for, but if the whole command line is 
typed at the command prompt, it will concactenate all the parts again into ONE 
character string. This is useful if the programmer for some (strange) reason 
wants to parse the command line himself.
.hl ^*New feature \for going directly \to sublevels.\*
 A feature to be used by real experts if they know the menu-tree layout well, 
has been implemented. It uses the ';' character as a delimiter between a
command which takes one to a new level and the command one wants to execute 
at that level. The commands may be nested with several ';' to go to the third 
fourth etc. sublevel. If the last command results in a completed command, the 
system will go back to the level it started from, otherwise it will stay at 
the lower level. This makes for a quick way to get to the third or fourth 
level without having to wait for the prompt at the intermediate levels.
.hl ^*Using sublevels \from interrupt menus.\*
 It is now possible to have submenus in an interrupt menu. The main task will 
stay paused as long as the sublevel menu is active. It actually turns off the 
interrupt mode while at the sublevel. This means that everything works just
like in normal mode. As soon as it returns to the original level and exits
from the AST routine, it will go back into interrupt mode. Because of this,
one should be careful about calling CANMEN from the interrupt level, interrupt
level may be turned back on again automatically. This has not been tested yet.
