.ap
.p 2 1 2
.style headers 4,0,6,4,7,2,1,7,4
.layout 1,3
.no headers
.flags bold
#
.b 2
.rm 71
.lm 0
.c
^*COMPACK Version 2.0 Update.\*
.b 2
.c
J. S. Hoftun
.c
Brown University
.flags substitute
.c ;4 December 1986
.noflags substitute
.noflags accept
.hl ^*Introduction\*
 Described in this note is the changes to COMPACK as implemented in version 
2.0, recently released from the central D0LIBRARY. There are a few changes to 
calling sequences, in particular to MENUDO, and the versions are therefore NOT 
backwards compatible. It should be realtively straight-forward to convert an 
existing program, using version 1.0 (1.2) to use version 2.0.
.hl ^*Changed calling sequences\*
.hl+1 MENUDO
 Purpose: Starting menu dialog on a new menu level.
 Calling sequence:###CALL MENUDO(TOPS,USENAM,DISPAT,COMOUT)
.b
.lm 25
.i -23;Argument(s):##TOPS:####Character string containing the title line for
the main menu.
.i -9;USENAM:##Character string corresponding to one of the 
names used in a call to MENSET.
.i -9;DISPAT:##Name of dispatching routine for this menu-level.
.i -9;COMOUT:##Character variable for returning command string.
.lm 0
 Notes:##See note below about dispatching routines.
.lm 10
COMOUT is set to 'BLANK' on entry, changed to the unique command 
identifer from the setup file if it does NOT have a 'CALL' in it, or to 'EXIT'  
if exit was given as the command.
.lm 0
.hl GETPAR
 The call itself is identical to the one in Version 1, but a feature to be
able to call GETPAR more than once within the same command is added. This is
accomplished by using a NEGATIVE argument count (first argument in the call to
GETPAR) for the second and later calls. The internal counter is then not
reset, and a complete command typed in line mode will be parsed correctly. 
.lm 0
.hl-1 ^*New routines\*
.hl+1 CANMEN
 Purpose: Cancel an interrupt mode menu setup.
 Calling sequence:###CALL CANMEN
 Notes:##Must be called when the task issuing the INTMEN call 
.lm 10
finishes.
.lm 0
.hl EXIMEN
 Purpose: Exit from program with screen restored to "normal".
 Calling sequence:###CALL EXIMEN(STATUS,LEVEL)
.b
.lm 25
.i -23;Argument(s):##STATUS:##An integer VAX status message.
.i -9;LEVEL:###Integer to indicate which menu level the call was issued from.
.lm 0
 Notes:##STATUS=1 indicates normal exit. 
.lm 10
Use LEVEL=1 to indicate the top level menu.
.lm 0
.hl INTMEN
 Purpose: Set up a menu for interrupt mode menu interactions.
 Calling sequence:###CALL INTMEN(TOPS,USENAM,DISPAT)
.b
.lm 25
.i -23;Argument(s):##TOPS:####Character string containing the title line for
the main menu.
.i -9;USENAM:##Character string corresponding to one of the 
names used in a call to MENSET.
.i -9;DISPAT:##Name of dispatching routine for this menu-level.
.lm 0
 Notes:##See note below about dispatching routines.
.b
.lm 10
A QIO is issued for the terminal and control is returned to the calling 
routine. When anything is entered on the keyboard, the main task is 
interrupted, the action indicated by the key(s) are taken, a new QIO is 
issued, and the main task is started up again.
.lm 0
.hl MSGSCR
 Purpose: Interpret a VAX status message and output it to the screen.
 Calling sequence:###CALL MSGSCR(STATUS,STRING)
.b
.lm 25
.i -23;Argument(s):##STATUS:##Integer VAX status message.
.i -9;STRING:##Character string containing a SHORT message to be 
written to the screen in front of the actual VAX message.
.lm 0
 Notes:##STATUS is normally returned from a VAX System Service or 
.lm 10
Run Time Library function call. It is also in the IOSB argument to the QIO
system service. 
.lm 0
.hl OUTMSG
 Purpose: Output messages to the screen in an orderly fashion.
 Calling sequence:###CALL OUTMSG(STRING)
.b
.lm 25
.i -23;Argument(s):##STRING:##Character string containing the message to be 
written to the screen.
.lm 0
 Notes:##The first character in STRING is used for carriage control.
.lm 10
In full screen mode the display will stay on lines 4-20 and scroll if more 
than 16 lines are used within one command level (screen erased when going back 
to menu). A screen may be cleared by using '1' as the first character in 
STRING. A '$' works correctly as used in connection with a prompt, but not 
always like a FORTRAN write.
.lm 0
.lm 0
.hl PFLABL
 Purpose: Output labels for the 4 PF keys on bottom of screen.
 Calling sequence:###CALL PFLABL(PFL1,PFL2,PFL3,PFL4)
.b
.lm 25
.i -23;Argument(s):##PFL1-4:##Character strings containing the labels for each 
of the four PF keys.
.lm 0
 Notes:##The labels are output on the bottom line of the screen.
.lm 10
Use this routine in connection with READPF if you want a special use of the 
PF keys.
.lm 0
.hl PFNUM
 Purpose: Access the variable PF without including the common blocks.
 Declaration: ##INTEGER PFNUM
 Calling sequence:###I=PFNUM()
 Return value:###The current value of PF.
 Notes:##Should be used after a call to GETPAR to see if a PF key 
.lm 10
was struck while a list of parameters were being prompted for. Actions should 
NOT be taken if PF.NE.0 since not all parameters will be available then.
.lm 0
.hl SETMOD
 Purpose: Access the variable SETUP without including the common blocks.
 Declaration: ##LOGICAL SETMOD
 Calling sequence:###L=SETMOD()
 Return value:###The current value of SETUP.
 Notes:##Should be used after a call to GETPAR to see if in the
.lm 10
program is setting up a command file. Actions should normally NOT be taken 
when in this mode. The entered parameters have already been written to the 
command file.
.b
See PFNUM as well.
.lm 0
.hl-1 ^*How to Use DISPAT Routines\*
 Each menu level now has its own DISPAT routine. The name must be declared 
EXTERNAL in the routine calling MENUDO for that level and included in the 
actual call to MENUDO. The different DISPAT routines must therefore have
different names to make them unique. The DISPAT routines no longer have direct 
access to PF and other variables in the common blocks, and all commands are
expected to be terminated with a PF key in full screen mode. A message is 
typed on the screen telling the operator when a PF key is expected. This may 
change if it is desirable to be able to tell the system to go back to the menu 
without a PF key being hit first. 
 To indicate whether a command should go through a DISPAT routine or 
the identifier should be returned to the caller, the specifier in the menu 
setup file is used. If it has a 'CALL' in it, the DISPAT routine will be 
called.
 In order to make the use of some "system" like commands as uniform as 
possible, and to avoid having to include those commands explicitely in every 
DISPAT routine, a routine SYSDSP is included in the system. It may be used as 
the "last resort" in your own DISPAT when none of the commands matches the 
current one, or if only system commands are desired, as the DISPAT routine in 
your call to MENUDO. If it is called from a DISPAt routine, it must be called 
with the same argument as originally passed to the DISPAT routine. See TYPDSP 
at the end of this note for an example. Notice that if any of the system calls 
are desired, they must still be include in the Menu Setup file for that menu 
level. This allows the programmer to select which of the commands in the 
SYSDSP routine will be supported in his/her program. 
.test page 15
 The current system commands are:
.list
.le;Menu Control#############(for controlling menu parameters)
.le;Run Command File
.le;Setup Command File
.le;Add Menu Item############(for adding VMS commands to the menu)
.le;Executing any added VMS command
.end list
.hl ^*General Comments\*
 When setting up command files, the file name is tied to the menu level which 
started the setup, and one cannot get to a higher level while still in setup 
mode. But it now works correctly going down a menu tree, the EXIT from each 
level is written to the command file and read in when the command file is 
being used for input.
 Also notice the description of a setup file in the Programmers Guide, this 
allows a general use of assignments to menu files and the use of the program 
as a foreign command in VMS. It is possible to start the program with a 
startup command file and to execute only one command directly and never see 
the command prompt when this symbol definition is made.
.page
.hl ^*Examples\*
.literal



      SUBROUTINE TYPDSP(COMIN)
      IMPLICIT NONE
      CHARACTER*(*) COMIN
      EXTERNAL MENDSP      
C
C-------------------------------------------------------------------------
C     Dispatching routine for menu system.
C
C  Argument:
C
C     COMIN  : Character variable with the command matched from the list 
C              of available commands.
C
C  Method of operation:
C
C       This routine has a long list of IF-ELSEIF-ELSE statements for 
C       matching COMIN to the commands it knows about. It then performs 
C       the work or calls a separate subroutine to actually do the work 
C       for a given command.
C---------------------------------------------------------------------------
C    
C     Start the search for predefined commands
C
      IF(INDEX(COMIN,'CALL TYPGET').GT.0) THEN
	 CALL TYPGET
      ELSEIF(INDEX(COMIN,'CALL TYPGO').GT.0) THEN
         CALL TYPGO
      ELSE
C
C     Not one of the predefined SPECIFIC commands, try to call the 
C     system dispatch routine.
C
	 CALL SYSDSP(COMIN)
      ENDIF
      RETURN
      END

.end literal
