                                                                J. Linnemann
                                                                19 Nov 1993

                            Event Summary

0. News: Now QUAL bits are OR'd for any instances within spatial resolution.

1. Overview

    The Event SUMmary is a linear chain of ESUM banks hanging from a new header
HSUM under the event header HEAD, which gives an overall rough summary of the
objects found in an event at various levels of processing: TRIGger, FILTer,
RECOnstructin, and ISAE (Isajet).  It is NOT intended for doing final physics
analysis, but IS intended to provide a convenient way of classifying events (and
steering them into reconstruction streams), comparing various levels of
analysis, calculating rates as a function of threshold, and writing packages for
verifying performance of the subsystems.  In the case of level 2 filters, and
perhaps Reconstruction event selection, it provides a convenient starting point
for doing cuts on topology (opening angles; masses) of objects found by lower
level tools.  In addition, it should be feasible to have a small "summary"
record consisting of ONLY of HEAD, HSUM, and the ESUM banks, on which event
selection can be done rapidly.

    ESUM provides a rough summary of what objects were found.  As each new
object is found, it is classified by object type, and stored in the ESUM bank.
If there is an existing object of the same type at the same location ( within
the resolution size defined in ESUM_INIT by ESUM.PARAMS) then the value saved
for pt will be the LARGER of the existing and new one. This is to allow for
refinding of the same object with different cuts.  An ambiguous object such as
an EM cluster over an escape Et should be stored both as an electron and a
photon object.

    The ID codes for the objects stored in the ESUM bank are kept in
        D0$PARAMS:ESUM.PARAMS
    These codes should be used to call both ESUMFL and GTESUM_xxx.
    The currently defined codes are

ID_ALL, ID_VERTEX, ID_PHOTON, ID_ELECTRON, ID_MUON, ID_TAU, ID_JET,
    ID_ETMISS, ID_ETSUM
    More codes could be added.

    This bank is a generalization of the design of a summary bank for level 2.
Rich Astur wrote the first draft of the code for the level 2 bank handling.

2. Filling:
    FILT    done by calls to ESUMFL from the level 2 tools
    TRGR    (L1ESUMFL package: A. Boehnlein)
    RECO    (RECO_ESUM package: S. Protopopescu)
    ISAE    (part of ISAZEB: S. Protopopescu)

3. Related packages:

a) Rates    For a selectable bank type or types, make rate vs threshold curves
            for each object type, and for N=1,2,3,4 of those objects above a
            threshold   (A. Boehnlein)  Useful for MC and real data rate curves.
            We with one package do rates at various levels of analysis.

b) Examine  Some standard histograms, selectable via RCP:
            number of objects vs ID, pt spectra, eta and phi 1d, perhaps 2d,
            above some threshold    (A. Boehnlein)

c) Efficiency/Rejection
            For some bank type as base (presumably ISAE or RECO), report
            efficiency for another bank type at finding the objects, within some
            angular cut (not eta-phi cone).  Also report rejection, the number
            of events with candidates at a lower level vs the number at a higher
            level.  By object type.  Efficiency on a per-object basis; rejection
            on per event  basis     (ESUM_COMPARE, ESUM_MATCH by MVS. Rao)

4. Usage example
    The GTESUM and GTESUM_COUNTS routines are the easiest way to use the ESUM
bank. A simple example of code using the GTESUM routine to get all the electron
candidates from level 2, and the 2 highest electron candidates from Isajet,
is given below:

C----------------------------------------------------------------------
      IMPLICIT NONE
      INCLUDE 'D0$PARAMS:ESUM.PARAMS'
      INTEGER NFOUND( ID_ALL:LAST_TYPE ), QBITS ,IER
      REAL ET, ETA_PHYS,ETA_DET , PHI
      INTEGER I
      INTEGER NWANT
      PARAMETER( NWANT = 40)    !be generous
      INTEGER IORDER(NWANT),WORK(NWANT)
      REAL ET1,ET2
      CHARACTER*80 MSG
C----------------------------------------------------------------------
      CALL GTESUM_COUNTS('FILT',NFOUND,IER)
      IF (IER.NE.0) THEN
C...this should only happen if there was no bank
        WRITE(MSG,'(A,I)')'IER From GTESUM_COUNTS (FILT) = ',IER
        CALL ERRMSG('GTESUM_IER','MYSUB',MSG,'W')
      ENDIF
      CALL HFILL(1,FLOAT(NFOUND(ID_ELECTRON)),0.,1.)    ! # electrons
      DO I = 1,NFOUND(ID_ELECTRON)
          CALL GTESUM('FILT',ID_ELECTRON,I,ET,ETA_PHYS,ETA_DET,PHI,QBITS,IER)
          IF (IER.NE.0) THEN
C...this should only happen if you asked for more than was claimed
            WRITE(MSG,'(A,I)')'IER From GTESUM = ',IER
            CALL ERRMSG('GTESUM_IER','MYSUB',MSG,'W')
          ENDIF
          CALL HFILL(2,ET,0.,1.)   !Et spectrum
          CALL HFILL(3,ETA_PHYS,0.,1.)  !Eta distribution
      ENDDO
C...now get the 2 highest from the ISAE version
      CALL GTESUM_COUNTS('ISAE',NFOUND,IER)
      IF (IER.NE.0) THEN
C...this should only happen if there was no bank
        WRITE(MSG,'(A,I)')'IER From GTESUM_COUNTS (ISAE) = ',IER
        CALL ERRMSG('GTESUM_IER','MYSUB',MSG,'W')
      ENDIF
      CALL GTESUM_SORT('ISAE',ID_ELECTRON,NWANT,IORDER,WORK,IER)
      IF (IER.NE.0) THEN
C...this should only happen if you didn't have enough space reserved (NWANT)
        WRITE(MSG,'(A,I)')'IER From GTESUM_SORT (ISAE) = ',IER
        CALL ERRMSG('GTESUM_IER','MYSUB',MSG,'W')
      ENDIF
      ET1 = 0
      ET2 = 0
      IF (NFOUND(ID_ELECTRON).GE.1) THEN
        CALL GTESUM('ISAE',ID_ELECTRON,IORDER(1),ET1,ETA_PHYS,ETA_DET,PHI,
      &         QBITS,IER)
        IF (NFOUND(ID_ELECTRON).GE.2) THEN
         CALL GTESUM('ISAE',ID_ELECTRON,IORDER(2),ET2,ETA_PHYS,ETA_DET,PHI,
      &          QBITS,IER)
        ENDIF
      ENDIF

    If you want the ASCII text corresponding to the ESUM type codes, for example
to build histogram titles with, call the routine ESUM_INIT; see PRESUM for an
example of using the labels.

    In this bank, all objects have been forced into the same format.  This
includes the VERTEX object, which is treated specially:

    IF you call GTESUM with ID_VERTEX,

            Xvertex = ETA_PHYS
            Yvertex = ETA_DET
            Zvertex = PHI

5. Bank specifications: See D0$ZEB$EVENT_HEAD:ESUM.ZEB and HSUM.ZEB

6. ESUM.PARAMS See D0$PARAMS: ESUM.PARAMS for the current setups.

    DO NOT HARDCODE the object codes: use the symbolic names instead

7. Routine Specifications
GTESUM_MATCH   look for matches among objects of given types in two banks
GTESUM_COUNTS, get counts of all object types
GTESUM  extract info from ESUM for one object
GTESUM_SORT, get ET ordering of objects of a given type
PRESUM  print ESUM
BKESUM  book ESUM; extend it if necessary.  For 'FILT', keep link in link area
GZESUM  find ESUM of a given bank type
ESUMFL  add to ESUM one object of a given type
ESUM_INIT   return arrays of resolution, threshold and ascii names by object
                type
ESUM_PUSH  squash ESUM banks down to its minimal size before writing;
                        called by frame before writing out the banks

CALL GTESUM_COUNTS(BANK_TYPE,NFOUND,IER)
    BANK_TYPE is 'TRIG', 'FILT', 'RECO', or 'ISAE'
    NFOUND is an array dimensioned (ID_ALL:LAST_TYPE) (parameters available
        from ESUM.PARAMS containing the number of objects found by type; the
        total number of objects is found by NFOUND(ID_ALL)
    IER = -1    bank of given type not found

CALL GTESUM_SORT(BANK_TYPE,OBJECT_ID,NWANT,IORDER,WORK,IER)
    BANK_TYPE as above
    OBJECT_ID is one of the defined IDs for objects from ESUM.PARAMS
    NWANT is the maximum number of objects the user is prepared to accept
    IORDER is an array giving the indices of the object requested, in descending
        order of ET .  Intended for use in calling GTESUM
    WORK   is a working array for the sort
        IORDER and WORK must be dimensioned >= NWANT
    IER = -1    bank not found
    IER = -2    no objects of this type found
    IER = -3    more than NWANT objects found; the first NWANT objects were
        sorted, but they are not guaranteed to include the highest ET object

CALL GTESUM(BANK_TYPE,OBJECT_ID,INDEX,ET,ETA_PHYS,ETA_DET,PHI,QBITS,IER)
    BANK_TYPE, OBJECT_ID as above
    INDEX   a number in the range [1,NFOUND(object_id)] specifying which object
        to extract
    ET,ETA_PHYS,ETA_DET,PHI,QBITS stored information on object
        ETA_PHYS is the eta of the object, using knowledge of the vertex point
        ETA_DET is the eta of the object in detector coordinates (wrt Zvtx = 0)
    (x,  y,  z, undefined, QBITS if object_id is ID_VERTEX)
    IER = -1 bank not found
    IER = -2 no object of this type with this ID found
CALL GTESUM_MATCH(REF,DTA,ID,CSP,NMX,MRF,MDT,NMC,MATCH,IER)
   Note: more than one from one bank may match one object in the other
Inputs:
    REF   [C*4]   ESUM bank from which objects are to be matched
                    (REF bank is the one where the best-quality
                    objects are expected to be found, eg ISAE or RECO)
    DTA   [C*4]   ESUM bank from which objects are to be matched
    ID(2) [I]     ID of objects to match:
                              ID(1) - object type from REF bank
                              ID(2) - object type from DTA bank
    CSP   [R] Cosine of angle within which objects are considered matched
    NMX   [I]     Maximum # of objects to match
Outputs :
    MRF(NMX) [L] Status of REF objects --- .TRUE., if matched .FALSE. otherwise
    MDT(NMX) [L] Status of DTA objects --- .TRUE., if matched .FALSE. otherwise
    NMC   [I]     Total # of matches found
   MATCH(NMX*NMX,2) [I]     Matrix with serial #s of matched objects
                              MATCH(I,1) -   Serial # of object from REF
                              MATCH(I,2) -   Serial # of object from DTA
call GTESUM(REF,ID(1),MATCH(I,1),...) finds the matched object from the REF bank
    IER   [I]     Error code:
                               0 --- OK
                              -1 --- No ESUM bank of DTA type
                              -2 --- No ESUM bank of REF type
                              -3 --- # of objects in DTA > NMX
                              -4 --- # of objects in REF > NMX
                              -5 --- No objects of type requested in DTA
                              -6 --- No objects of type requested in REF
                              -7 --- Can't ask for matching all objects
                              -8 --- Vertices and ETSUM are not included

FILLING OF BANKS:

    The calling sequence for ESUMFL is

CALL ESUMFL(BANK_TYPE, OBJECT_ID, PT, ETA_PHYS, ETA_DET, PHI, QUAL_BITS )

    where
    BANK_TYPE, ID as above
    Pt (or Et) should be in GeV
    Phi in [0,2pi].
    QUAL_BITS is a 32 bit word whose detailed meaning is up to the caller
        The idea is to have bits on if a particular cut has been passed.
    Further, if ESUMFL is called several times for other instances of the object
    within the 2-object spatial resolution, regardless of Et, the QUAL_BITS 
    are OR'd.  

    If there is an existing object of the same type at the same location
(within the resolution size defined in ESUM_INIT by ESUM.PARAMS) then the value
saved for pt will be the LARGER of the existing and new one. This is to allow
for refinding of the same object with different cuts.  The object is only stored
(especially important for ISAJET and RECO) if it is above the threshold for that
object type.  An ambiguous object such as an EM cluster over an escape Et should
be stored both as an electron and a photon object.  A threshold is applied for
storage; the thresholds are set in ESUM.PARAMS

This is designed for filling one object at a time, as they are found, (as is
especially appropriate for level 2 use).

CALL BKESUM(BANK_TYPE, NOBJS, LESUM)
    where
    NOBJS   is the number of objects to book, or, extend the bank by
    LESUM   is the link returned
            = 0 if failed for any reason
    If a bank of the given type is already booked, it is extended by NOBJS.
    This is mainly called by ESUMFL.
    If the HSUM header is not found, it calls the booking routine.

CALL ESUM_INIT(RESOL,THRESH,NAME)
    RESOL is the two-object resolution in eta or phi
    THRESH is the threshold of the object for inclusion in the summary, in GeV
    NAME   is the CHARACTER*10 name of the object
        ALL three arguments are arrays supplied by the caller, dimensioned
        xxxx(ID_ALL:LAST_TYPE)
    (called by printing routine, and ESUMFL)

GZESUM(BANK_TYPE)
    gets the link to the bank of the given type

CALL PRESUM has the standard arguments; in particular it can print the whole set
    of summaries for the different types


