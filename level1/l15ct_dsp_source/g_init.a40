******************************************************************************
*                                                                            *
*   File  G_Init.A40                                    Rev.  17-FEB-1994    *
*                                                                            *
*  "Meaningful" Register Usage                                               *
*  ---------------------------                                               *
*  AR4: Base Address of Peripheral Bus                      Output           *
*  DP:  Base Address of Global SRAM                         Output           *
*                                                                            *
*  "Destroyable" Register Usage                                              *
*  ----------------------------                                              *
*  R11, AR7                                                                  *
*                                                                            *
*  Description of Module                                                     *
*  =====================                                                     *
*                                                                            *
*  This is the first code to execute in the Global DSP Program. This         *
*  routine is loaded at the bottom of the Local SRAM on the Hydra-II card    *
*  i.e.  4000 0000h.  This routine performs general purpose initialization.  *
*                                                                            *
*  Note that these initialization tasks are not speed-critical.  Hence the   *
*  initialization code is not written "tightly" to be optimized for          *
*  execution speed, but instead is written to be clearly understandable.     *
*                                                                            *
*  For example, the initialization routines do not use delayed branches,     *
*  and make use of the CALL construct to allow the routines to be            *
*  easily modular.                                                           *
*                                                                            *
*  When the initialization is finished, this module makes a BRANCH to        *
*  the "cyclic" portion of the Global DSP Program (which begins at the       *
*  Scan Routine Initialization entry point).  That point marks the           *
*  transition from non-speed-critical to speed-critical code.                *
*                                                                            *
*  This routine has the following steps:                                     *
*                                                                            *
*  1.  Initialize the C40 Status Register.                                   *
*  2.  Initialize the C40 Data Page Pointer Register.                        *
*  3.  Initialize a pointer to the On-Chip Peripherals                       *
*  4.  Initialize a pointer to the Dual Port Memory                          *
*  5.  Initialize the C40 Stack Pointer Register.                            *
*  6.  Initialize the C40 Trap Vector Table Pointer                          *
*  7.  Initialize the C40 Interrupt Vector Table Pointer                     *
*  8.  Initialize the C40 Global Memory Interface Control Register           *
*      (Note:  C40 Local Memory Interface Control Register is initialized    *
*              in the Node Specific Initialization module)                   *
*  9.  Initialize the IIOF2 Interrupt Service Routine                        *
* 10.  Initialize the NMI Interrupt Service Routine                          *
* 11.  Send a "DSP Code Loaded and Started, Waiting for Parameters" status   *
*      code to the TCC                                                       *
* 12.  Wait in a "dead loop" for the TCC to issue an NMI.  When the TCC      *
*      issues the NMI, the C40 will execute the NMI ISR, which will          *
*      perform the Node-Specific Initialization, receive and check the       *
*      Parameters, perform Tool Initialization, and branch to the            *
*      beginning of the Scan Routine                                         *
*                                                                            *
******************************************************************************
                                                                              
******************************************************************************
*         Include the Hydra and C40 Related Constant Definitions             *
******************************************************************************

         .include   "hydra.inc"

******************************************************************************
*         Include the       DSP Program-Specific Constant Definitions        *
******************************************************************************

         .include   "constant.inc"

******************************************************************************
*         Load Code into the  .text  Section                                 *
******************************************************************************

         .text

Global_Start:                                       ; First setup the Data
                                                    ; Page Pointer to point
         LDP   Base_of_Glb_SRAM,DP                  ; to the 64k block where
                                                    ; the  .data  sections
                                                    ; will be stored at
                                                    ; the base of Global SRAM
                                                    ; i.e.  0C000 0000h.

                                           ; Now load the Interrupt Vector
                                           ; Table Pointer and the Trap Vector
                                           ; Table Pointer C40 Expansion
                                           ; Registers.

         LDI   @C40_IV_Table_Handle,R11    ; Use register R11 to Load the IVTP.
         LDPE  R11,IVTP

         LDI   @C40_TV_Table_Handle,R11    ; Use register R11 to Load the TVTP.
         LDPE  R11,TVTP



         LDI   @C40_Stack_Handle,SP        ; Load the Stack Pointer Register
                                           ; with the initial Base Address
                                           ; of the Stack space.      


******************************************************************************
*                                                                            *
*    The C40 Status Register has the following arrangement:                  *
*                                                                            *
*                                                                            *
*    Bits:             31:17        16                                       *
*    Function:      Reservered   Analysis                                    *
*                                  Idle                                      *
*                                                                            *
*                                                                            *
*    Bits:         15     14     13    12       11    10     9     8         *
*                 ------------------------     ----------------------        *
*    Function:     Set   PGIE   GIE    CC       CE    CF    PCF   RM         *
*                 Cond                                                       *
*                                                                            *
*                                                                            *
*                                                                            *
*    Bits:          7      6      5     4        3    2    1    0            *
*                 ------------------------      ------------------           *
*    Function:     OVM    LUF    LV    UF        N    Z    V    C            *
*                                                                            *
******************************************************************************

        LDI   @Zero_Loc,IIF                 ; Define all IIOF pins as
                                            ; inputs, clear all internal
                                            ; interrupts

        LDI   3800h,ST                     ; Clear and Enable the Instruction
                                           ; Cache,  disable the OVM, enable
                                           ; interrupts

        LDI   @Internal_Peripheral_Handle,AR4        ; Load the Auxiliary Reg 4
                                                     ; with the base address of
                                                     ; the on-chip peripherals

        LDI   @Global_Mem_Ctrl_Reg_Value_Loc,R11     ; Load the Global Memory
        STI   R11,*+AR4(Disp_to_Global_MICR)         ; Control Register.


        LDI     @Error_Handler_ISR_Loc, R11             ; Use AR7 and R11 to
        LDEP    IVTP, AR7                               ; map the Interrupt
        STI     R11, *+AR7(Disp_to_IIOF2_Vector)        ; Service Routine for
                                                        ; the Error Handler to 
                                                        ; the ISR for IIOF2    

        MB1     @Enable_IIOF2_Edge_Loc, IIF             ; Enable IIOF2 as an
                                                        ; edge-triggered      
                                                        ; external interrupt
                                                        ; NOTE THAT THIS
                                                        ; FORCES IIOF3 TO BE A
                                                        ; GENERAL-PURPOSE INPUT
                                                        ; because we are
                                                        ; writing to the IIOF3
                                                        ; control bits of the
                                                        ; IIF also.

        LDI     @Initialize_ISR_Loc, R11                ; Use AR7 and R11 to
        LDEP    IVTP, AR7                               ; map the Interrupt
        STI     R11, *+AR7(Disp_to_NMI_Vector)          ; Service Routine for
                                                        ; Initialization to    
                                                        ; the ISR for NMI      

******************************************************************************
*   Here we set a flag to the TCC indicating that the code has been          *
*   loaded and execution has begun                                           *
*                                                                            *
*   One longword is returned to the TCC:                                     *
*                                                                            *
*      Bits     Description                                                  *
*      -----    -----------                                                  *
*       7:0     Return Code:  0 indicates code loaded and started            *
*      23:8     Reserved                                                     *
*      31:24    Local DSP ID                                                 *
******************************************************************************

        LDA     @GDSP_to_TCC_Status_Handle,AR7          ; Store the address
                                                        ; of the "status to
                                                        ; TCC" (in DP Memory)
                                                        ; in AR7

        LDI     Status_OK, R11                          ; Put the "Status OK"
                                                        ; return code into the
                                                        ; LSByte of R11

        MB3     @GDSP_Node_ID_Loc, R11                  ; Merge the Node ID
                                                        ; of this LDSP into
                                                        ; the MSByte of R11

        STI     R11,*AR7                                ; Put the Return
                                                        ; Status into the
                                                        ; Dual Port Memory

******************************************************************************
*  Now we should just wait in a "dead loop."  The Global DSP must wait for   *
*  the TCC to assert NMI before it can begin initializing and receiving      *
*  parameters (the NMI ISR calls the initialization and parameter checking   *
*  routines)                                                                 *
******************************************************************************
             
Wait_for_Interrupt:

         BR     Wait_for_Interrupt          ; Wait in a "dead loop" for an  
                                            ; interrupt                


******************************************************************************
*  This is the Bulkhead.  This code should never be executed                 *
******************************************************************************

End_Of_G_Init:                          ; These instructions should never be 
                                        ; executed in the "normal" operation
         BR     End_Of_G_Init           ; of the program.  If the program
                                        ; counter becomes corrupted or
         BR     End_Of_G_Init           ; if we have a bug in the program
                                        ; we MAY try to execute these
         BR     End_Of_G_Init           ; instructions.  If we get to these
                                        ; instructions the program will appear
         BR     End_Of_G_Init           ; to halt.  We could also use a
                                        ; TRAP instruction here, and jump to
                                        ; a service routine.

******************************************************************************
*         Load Constants and Working Variables into the  .data.  Section.    *
******************************************************************************

         .data

Base_of_Glb_SRAM:

C40_TV_Table_Loc:                               ; Define the Trap Vector     
                                                ; Table.  All entries        
        .eval   0, x                            ; currently point to         
        .loop                                   ; A default Interrupt        
        .word   Default_ISR                     ; Service Routine (which is  
        .eval   x+1, x                          ; just a RETI)               
        .break  x = 200h                        ; This Table will load at    
        .endloop                                ; 0C00000000h.               

C40_IV_Table_Loc:                               ; Define the Trap Vector     
                                                ; Table.  All entries        
        .eval   0, x                            ; currently point to         
        .loop                                   ; A default Interrupt        
        .word   Default_ISR                     ; Service Routine (which is  
        .eval   x+1, x                          ; just a RETI)               
        .break  x = 40h                         ; This Table will load at    
        .endloop                                ; 0C00000200h.               

C40_Stack_Loc:            .space   200h        ; Save 512 Words for the Stack.
                                               ; This will load at 0C0000240h.


C40_TV_Table_Handle:      .word   C40_TV_Table_Loc      ; Memory location to
                                                        ; store the address
                                                        ; of the TVTP table.

C40_IV_Table_Handle:      .word   C40_IV_Table_Loc      ; Memory location to
                                                        ; store the address
                                                        ; of the IVTP table.

C40_Stack_Handle:         .word   C40_Stack_Loc         ; Memory location to
                                                        ; store the base adrs
                                                        ; of the C40 stack.

Global_Mem_Ctrl_Reg_Value_Loc:   .word   1DEA4000h      ; Memory location to
                                                        ; store the value that
                                                        ; is loaded into the
                                                        ; Global Memory
                                                        ; Control Register.
                              
Internal_Peripheral_Handle:                             ; Memory Location to
                                                        ; store the Base
        .word       Base_of_Peripheral_Bus              ; Address of the
                                                        ; Peripheral Bus 

Dual_Port_Memory_Handle:

        .word       Base_of_Dual_Port_Memory

Enable_IIOF2_Edge_Loc:          .word   00000009h       ; Memory Location to
                                                        ; store the value 
                                                        ; that is loaded into
                                                        ; the IIOF2 bits in the
                                                        ; IIF.  This enables
                                                        ; IIOF2 as an edge-    
                                                        ; triggered interrupt
                                                        ; AND HAS THE SIDE 
                                                        ; EFFECT OF PROGRAMMING
                                                        ; IIOF3 AS AN INPUT
                                                        ; when merged into the
                                                        ; IIF with an MB1
                                                        ; instruction
                                                   
    

******************************************************************************
*  Cross-References                                                          *
******************************************************************************

                                                        ; Define these        
         .def    Global_Start                           ; Symbols as external 
         .def    Dual_Port_Memory_Handle                ; for use in other    
         .def    C40_Stack_Handle                       ; modules.            

         .ref    Init_for_Loop                          ; These symbols are
         .ref    Default_ISR                            ; defined in   
         .ref    Error_Handler_ISR_Loc                  ; external modules
         .ref    Initialize_ISR_Loc
         .ref    GDSP_Node_ID_Loc
         .ref    GDSP_to_TCC_Status_Handle
         .ref    Zero_Loc

         .end
