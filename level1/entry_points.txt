
******************************
D0$LEVEL1$ROOT:[000000.SOURCE]ACTUAL_GEOMETRY.FOR;1

      SUBROUTINE ACTUAL_GEOMETRY (ERR)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]ADC_CONVERSIONS.FOR;1

      SUBROUTINE ADC_CONVERSIONS (TRIGGER_TOWER_ENERGY, ADC_BYTE)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]BKCTTR.FOR;1

      SUBROUTINE BKCTTR (EM_TT, HD_TT, LCTTR)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]BKLBLS.FOR;1

      SUBROUTINE BKLBLS(LLBLS)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]BKTRGR.FOR;1

      SUBROUTINE BKTRGR (LTRGR, TRGR_BANK_LENGTH)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]CAL_TTOWERS.FOR;1

      FUNCTION CAL_TTOWERS()
C-   ENTRY CTTOWER_SMEAR(ADD_NOISE,DO_SMEAR,ECUT)
      ENTRY CTTOWER_SMEAR(ADD_NOISE,DO_SMEAR,ECUT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]CC_DISTS.FOR;1

      SUBROUTINE CC_DISTS(L1BIT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]CLEAN_LINE.FOR;1

      SUBROUTINE CLEAN_LINE (LINE, LENGTH)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]CTTRFL.FOR;1

      SUBROUTINE CTTRFL (NOISE, CUTOFF,OK)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]CTTR_ANL.FOR;1

      SUBROUTINE CTTR_ANL

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]CTTR_DIAL.FOR;1

      FUNCTION CTTR_DIAL()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]CTTR_DMP.FOR;1

      FUNCTION CTTR_DMP()
C-   ENTRY CTTR_DEFD  turn on/off CTTR dump
      ENTRY CTTR_DEFD()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]CTTR_INI.FOR;1

      FUNCTION CTTR_INI()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]CTTR_SMEAR.FOR;1

      SUBROUTINE CTTR_SMEAR
C          resolution function is for now 4% constant term

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]DOUBLE_RANGE.FOR;1

      SUBROUTINE DOUBLE_RANGE (LINE, LENGTH, PNTR, I1, I2, J1, J2, ERR)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]DUMPV.FOR;1

      SUBROUTINE DUMPV (VECT,NLIN,NCOL,STRING,ZERO_SUP,IFIRST)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]FIND_ONE_VALUE.FOR;1

      SUBROUTINE FIND_ONE_VALUE (LINE, LENGTH, PNTR, VAL, TYPE, ERR)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]FIND_REAL_LIST.FOR;1

      SUBROUTINE FIND_REAL_LIST (LINE, LENGTH, PNTR, NB_LIST,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]FIND_SAMCEN_IND.FOR;1

      SUBROUTINE FIND_SAMCEN_IND(otc,layer,card,port)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]GDSP_FILL_DATA_BLOCK.FOR;1

      SUBROUTINE GDSP_FILL_DATA_BLOCK(PASSED,TTETA,TTPHI,OBJ_NRG,
      PARAMETER (WRDS_PER_ENTRY = 4, MAX_ENTRIES = 16)
        DO ENTRY = 1,NENTRIES

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]GDSP_GET_CANDS.FOR;1

      SUBROUTINE GDSP_GET_CANDS(TTETA,TTPHI,OBJ_TYPE,OBJ_NRG,NUMCANDS)
        WRDS_PER_ENTRY = BYTES(BYTE4)
        DO ENTRY = 1, NUM_ENTRIES

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]GDSP_TOOL_NCAND_CUT.FOR;1

      SUBROUTINE GDSP_TOOL_NCAND_CUT(PASSED,TTETA,TTPHI,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]GLOBAL_THRESHOLD_TRANSLATION.FOR;1

      SUBROUTINE   GLOBAL_THRESHOLD_TRANSLATION ( 

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]GZCTTR.FOR;1

      FUNCTION GZCTTR ( )

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]HARD_FILL_L1.FOR;1

      SUBROUTINE HARD_FILL_L1(NTRIG_H)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]HARD_INFO.FOR;1

      SUBROUTINE HARD_INFO(H_CCT_LATCH,H_L1BIT,HFW_L1BIT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]HS_COMPARE.FOR;1

      SUBROUTINE HS_COMPARE

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]INIT_COMMON_BLOCK_MINIMAL.FOR;1

      SUBROUTINE INIT_COMMON_BLOCK_MINIMAL()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]INIT_LOOKUP_ROUTINES.FOR;1

      SUBROUTINE   INIT_LOOKUP_ROUTINES ( IO_UNIT, FILE_NAME, STATUS )
C-                         This subroutine opens the Lookup Management File,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]INIT_LSO_BANK_NAMES.FOR;1

      SUBROUTINE INIT_LSO_BANK_NAMES()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]ISAINFO.FOR;1

      SUBROUTINE ISAINFO(SKIP)
C.. Entry point to fill HBOOK objects with ISAJET information
      ENTRY ISA_FILL_L1

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15CALDBB_DATA_BLOCK_BUILDER.FOR;1

      SUBROUTINE L15CALDBB_DATA_BLOCK_BUILDER()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15CAL_EM_SIM.FOR;1

      LOGICAL FUNCTION L15CAL_EM_SIM(L15CAL_TERM)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15COOR_FRAME_CODE_INIT.FOR;1

      SUBROUTINE L15COOR_FRAME_CODE_INIT

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15COOR_STVSTM_INIT.FOR;1

      SUBROUTINE L15COOR_STVSTM_INIT

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15COOR_TOOL_INIT.FOR;1

      SUBROUTINE L15COOR_TOOL_INIT(TYPE)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15C_DEBUG_TYPE_FW.FOR;1

      SUBROUTINE L15C_DEBUG_TYPE_FW(INDEX,WDS_T_FLW,TYPE,ID)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15C_FILL_DEBUG_SECTION.FOR;1

      SUBROUTINE L15C_FILL_DEBUG_SECTION(EVENT_TYPE)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15C_FILL_DEBUG_T0.FOR;1

      SUBROUTINE L15C_FILL_DEBUG_T0(INDEX,EVENT_TYPE,WDS_T_FLW)
C-   Inputs  : Seperate entry points for each block type
C-  entry point for Type 0 block filling.
C-  entry point for Type 1 block filling.
      ENTRY L15C_FILL_DEBUG_T1(INDEX,LDSP,WDS_T_FLW)
C-  entry pt for type 2 block
      ENTRY L15C_FILL_DEBUG_T2(INDEX,CRATE,TERM,LDSP,WDS_T_FLW)
C-  entry pt of type 3 block
      ENTRY L15C_FILL_DEBUG_T3(INDEX,CRATE,TERM,LDSP,WDS_T_FLW)
C-  entry pt for type 4 block
      ENTRY L15C_FILL_DEBUG_T4(INDEX,WDS_T_FLW)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15C_FILL_FRAME_CODE_BLOCK.FOR;1

      SUBROUTINE L15C_FILL_FRAME_CODE_BLOCK()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15C_FILL_FRAME_PARAM_BLOCK.FOR;1

      SUBROUTINE L15C_FILL_FRAME_PARAM_BLOCK()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15C_FILL_TOOL_PARAM_BLOCK.FOR;1

      SUBROUTINE L15C_FILL_TOOL_PARAM_BLOCK()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15C_GET_ENERGIES.FOR;1

      SUBROUTINE L15C_GET_ENERGIES ()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15FW_CLEAR_TERMS.FOR;1

      SUBROUTINE L15FW_CLEAR_TERMS

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15FW_UNPACK_TERMS.FOR;1

      SUBROUTINE L15FW_UNPACK_TERMS(NUM_TERMS_USED, TERM_STATES,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15_CAL_SIM.FOR;1

      SUBROUTINE L15_CAL_SIM ( NUM_L15_TERM_USED, L15_TERM_STATES,
C       This is a LOGICAL function provided by L1SIM which selects the
C       The function L1UTIL_PICK_L15RESOURCE_RCP calls EZPICK with the

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15_CAL_TERM_ON.FOR;1

      LOGICAL FUNCTION L15_CAL_TERM_ON(ITERM)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15_FRAMEWORK_DIALOG.FOR;1

      SUBROUTINE L15_FRAMEWORK_DIALOG

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15_FRAMEWORK_INIT.FOR;1

      SUBROUTINE L15_FRAMEWORK_INIT

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15_FRAMEWORK_SIM.FOR;1

      SUBROUTINE L15_FRAMEWORK_SIM

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15_GLOBAL_DSP.FOR;1

      SUBROUTINE L15_GLOBAL_DSP(PASSED)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15_LOCAL_DSP.FOR;1

      SUBROUTINE L15_LOCAL_DSP()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15_MUON_SIM.FOR;1

      SUBROUTINE L15_MUON_SIM ( NUM_L15_TERM_USED, L15_TERM_STATES,
C       This is a LOGICAL function provided by L1SIM which selects the correct
C       The function L1UTIL_PICK_L15RESOURCE_RCP calls EZPICK with the correct 
C       to the ENTRY point L15_MUON which calculates an array of 

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L15_USER_TERMS_SIM.FOR;1

      SUBROUTINE L15_USER_TERMS_SIM( NUM_L15_TERM_USED, L15_TERM_STATES,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1BIT_COUNTERS.FOR;1

      SUBROUTINE L1BIT_COUNTERS(NTRIG_S,NTRIG_H)
      ENTRY FINAL_STATS

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_ALLOC_SPECTRIG.FOR;1

      SUBROUTINE L1COOR_ALLOC_SPECTRIG(SPEC_TRIG)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_ANDOR_INIT.FOR;1

      SUBROUTINE L1COOR_ANDOR_INIT()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_BUILD_KEYWORD.FOR;1

      SUBROUTINE L1COOR_BUILD_KEYWORD(KEYWORD_INDEX, GOOD)
      ENTRY L1COOR_INIT_KEYWORD_TABLE()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_BUILD_NUMBER.FOR;1

      SUBROUTINE L1COOR_BUILD_NUMBER(NUMBER,NUM_ASSERTED,GOOD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_COUNTREF_INIT.FOR;1

      SUBROUTINE L1COOR_COUNTREF_INIT(THRTYP)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_DEALLOC_SPECTRIG.FOR;1

      SUBROUTINE L1COOR_DEALLOC_SPECTRIG(SPEC_TRIG)
      ENTRY L1COOR_CLEAR_SPECTRIG_SCALERS(SPEC_TRIG)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_ENABLE_SPECTRIG.FOR;1

      SUBROUTINE L1COOR_ENABLE_SPECTRIG

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_FREE_SPECTRIG.FOR;1

      SUBROUTINE L1COOR_FREE_SPECTRIG(SCALERS_ONLY)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_GET_COMMAND_TYPE.FOR;1

      SUBROUTINE L1COOR_GET_COMMAND_TYPE(LINE, COMMAND, GOOD)
      ENTRY L1COOR_INIT_COMMAND_TYPE()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_GET_LIST.FOR;1

      SUBROUTINE L1COOR_GET_LIST(LINE,ERROR)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_GET_LIST_FLOAT.FOR;1

      SUBROUTINE L1COOR_GET_LIST_FLOAT(RET_GOOD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_GET_LIST_PAREN.FOR;1

      SUBROUTINE L1COOR_GET_LIST_PAREN(RET_GOOD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_GET_LIST_RANGE.FOR;1

      SUBROUTINE L1COOR_GET_LIST_RANGE(RET_GOOD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_GLOBSUM_INIT.FOR;1

      SUBROUTINE L1COOR_GLOBSUM_INIT(THRTYP)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_INIT_FEBZDIS.FOR;1

      SUBROUTINE L1COOR_INIT_FEBZDIS

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_INIT_OBEYVETO.FOR;1

      SUBROUTINE L1COOR_INIT_OBEYVETO(ST_OBEYVETO)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_L15TERM_INIT.FOR;1

      SUBROUTINE L1COOR_L15TERM_INIT

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_L15TYPE_INIT.FOR;1

      SUBROUTINE L1COOR_L15TYPE_INIT

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_LIST_ITEM_NOT_KEYWORD.FOR;1

      SUBROUTINE L1COOR_LIST_ITEM_NOT_KEYWORD(GOOD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_LIST_ITEM_NOT_NEGATED.FOR;1

      SUBROUTINE L1COOR_LIST_ITEM_NOT_NEGATED(GOOD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_LIST_ITEM_NOT_RANGE.FOR;1

      SUBROUTINE L1COOR_LIST_ITEM_NOT_RANGE(GOOD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_LIST_ITEM_RANGE.FOR;1

      SUBROUTINE L1COOR_LIST_ITEM_RANGE(MIN_RANGE, MAX_RANGE, GOOD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_LIST_OBJ_HAS_ONE_ITEM.FOR;1

      SUBROUTINE L1COOR_LIST_OBJ_HAS_ONE_ITEM(GOOD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_LIST_OBJ_HAS_PAREN.FOR;1

      SUBROUTINE L1COOR_LIST_OBJ_HAS_PAREN(GOOD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_LIST_OBJ_LE_ONE_ITEM.FOR;1

      SUBROUTINE L1COOR_LIST_OBJ_LE_ONE_ITEM(GOOD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_LIST_OBJ_NOT_KEYWORD.FOR;1

      SUBROUTINE L1COOR_LIST_OBJ_NOT_KEYWORD(GOOD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_LIST_OBJ_NOT_NEGATED.FOR;1

      SUBROUTINE L1COOR_LIST_OBJ_NOT_NEGATED(GOOD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_LIST_OBJ_NO_PAREN.FOR;1

      SUBROUTINE L1COOR_LIST_OBJ_NO_PAREN(GOOD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_LIST_OBJ_RANGE.FOR;1

      SUBROUTINE L1COOR_LIST_OBJ_RANGE(MIN_RANGE, MAX_RANGE, GOOD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_MISPTSUM_INIT.FOR;1

      SUBROUTINE L1COOR_MISPTSUM_INIT()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_NEXT_CHAR.FOR;1

      FUNCTION L1COOR_NEXT_CHAR()
      ENTRY L1COOR_CUR_CHAR()
      ENTRY L1COOR_INIT_CHAR(LINEIN)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_REFSET_INIT.FOR;1

      SUBROUTINE L1COOR_REFSET_INIT   (THRTYP)
C- ENTRY L1COOR_REFSET_VERIFY (THRTYP)
C-                      Added the entry point L1COOR_REFSET_VERIFY to verify
C-                      Avoid duplicating code in entry point
C   This is where the entry point L1COOR_REFSET_VERIFY catches up 
C       Go through list one entry at a time. Perform processing based on what
C   Do assignments, unless the entry point L1COOR_REFSET_VERIFY was used
      ENTRY      L1COOR_REFSET_VERIFY (THRTYP)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_ST_PRESCALER_INIT.FOR;1

      SUBROUTINE L1COOR_ST_PRESCALER_INIT()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_ST_STARTDGT_INIT.FOR;1

      SUBROUTINE L1COOR_ST_STARTDGT_INIT()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1COOR_ST_VS_RS_INIT.FOR;1

      SUBROUTINE L1COOR_ST_VS_RS_INIT(RS_TYPE)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_ART_EVENTS.FOR;1

      SUBROUTINE L1C_ART_EVENTS (LUN, EVENT_FILE, RUN,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_ART_EVENT_BUILDER.FOR;1

      SUBROUTINE L1C_ART_EVENT_BUILDER (LUN, LINE_NUM, LISTING, 

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_BACKUP_CALTRIG_RSLT.FOR;1

      SUBROUTINE L1C_BACKUP_CALTRIG_RSLT()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_COMPARE_CALTRIG_MESSAGE.FOR;1

      SUBROUTINE L1C_COMPARE_CALTRIG_MESSAGE(LUN, MSGNUM)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_COMPARE_CALTRIG_RSLT.FOR;1

      SUBROUTINE L1C_COMPARE_CALTRIG_RSLT(PASSED_VERIFY)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_FAST_CALTRIG.FOR;1

      SUBROUTINE L1C_FAST_CALTRIG

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_FIND_CARDS.FOR;1

      SUBROUTINE L1C_FIND_CARDS ()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_FUTURE_USE_INIT.FOR;1

      SUBROUTINE L1C_FUTURE_USE_INIT

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_GENERATE_ANDOR.FOR;1

      SUBROUTINE L1C_GENERATE_ANDOR(NUM_ANDOR_USED, 

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_INIT_LSM.FOR;1

      SUBROUTINE L1C_INIT_LSM()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_LOAD_BLS_FILE.FOR;1

      SUBROUTINE L1C_LOAD_BLS_FILE(LUN)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_SIMUL_CALTRIG.FOR;1

      SUBROUTINE L1C_SIMUL_CALTRIG

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_SIMUL_CAT2.FOR;1

      SUBROUTINE L1C_SIMUL_CAT2 (NB_INPUT, INPUT,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_SIMUL_CAT3.FOR;1

      SUBROUTINE L1C_SIMUL_CAT3 (NB_INPUT, INPUT,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_SIMUL_CHTCR.FOR;1

      SUBROUTINE L1C_SIMUL_CHTCR (CHTCR)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_SIMUL_CTFE.FOR;1

      SUBROUTINE L1C_SIMUL_CTFE (CTFE)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1C_SWAP_CALTRIG_RSLT.FOR;1

      SUBROUTINE L1C_SWAP_CALTRIG_RSLT()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DBB_DATA_BLOCK_BUILDER.FOR;1

      SUBROUTINE L1DBB_DATA_BLOCK_BUILDER

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DBB_JET_LIST_INDICES.FOR;1

      SUBROUTINE L1DBB_JET_LIST_INDICES(ADDRESS, SIGN_ETA, MAGN_ETA, 
C-      particular entry in the jet list from the address format used in the

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DBB_JET_SORT.FOR;1

      SUBROUTINE L1DBB_JET_SORT ( ENERGY,     MASK,       ADDRESS,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DBB_L15_SECTION.FOR;1

      SUBROUTINE L1DBB_L15_SECTION(UPDATE_L15_SECTION)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DMP_ADC_GEV_UNPACK.FOR;1

      SUBROUTINE L1DMP_ADC_GEV_UNPACK(LUN)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DMP_ANDOR_TERMS.FOR;1

      SUBROUTINE L1DMP_ANDOR_TERMS(LUN, SIMULATION)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DMP_DBLOCK_BYTE.FOR;1

      SUBROUTINE L1DMP_DBLOCK_BYTE(ADDR, LOW, VALUE)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DMP_DBLOCK_RAW.FOR;1

      SUBROUTINE L1DMP_DBLOCK_RAW (LUN,MODE)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DMP_DBLOCK_UNPACK.FOR;1

      SUBROUTINE L1DMP_DBLOCK_UNPACK(LUN,SIMULATION)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DMP_ENERGY_SUM_THRSH.FOR;1

      SUBROUTINE L1DMP_ENERGY_SUM_THRSH(LUN, QUANT, TITLE, THRESH,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DMP_FASTSIMUL.FOR;1

      SUBROUTINE L1DMP_FASTSIMUL(LUN)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DMP_GET_NEXT_ANDOR_KEY.FOR;1

      SUBROUTINE L1DMP_GET_NEXT_ANDOR_KEY(NAME, TERM_NUM, OK)
      ENTRY L1DMP_GET_NEXT_ANDOR_KEY_INIT()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DMP_L1EXTRACT.FOR;1

      FUNCTION L1DMP_L1EXTRACT
C-                        Add entry L1DMP_L1EXTRACT_DEFDUMP 
C   See Entry L1DMP_L1EXTRACT_DEFDUMP
  400 FORMAT(' EM  Jet Entry #', I2, ' Eta ', I3, ' Phi ', I2)
  410 FORMAT(' TOT Jet Entry #', I2, ' Eta ', I3, ' Phi ', I2)
      ENTRY L1DMP_L1EXTRACT_DEFDUMP

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DMP_LARGE_TILE_GEV.FOR;1

      SUBROUTINE L1DMP_LARGE_TILE_GEV(LUN)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DMP_REFSET.FOR;1

      SUBROUTINE L1DMP_REFSET(LUN, SET_TYPE, SET_NUMBER)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DMP_SELECT_SECTIONS.FOR;1

      SUBROUTINE L1DMP_SELECT_SECTIONS(SIMULATION)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DMP_SIMULATED_JET_LIST.FOR;1

      LOGICAL FUNCTION L1DMP_SIMULATED_JET_LIST

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DMP_SP_TRIG_DEF.FOR;1

      SUBROUTINE L1DMP_SP_TRIG_DEF (LUN)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1DMP_TOWER_UNPACK.FOR;1

      SUBROUTINE L1DMP_TOWER_UNPACK(LUN)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1FW_CLEAR_ANDOR.FOR;1

      SUBROUTINE L1FW_CLEAR_ANDOR

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1FW_INIT_ANDOR_SOURCES.FOR;1

      SUBROUTINE L1FW_INIT_ANDOR_SOURCES()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1FW_INIT_RES.FOR;1

      SUBROUTINE L1FW_INIT_RES

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1FW_UNPACK_ANDOR.FOR;1

      SUBROUTINE L1FW_UNPACK_ANDOR(NUM_ANDOR_USED, ANDOR_STATES,
      ENTRY L1FW_UNPACK_ANDOR_ERROR_STRING(ERROR, STRING, SLEN)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1SIM_DEFDUMP.FOR;1

      LOGICAL FUNCTION L1SIM_DEFDUMP()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1SIM_DIALOG.FOR;1

      LOGICAL FUNCTION L1SIM_DIALOG()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1SIM_DUMP.FOR;1

      LOGICAL FUNCTION L1SIM_DUMP()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1SIM_EVENT.FOR;1

      FUNCTION L1SIM_EVENT()
C-                            - Changed function declaration to pass D0FLAVOR.

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1SIM_INI.FOR;1

      FUNCTION L1SIM_INI()
C-   Purpose and Methods : Call initialization subroutine for each subsystem in

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1SIM_SSUM.FOR;1

      LOGICAL FUNCTION L1SIM_SSUM()
C-                            - Changed function declaration to pass D0FLAVOR.

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_ADC_COUNT_UNPACK.FOR;1

      SUBROUTINE L1UTIL_ADC_COUNT_UNPACK(DBLOCK_ADC, FADC_BYTE)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_DISP_BLS_COEFF.FOR;1

      PROGRAM L1UTIL_DISP_BLS_COEFF

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_DISP_TOWER_ENERGY.FOR;1

      LOGICAL FUNCTION L1UTIL_DISP_TOWER_ENERGY()
C-                            - Changed function definition to pass D0FLAVOR.

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_EXAMPLE_BLS_FILE.FOR;1

      PROGRAM L1UTIL_EXAMPLE_BLS_FILE

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_EXPAND_FILENAME.FOR;1

      SUBROUTINE L1UTIL_EXPAND_FILENAME(ORIGINAL, EXPANDED)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_FIRST_BYTE_CODING.FOR;1

      SUBROUTINE L1UTIL_FIRST_BYTE_CODING (NBYTES, FIRST_ADDRESS, WORD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_GET_PARAM_DIALOG.FOR;1

      SUBROUTINE L1UTIL_GET_PARAM_DIALOG(VALUE, PROMPT, TRUE_MESSAGE,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_JET_LIST_BUILDER.FOR;1

      SUBROUTINE L1UTIL_JET_LIST_BUILDER( L1CRATE, LIST_TYPE, MAX_ENTRY,
C-                         AND, OR, EXOR intrinsic function that are compiled
C-             MAX_ENTRY   Saturation point of the Jet List
C-   Outputs : TOT_ENTRY   If the list is complete, this is the number of
C-             ENTRY_LIST  list of the TOT_ENTRY towers in the format described
C- ENTRY L1UTIL_JET_LIST_BUILDER_FIRST(LIST_TYPE)
C- ENTRY L1UTIL_JET_LIST_BUILDER_STMASK(L1CRATE, LIST_TYPE)
C-     Triggers fired using each Reference Set. This entry point should be
C-                          Add entry point L1UTIL_JET_LIST_BUILDER_FIRST.
C-        add entry point to retrieve the masks of Sptrg fired using each Refset
C       Arguments to entry point L1UTIL_JET_LIST_BUILDER_FIRST
      TOT_ENTRY      = 0
C         Is there at least one entry for the 32 phi towers at (+ ETA_MAGN)?
C         Is there at least one entry for the 32 phi towers at (- ETA_MAGN)?
      IF ( TOT_ENTRY .GT. MAX_ENTRY ) THEN
        TOT_ENTRY      = MAX_ENTRY 
        IF ( TOT_ENTRY .GT. 1 ) THEN 
      TOT_ENTRY = 0
C       Compute Tower's Entry mask and Entry address
C       are ORed to obtain the tower's entry mask.
C       add entry to (not yet ordered) Jet List
      TOT_ENTRY = TOT_ENTRY + 1
      IF ( TOT_ENTRY .GT. MAX_ENTRY ) GOTO 130
      ENTRY_LIST ( SPEC_TRIG_MASK, TOT_ENTRY ) = ENTRY_MASK
C       only the lower 9 bits of the upper 2 bytes) of the entry tag (which
      SWAP_REACH = TOT_ENTRY / 2       
  510 LOW_INDEX_LIMIT = TOT_ENTRY - SWAP_REACH
C       merge the saturation flag with the Entry Count if needed
     &  TOT_ENTRY = TOT_ENTRY + FLAG_INCOMPLETE
      ENTRY L1UTIL_JET_LIST_BUILDER_FIRST(LIST_TYPE_FIRST)
      ENTRY L1UTIL_JET_LIST_BUILDER_STMASK(L1CRATE, LIST_TYPE)
C-     Triggers fired using each Reference Set. This entry point should be

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_PICK_L15RESOURCE_RCP.FOR;1

      FUNCTION L1UTIL_PICK_L15RESOURCE_RCP ()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_PICK_L1SIM_RCP.FOR;1

      SUBROUTINE L1UTIL_PICK_L1SIM_RCP

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_PICK_RESOURCE_RCP.FOR;1

      FUNCTION L1UTIL_PICK_RESOURCE_RCP()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_REPLACE_RS_KEYWORD.FOR;1

      SUBROUTINE L1UTIL_REPLACE_RS_KEYWORD(LINE, ORIG_KEY, NEW_KEY, 

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_RS_LINE_PATTERN.FOR;1

      SUBROUTINE L1UTIL_RS_LINE_PATTERN(LINE, PATTERN, OK)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_SCALER_SUBTRACT.FOR;1

      SUBROUTINE L1UTIL_SCALER_SUBTRACT(A, B, DIFFERENCE)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_TRANSLATE_RS_LINE.FOR;1

      SUBROUTINE L1UTIL_TRANSLATE_RS_LINE(LINE, SEND_LINE, BAD_LINE)
C-      ENTRY L1UTIL_TRANSLATE_LTRS_LINE(LINE, SEND_LINE, BAD_LINE)
C-                          Add Entry L1UTIL_TRANSLATE_LTRS_LINE 
C   This is where the entry point L1UTIL_TRANSLATE_LTRS_LINE catches up
C     L1COOR_REFSET_VERIFY is an entry point to in L1COOR_REFSET_INIT for
      ENTRY L1UTIL_TRANSLATE_LTRS_LINE(LINE, SEND_LINE, BAD_LINE)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_TRGR_ADC_UNPACK.FOR;1

      SUBROUTINE L1UTIL_TRGR_ADC_UNPACK (EM, HD)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_TRGR_DISP_DEFDUMP.FOR;1

      LOGICAL FUNCTION L1UTIL_TRGR_DISP_DEFDUMP ()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_TRGR_DISP_DUMP.FOR;1

      LOGICAL FUNCTION L1UTIL_TRGR_DISP_DUMP ()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_TRGR_DISP_INIT.FOR;1

      LOGICAL FUNCTION L1UTIL_TRGR_DISP_INIT()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_TRGR_EXTENSION.FOR;1

      SUBROUTINE L1UTIL_TRGR_EXTENSION(LTRGR, DELTA_WORDS, 

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_TRGR_UNPACK.FOR;1

      SUBROUTINE L1UTIL_TRGR_UNPACK(LTRGR_LEVEL1, CURRENT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_WHERE_WORD.FOR;1

      SUBROUTINE L1UTIL_WHERE_WORD (ADDRESS, IW, LSB)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1UTIL_WRITE_BLS_FILE.FOR;1

      SUBROUTINE L1UTIL_WRITE_BLS_FILE(FNAME)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_AND_L15_CONTROL_SSUM.FOR;1

      SUBROUTINE L1_AND_L15_CONTROL_SSUM(LUN)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_AND_L15_FW_ANAL.FOR;1

      SUBROUTINE L1_AND_L15_FW_ANAL

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_AND_L15_RUN_STATS.FOR;1

      SUBROUTINE L1_AND_L15_RUN_STATS

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_CALTRIG_ANAL.FOR;1

      SUBROUTINE L1_CALTRIG_ANAL ()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_CALTRIG_DIALOG.FOR;1

      SUBROUTINE L1_CALTRIG_DIALOG ( )
C-                          - Changed from a function to a subroutine.
C-                            other routines rather than entry points.

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_CALTRIG_SIM.FOR;1

      SUBROUTINE L1_CALTRIG_SIM(NUM_ANDOR_USED, ANDOR_STATES,
C      program to check the results of the fast simulator algorithm against 
      ENTRY L1C_USING_FAST_SIMULATION(FAST_OUT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_CALTRIG_TOWERS.FOR;1

      SUBROUTINE L1_CALTRIG_TOWERS( SUCCESS )
C-                          other routines rather than entry points

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_COPY_CRATES.FOR;1

      SUBROUTINE L1_COPY_CRATES ()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_EXTRACT_ISAJET.FOR;1

      SUBROUTINE L1_EXTRACT_ISAJET()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_FRAMEWORK_SIM.FOR;1

      SUBROUTINE L1_FRAMEWORK_SIM
C-                      delete ENTRY point L1FW_NUM_TRG_FIRED(NUM_FIRED)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_FW_AND_CT_CLEAR.FOR;1

      SUBROUTINE L1_FW_AND_CT_CLEAR()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_FW_AND_CT_DEFDUMP.FOR;1

      SUBROUTINE L1_FW_AND_CT_DEFDUMP
C-              Moved this routine from an entry point of L1_FW_AND_CT_DUMP.

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_FW_AND_CT_DUMP.FOR;1

      SUBROUTINE L1_FW_AND_CT_DUMP()
C-   ENTRY L1_FW_AND_CT_DUMP_ENABLE(PERFORM_DUMP)
C-                        - Changed from a function to a subroutine.
C-                        - Changed name of entry point from L1C_DEFD to
C-                      Moved entry point L1_FW_AND_CT_DEFDUMP to seperate
C-                      Added entry point L1_FW_AND_CT_DUMP_ENABLE which simply
C-                      Added entry pont L1_FW_AND_CT_DUMP_SELECT which is used
      ENTRY L1_FW_AND_CT_DUMP_ENABLE(PERFORM_DUMP)
      ENTRY L1_FW_AND_CT_DUMP_SELECT(SECTION, INCLUDE)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_FW_AND_CT_FILL.FOR;1

      SUBROUTINE L1_FW_AND_CT_FILL

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_FW_AND_CT_INIT.FOR;1

      SUBROUTINE L1_FW_AND_CT_INIT
C-                          - Changed routine from an entry point to a

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_FW_AND_CT_INIT_PROGR.FOR;1

      SUBROUTINE L1_FW_AND_CT_INIT_PROGR

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_FW_AND_CT_PROGR.FOR;1

      SUBROUTINE L1_FW_AND_CT_PROGR(LUN,PROGR_STATUS)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_FW_AND_CT_RCP.FOR;1

      SUBROUTINE L1_FW_AND_CT_RCP()
      RCP_ENTRY = 0
        RCP_ENTRY  = RCP_ENTRY + 1
      RCP_ENTRY = 0
        RCP_ENTRY  = RCP_ENTRY + 1

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_FW_AND_CT_SSUM.FOR;1

      SUBROUTINE L1_FW_AND_CT_SSUM ()
C-                            Changed from function to a subroutine.
C-                            with other routines rather than entry points

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_L15CAL_FILL.FOR;1

      SUBROUTINE L1_L15CAL_FILL ()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_LARGE_TILE_SIM.FOR;1

      SUBROUTINE L1_LARGE_TILE_SIM( NUM_ANDOR_USED, ANDOR_STATES,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_LEVEL0_SIM.FOR;1

      SUBROUTINE L1_LEVEL0_SIM(NUM_ANDOR_USED, ANDOR_STATES, 

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_LEVEL15_NEEDED.FOR;1

      LOGICAL FUNCTION L1_LEVEL15_NEEDED()
C-   Purpose and Methods : A function which determines if the current 

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_MUON_FILL.FOR;1

      SUBROUTINE L1_MUON_FILL

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_MUON_INIT.FOR;1

      SUBROUTINE L1_MUON_INIT

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_MUON_SIM.FOR;1

      SUBROUTINE L1_MUON_SIM ( NUM_ANDOR_USED, ANDOR_STATES,
C       This is a LOGICAL function provided by L1SIM which selects the correct
C       The function  L1UTIL_PICK_RESOURCE_RCP calls EZPICK with the correct

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_SPECIAL_TERMS_SIM.FOR;1

      SUBROUTINE L1_SPECIAL_TERMS_SIM(NUM_ANDOR_USED, ANDOR_STATES,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]L1_USER_TERMS_SIM.FOR;1

      SUBROUTINE L1_USER_TERMS_SIM(NUM_ANDOR_USED, ANDOR_STATES,
      ENTRY L1_USER_TERMS_FILL
      ENTRY L1_USER_TERMS_INIT()
      ENTRY L1_USER_TERMS_DIALOG()
      ENTRY L1_USER_TERMS_SSUM()
      ENTRY L1_USER_TERMS_DEFDUMP()
      ENTRY L1_USER_TERMS_DUMP()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]LDSP_FILL_DATA_BLOCK.FOR;1

      SUBROUTINE LDSP_FILL_DATA_BLOCK(DSP,NUMCANDS,OBJ_WORD1,
      PARAMETER (WRDS_PER_ENTRY = 3, HEADWRD = 1)
      DO ENTRY = 1,NENTRIES

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]LDSP_GET_SUMS.FOR;1

      SUBROUTINE LDSP_GET_SUMS(TTETA,TTPHI,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]LDSP_GET_TOWERS.FOR;1

      SUBROUTINE LDSP_GET_TOWERS(EMET,TOTET)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]LDSP_TOOL_3X3.FOR;1

      SUBROUTINE LDSP_TOOL_3x3(L1ETAC,L1PHIC,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]LDSP_TOOL_EM_ISO.FOR;1

      SUBROUTINE LDSP_TOOL_EM_ISO(L1ETAC,L1PHIC,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]LEVEL1_DATA_BLOCK_DUMP.FOR;1

      SUBROUTINE LEVEL1_DATA_BLOCK_DUMP (LUN,MODE)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]LGTILE_THRESHOLD_TRANSLATION.FOR;1

      SUBROUTINE   LGTILE_THRESHOLD_TRANSLATION ( 

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]LSO_COPYWORDS.FOR;1

      SUBROUTINE LSO_COPYWORDS(SOURCE, DEST, LENGTH)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MUSIM_BOOK.FOR;1

      SUBROUTINE MUSIM_BOOK

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MUSIM_BOOK_L1.FOR;1

      SUBROUTINE MUSIM_BOOK_L1

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MUSIM_BOOK_L15.FOR;1

      SUBROUTINE MUSIM_BOOK_L15

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MUSIM_EVENT.FOR;1

      LOGICAL FUNCTION MUSIM_EVENT()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MUSIM_FILL.FOR;1

      SUBROUTINE MUSIM_FILL

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MUSIM_FILL_L1.FOR;1

      SUBROUTINE MUSIM_FILL_L1

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MUSIM_FILL_L15.FOR;1

      SUBROUTINE MUSIM_FILL_L15

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MUSIM_INIT.FOR;1

      LOGICAL FUNCTION MUSIM_INIT()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MUSIM_SUM.FOR;1

      LOGICAL FUNCTION MUSIM_SUM()

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_BOOK_CC.FOR;1

      SUBROUTINE MU_BOOK_CC(MULTBK)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_CCT_CF_BOT.FOR;1

      SUBROUTINE MU_CCT_CF_BOT(A,B,C,JBITS)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_CCT_CF_TOP.FOR;1

      SUBROUTINE MU_CCT_CF_TOP(A,B,C,JBITS)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_CCT_EF_BOT.FOR;1

      SUBROUTINE MU_CCT_EF_BOT(A,B,C,JBITS)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_CCT_EF_TOP.FOR;1

      SUBROUTINE MU_CCT_EF_TOP(A,B,C,JBITS)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_CHK_MAC_FLAGS.FOR;1

      SUBROUTINE MU_CHK_MAC_FLAGS(SKIP)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_CHK_SMAC_FLAGS.FOR;1

      SUBROUTINE MU_CHK_SMAC_FLAGS(CENT_TRUNC,TOO_MANY_HITS)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_CHK_WMAC_FLAGS.FOR;1

      SUBROUTINE MU_CHK_WMAC_FLAGS(CENT_TRUNC,TOO_MANY_HITS)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_COOR_PARSE.FOR;1

      SUBROUTINE MU_COOR_PARSE(ARG_LIST,L1_DATUM)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_FINE.FOR;1

        SUBROUTINE MU_FINE(IFINE,JFINE,MFINE,NFINE)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_INIT_ARRAYS.FOR;1

      SUBROUTINE MU_INIT_ARRAYS(PIX1,PIX2,SWBITS)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_INIT_SUMBITS.FOR;1

      SUBROUTINE MU_INIT_SUMBITS(SUMBITS)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_KTAB2MOD.FOR;1

	SUBROUTINE MU_KTAB2MOD(KMOD,MODNO)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_L15_TAB_INIT.FOR;1

      SUBROUTINE MU_L15_TAB_INIT

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_L1BITS_TO_OCT.FOR;1

      SUBROUTINE MU_L1BITS_TO_OCT(CCT_WORD,L1OCT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_MAC_INPUT.FOR;1

      SUBROUTINE MU_MAC_INPUT(LMODNO,MACHIT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_MOD_NUM.FOR;1

       SUBROUTINE MU_MOD_NUM(NOCT,KODAT,KODIR)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_OTC_LOOKUP.FOR;1

	SUBROUTINE MU_OTC_LOOKUP(NDX,JOTC,AFINE,NAFINE,BFINE,NBFINE,
C   Subroutine to model the lookups done by the various types of OTC
C-- entry point to set the logical unit numbers for reading
      ENTRY MU_OTC_LUN_SET(LUN_CR21,LUN_CR31,LUN_CR41,LUN_CR51,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_OTC_MGR.FOR;1

      SUBROUTINE MU_OTC_MGR(IREG,NOTC,MGRDAT,NMGRDAT,CCT_LAT_WRD,JBOTC,
C  SUBROUTINE MU_OTC_MGR : SIMULATE OTC MANAGER CARD

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_OTC_SLOT.FOR;1

	SUBROUTINE MU_OTC_SLOT(JOTC,SLOT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_PROGR.FOR;1

      SUBROUTINE MU_PROGR(LUN,PROGR_STATUS)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_SAM_CCT.FOR;1

      SUBROUTINE MU_SAM_CCT(IREG,SAMCC,SAMBITS,SAMTRIG)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_SAM_CCT_SUM.FOR;1

      SUBROUTINE MU_SAM_CCT_SUM(SCC,SAMBITS)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_SAM_CCT_UUU.FOR;1

      SUBROUTINE MU_SAM_CCT_UUU(CC_IN,CC_OUT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_SAM_CCT_XXX.FOR;1

      SUBROUTINE MU_SAM_CCT_XXX(CC_IN,CC_OUT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_SAM_CCT_XY.FOR;1

      SUBROUTINE MU_SAM_CCT_XY(SAMCC,MULT_CUT,QQ)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_SAM_CCT_XYU.FOR;1

      SUBROUTINE MU_SAM_CCT_XYU(CC_IN,MULT_CUT,CC_OUT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_SAM_CCT_YYY.FOR;1

      SUBROUTINE MU_SAM_CCT_YYY(CC_IN,CC_OUT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_SAM_MAC.FOR;1

      SUBROUTINE MU_SAM_MAC(MODNO,MODID,MCRS,MFINE,NFINE)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_SAM_WAM_CABLES.FOR;1

      SUBROUTINE MU_SAM_WAM_CABLES(IREG,IABC,QQ_IN,QQ_OUT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_SAM_WAM_CCT.FOR;1

      SUBROUTINE MU_SAM_WAM_CCT(ICCT,SWCC,SWBITS,SWTRIG,SEGFLG)
      ENTRY MU_SWCCT_SSW(SSW_N,SSW_S)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_SUPERVISOR.FOR;1

      SUBROUTINE MU_SUPERVISOR(L1_ANDOR_STATES, L15_TERM_STATES,
C..   ENTRY points and auxiliar variables
C.. Fill intermediate variables to be passed to ENTRY points
C-- entry point to tell the supervisor crate which trigger regions
      ENTRY MU_TRIG_REG_MASK(TRMASK)
C-- entry point to retrieve the level 1 muon RAW bits calculated earlier
      ENTRY MU_L1_RAW_BITS(L1_BITS)
C-- entry point to retrieve the level 1 muon PHYSICS bits calculated earlier
      ENTRY MU_L1_PHYS_BITS(L1_BITS)
C-- entry point to extract the level 1 trigger OCTANT fired
      ENTRY MU_L1_TRIG_OCT(L1OCT)
C-- TEMPORARY entry point to pass CCT Latch info for Level 2.0 studies
      ENTRY MU_CCT_LATCH(CCTLAT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_SUP_L1.FOR;1

      SUBROUTINE MU_SUP_L1(TREG,CCT_LATCH,MU_RAW_CCT)
C-- Entry point to further skip histograming l1 stuff
      ENTRY SKIP_EVENT (SKIP)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_SUP_L15.FOR;1

	SUBROUTINE MU_SUP_L15(TREG,CCTLAT,MU_RAW_OTC,DELTA_WORDS,
C  Entry point to retrieve the level 1.5 muon RAW bits calculated earlier
      ENTRY MU_L15_RAW_BITS(L15_BITS)
C  Entry point to retrieve the level 1.5 muon PHYSICS bits calculated earlier
      ENTRY MU_L15_PHYS_BITS(L15_BITS)
C Entry point to fill the TRGR bank with the muon trigger data
      ENTRY MU_TRIG_DATA(MWORD,MUON_DATA)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_SWCCT_BOT.FOR;1

      SUBROUTINE MU_SWCCT_BOT(X,Y,U,SWBITS,SSW,SEGFLG)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_SWCCT_TOP.FOR;1

      SUBROUTINE MU_SWCCT_TOP(X,Y,U,SWBITS,SSW,SEGFLG)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_TRIG_CRATE_L1.FOR;1

      SUBROUTINE MU_TRIG_CRATE_L1(IREG,JBCCT,CCT_LATCH)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_TRIG_CRATE_L15.FOR;1

	SUBROUTINE MU_TRIG_CRATE_L15(IREG,CCT_LATCH,MGRDATA,NMGRDAT)
C-- entry point to extract the level 1.5 trigger OCTANT fired
      ENTRY MU_L15_TRIG_OCT(L15_OCT)
        ENTRY MU_OTC_CCTMAT_SET(CCTMAT_UNIT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_TRIG_MON.FOR;1

      SUBROUTINE MU_TRIG_MON(L1_MUON_BITS,L15_MUON_BITS,
C-   Updated   5-NOV-1992   Guilherme Lima   - Implemented init entry point
C  Entry point to initialize the TRIG MON table for L1.5
	ENTRY MU_TRIG_MON_INIT_L15(OUTBIT,MUCOUNT,REQ_MASK)
C  Entry point to initialize the TRIG MON table for L1.0
	ENTRY MU_TRIG_MON_INIT_L1(OUTBIT,MUCOUNT,REQ_MASK)
C  Entry point to disable trigger regions not used in this run
	ENTRY MU_TRREG_DISBL

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_TRIG_REGION.FOR;1

      SUBROUTINE MU_TRIG_REGION(THETA,PHI,IOCT,TRREG)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_TRIG_SECT.FOR;1

      SUBROUTINE MU_TRIG_SECT(IMOD,IDIR,ISECT,MODS)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_WAM_CCT.FOR;1

      SUBROUTINE MU_WAM_CCT(ICCT,ACRS,BCRS,CCRS,JTRIG,JBITS)
C  Subroutine to test a list of hit modules for a CCT trigger

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_WAM_CEN_B.FOR;1

      SUBROUTINE MU_WAM_CEN_B(MCELL,I,MCENT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_WAM_CEN_C.FOR;1

      SUBROUTINE MU_WAM_CEN_C(MCELL,I,MCENT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_WAM_CEN_CFA.FOR;1

      SUBROUTINE MU_WAM_CEN_CFA(MCELL,I,MCENT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_WAM_CEN_EFA.FOR;1

      SUBROUTINE MU_WAM_CEN_EFA(MCELL,I,MCENT)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_WAM_MAC.FOR;1

      SUBROUTINE MU_WAM_MAC(MODNO,MODID,MACHIT,MCRS,MFINE,NFINE)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]MU_WAM_OTC.FOR;1

	SUBROUTINE MU_WAM_OTC(III,AFINE,NAFINE,BFINE,NBFINE,CFINE,NCFINE,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]PRCTTR.FOR;1

      SUBROUTINE PRCTTR(PRUNIT,LCTTRI,NCTTRI,CFL,IFL)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]PROM_RESPONSES.FOR;1

      SUBROUTINE   PROM_RESPONSES ( SIGN_ETA, MAGN_ETA, PHI, 
C-                         The subroutine will return a zero in any value for

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]PRTRGR.FOR;1

      SUBROUTINE PRTRGR (PRUNIT,LTRGR,NTRGR,CFL,IFL)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]RANGE_CHECK.FOR;1

      SUBROUTINE RANGE_CHECK (ETA1, ETA2, ETA_SIGN, PHI1, PHI2, ERR)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]READ_LSO_MINIMAL.FOR;1

      SUBROUTINE READ_LSO_MINIMAL(UNIT_NUM, FILE_NAME, ERROR)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]READ_NEW_LINE.FOR;1

      SUBROUTINE READ_NEW_LINE (LUN, LINE_NUM, LINE, LENGTH, ERR)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]SAMCEN_CHSEL.FOR;1

      SUBROUTINE SAMCEN_CHSEL(nxfine,xfine,layer,card,port,
	ENTRY SAMCEN_CHSEL_LUN_SET(LUN_SCN,LUN_SCS)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]SAMCEN_CONSEC.FOR;1

      SUBROUTINE SAMCEN_CONSEC(nxfine,xfine,layer,card,port,
        ENTRY SAMCEN_CONSEC_LUN_SET(LUN_CONSEC1,LUN_CONSEC2)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]SECTION.FOR;1

      SUBROUTINE SECTION (LINE, LENGTH, SECTION_ID, ARGUMENT, ERR)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]SIMUL_LEVEL0.FOR;1

      SUBROUTINE SIMUL_LEVEL0 ( Z_VERTEX, L0_BIN, L0_VALID)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]SIM_FILL_L1.FOR;1

      SUBROUTINE SIM_FILL_L1(NTRIG_S)
C-   Adapted  28-FEB-1994   Wagner Carvalho   from subroutine TRGR.FOR

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]SINGLE_RANGE.FOR;1

      SUBROUTINE SINGLE_RANGE (LINE, LENGTH, PNTR, I1, I2, ERR)

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]TOWER_THRESHOLD_TRANSLATION.FOR;1

      SUBROUTINE   TOWER_THRESHOLD_TRANSLATION ( 

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]WHAT_TO_DO.FOR;1

      SUBROUTINE WHAT_TO_DO (LUN, LINE_NUM,

******************************
D0$LEVEL1$ROOT:[000000.SOURCE]WHICH_TRIGGER_TOWER.FOR;1

      SUBROUTINE WHICH_TRIGGER_TOWER (IETAC, IPHIC, LAYERC,
