
UnStick_DSPs   IDNT                      ; Title of the routine to clear a
                                         ; hung L15CT cycle.

      SECTION   Sect_UnStick_DSPs,4,C    ; Declare a noncommon code section.
                                         ; Align to Longwords.

****************************************************************************
*                                                                          *
*  Un-Stick DSP's  Routine                             Rev. 21-JUNE-1994   *
*                                                                          *
*  This is a routine to "un-stick" the DSP.  This routine is called if in  *
*  Thats_Me_Processing  the Global DSP never reaches Step D3, i.e. if the  *
*  Global DSP never reports back with its answers for the L15CT Terms that *
*  needed to be evaluated.  This routine is called by a JMP because we     *
*  will not be returning to the Thats_Me_Processing routine.               *
*                                                                          *
*  This routine sends an IIOF2 interrupt to all 12 DSP's.                  *
*  Then it checks that all 12 DSP's are at Step D0.                        *
*  Then it increments an error counter and sends a message to the console. *
*  Then it cleans up some Software Flags and jumps to Orbit Master.        *
*                                                                          *
****************************************************************************


***************************************************************************
*                                                                         *
*  First send an  IIOF2 Interrupt  to each of the 12 DSP's.               *
*                                                                         *
***************************************************************************

Begin_UnStick_DSPs:

        Move.L    #DSP_A1_ICR,A1         ; Put DSP #A1 Interrupt Control Reg
        JSR       Generate_IIOF2         ; Addrs in A1.  Send IIOF2 to DSP A1.

        Move.L    #DSP_A2_ICR,A1         ; Put DSP #A2 Interrupt Control Reg
        JSR       Generate_IIOF2         ; Addrs in A1.  Send IIOF2 to DSP A2.

        Move.L    #DSP_A3_ICR,A1         ; Put DSP #A3 Interrupt Control Reg
        JSR       Generate_IIOF2         ; Addrs in A1.  Send IIOF2 to DSP A3.

        Move.L    #DSP_A4_ICR,A1         ; Put DSP #A4 Interrupt Control Reg
        JSR       Generate_IIOF2         ; Addrs in A1.  Send IIOF2 to DSP A4.

        Move.L    #DSP_B1_ICR,A1         ; Put DSP #B1 Interrupt Control Reg
        JSR       Generate_IIOF2         ; Addrs in A1.  Send IIOF2 to DSP B1.

        Move.L    #DSP_B2_ICR,A1         ; Put DSP #B2 Interrupt Control Reg
        JSR       Generate_IIOF2         ; Addrs in A1.  Send IIOF2 to DSP B2.

        Move.L    #DSP_B3_ICR,A1         ; Put DSP #B3 Interrupt Control Reg
        JSR       Generate_IIOF2         ; Addrs in A1.  Send IIOF2 to DSP B3.

        Move.L    #DSP_B4_ICR,A1         ; Put DSP #B4 Interrupt Control Reg
        JSR       Generate_IIOF2         ; Addrs in A1.  Send IIOF2 to DSP B4.

        Move.L    #DSP_C1_ICR,A1         ; Put DSP #C1 Interrupt Control Reg
        JSR       Generate_IIOF2         ; Addrs in A1.  Send IIOF2 to DSP C1.

        Move.L    #DSP_C2_ICR,A1         ; Put DSP #C2 Interrupt Control Reg
        JSR       Generate_IIOF2         ; Addrs in A1.  Send IIOF2 to DSP C2.

        Move.L    #DSP_C3_ICR,A1         ; Put DSP #C3 Interrupt Control Reg
        JSR       Generate_IIOF2         ; Addrs in A1.  Send IIOF2 to DSP C3.

        Move.L    #DSP_C4_ICR,A1         ; Put DSP #C4 Interrupt Control Reg
        JSR       Generate_IIOF2         ; Addrs in A1.  Send IIOF2 to DSP C4.


***************************************************************************
*                                                                         *
*  Now check to see that all DSP's are at Step D0.                        *
*                                                                         *
***************************************************************************


Wait_A1   Move.L  LDSP_A1_Status_Adrs,D4          ; Read the current status of
          IF.W    D4 <NE> #LDSP_at_D0  THEN.S     ; DSP  A1.  If it is not at
             JMP  Wait_A1                         ; Step D0 then wait for it
          ENDI                                    ; to reach Step D0.

Wait_A2   Move.L  LDSP_A2_Status_Adrs,D4          ; Read the current status of
          IF.W    D4 <NE> #LDSP_at_D0  THEN.S     ; DSP  A2.  If it is not at
             JMP  Wait_A2                         ; Step D0 then wait for it
          ENDI                                    ; to reach Step D0.

Wait_A3   Move.L  LDSP_A3_Status_Adrs,D4          ; Read the current status of
          IF.W    D4 <NE> #LDSP_at_D0  THEN.S     ; DSP  A3.  If it is not at
             JMP  Wait_A3                         ; Step D0 then wait for it
          ENDI                                    ; to reach Step D0.

Wait_A4   Move.L  LDSP_A4_Status_Adrs,D4          ; Read the current status of
          IF.W    D4 <NE> #LDSP_at_D0  THEN.S     ; DSP  A4.  If it is not at
             JMP  Wait_A4                         ; Step D0 then wait for it
          ENDI                                    ; to reach Step D0.


Wait_B1   Move.L  LDSP_B1_Status_Adrs,D4          ; Read the current status of
          IF.W    D4 <NE> #LDSP_at_D0  THEN.S     ; DSP  B1.  If it is not at
             JMP  Wait_B1                         ; Step D0 then wait for it
          ENDI                                    ; to reach Step D0.

Wait_B2   Move.L  GDSP_B2_Status_Adrs,D4          ; Read the current status of
          IF.W    D4 <NE> #GDSP_at_D0  THEN.S     ; DSP  B2.  If it is not at
             JMP  Wait_B2                         ; Step D0 then wait for it
          ENDI                                    ; to reach Step D0.

Wait_B3   Move.L  LDSP_B3_Status_Adrs,D4          ; Read the current status of
          IF.W    D4 <NE> #LDSP_at_D0  THEN.S     ; DSP  B3.  If it is not at
             JMP  Wait_B3                         ; Step D0 then wait for it
          ENDI                                    ; to reach Step D0.

Wait_B4   Move.L  LDSP_B4_Status_Adrs,D4          ; Read the current status of
          IF.W    D4 <NE> #LDSP_at_D0  THEN.S     ; DSP  B4.  If it is not at
             JMP  Wait_B4                         ; Step D0 then wait for it
          ENDI                                    ; to reach Step D0.


Wait_C1   Move.L  LDSP_C1_Status_Adrs,D4          ; Read the current status of
          IF.W    D4 <NE> #LDSP_at_D0  THEN.S     ; DSP  C1.  If it is not at
             JMP  Wait_C1                         ; Step D0 then wait for it
          ENDI                                    ; to reach Step D0.

Wait_C2   Move.L  LDSP_C2_Status_Adrs,D4          ; Read the current status of
          IF.W    D4 <NE> #LDSP_at_D0  THEN.S     ; DSP  C2.  If it is not at
             JMP  Wait_C2                         ; Step D0 then wait for it
          ENDI                                    ; to reach Step D0.

Wait_C3   Move.L  LDSP_C3_Status_Adrs,D4          ; Read the current status of
          IF.W    D4 <NE> #LDSP_at_D0  THEN.S     ; DSP  C3.  If it is not at
             JMP  Wait_C3                         ; Step D0 then wait for it
          ENDI                                    ; to reach Step D0.

Wait_C4   Move.L  LDSP_C4_Status_Adrs,D4          ; Read the current status of
          IF.W    D4 <NE> #LDSP_at_D0  THEN.S     ; DSP  C4.  If it is not at
             JMP  Wait_C4                         ; Step D0 then wait for it
          ENDI                                    ; to reach Step D0.


******  OK, we have verified that all 12 DSP's are at Step D0, so  ******
******  SET the  All_DSPs_at_Step_D0  software flag.               ******

        Move.B  #Flag_SET,All_DSPs_at_Step_D0   ; SET the  All_DSPs_at_Step_D0
                                                ; software flag.


***************************************************************************
*                                                                         *
*  Always clear the software flag that requests and MFP transfer.         *
*                                                                         *
***************************************************************************

        Clr.B   If_Transfer_Want_MFP_Transfer       ; CLEAR Want MFP Transfer.


***************************************************************************
*                                                                         *
*  Increment a counter that shows how often the DPS's have been un-stuck  *
*  by this routine and put a message on the L15CT 68k console.            *
*                                                                         *
***************************************************************************


***************************************************************************
*                                                                         *
*  Return to the Orbit Master.                                            *
*                                                                         *
***************************************************************************

        JMP      Begin_Orbit_Master         ; Jump to the start of Orbit Master




***************************************************************************
*                                                                         *
*   This is the routine to generate an IIOF2 Interrupt to the DSP with    *
*   the address of its Interrupt Control Register in Adrs Reg A1.         *
*                                                                         *
***************************************************************************

Generate_IIOF2:
                                        ; Set the Interrupt Control Register
        Move.L  #Gen_IIOF2,(A1)         ; of the target DSP to generate an
                                        ; IIOF2 interrupt.

        Move.L  #Default_ICR,(A1)       ; Set the Interrupt Control Register of
                                        ; the target DSP to its default value.
        RTS



*************************************************************************
*  Define Constants:                                                    *
*                                                                       *
*                                                                       *
*************************************************************************

                   ALIGN   4                ; Align to longword address.


Gen_IIOF2      EQU   $00000014          ; Enable IIOF2 and connect it to GND.
                                        ; Disable NMI.

Default_ICR    EQU   $00000004          ; Enable IIOF2 and connect it to the
                                        ; push button.  Disable NMI.


*************************************************************************
*                                                                       *
*  Constants Section                                                    *
*                                                                       *
*************************************************************************

      XDEF   Begin_UnStick_DSPs                      ; Symbol exported to
                                                     ; other modules.

      ; Symbols used in this module but defined in another program module.

      XREF    DSP_A1_ICR,DSP_A2_ICR,DSP_A3_ICR,DSP_A4_ICR
      XREF    DSP_B1_ICR,DSP_B2_ICR,DSP_B3_ICR,DSP_B4_ICR
      XREF    DSP_C1_ICR,DSP_C2_ICR,DSP_C3_ICR,DSP_C4_ICR

      XREF    LDSP_A1_Status_Adrs,LDSP_A2_Status_Adrs
      XREF    LDSP_A3_Status_Adrs,LDSP_A4_Status_Adrs
      XREF    LDSP_B1_Status_Adrs
      XREF    LDSP_B3_Status_Adrs,LDSP_B4_Status_Adrs
      XREF    LDSP_C1_Status_Adrs,LDSP_C2_Status_Adrs
      XREF    LDSP_C3_Status_Adrs,LDSP_C4_Status_Adrs

      XREF    GDSP_B2_Status_Adrs

      XREF    Flag_SET
      XREF    All_DSPs_at_Step_D0
      XREF    If_Transfer_Want_MFP_Transfer

      XREF    Begin_Orbit_Master

      XREF    LDSP_at_D0
      XREF    GDSP_at_D0


      END

