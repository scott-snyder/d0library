 22-JAN-1990 : Modifications released by Stephen Adler
 
    - First stage in modificiations for the program builder

        There are no more parameters, now all information is entered via
    qualifiers. Three new qualifiers have been added.

                /packages     Takes the place of the only parameter

                /[NO]compile  {Default /compile}, tells the program builder
                              to compile the interface routine.

                /[NO]edit     {Default /noedit}, tells the program builder to
                              edit the linking file.



==============================================================================

 30-JAN-1990 : Modifications released by Steve Adler
 
    - As a part of the first stage of modifications for the program builder,
      the flags which are provided by the General library have now been
      abandond for a new set of built in flags.

    The new built in flags, which turn on and off calls to the various HOOK
    routine, are now kept in a local command block called the PBD_COMMON. The
    description of this common block will not be made for no one should access
    this common block directly. Instead, three routines have been added which
    allow one to access and modifiy the values of the flags.

        Each flag, which turns on and off the calls to the HOOK routines has a
    name. This flag name is just the same as that of the package which defines
    the HOOK routine. The flag name must not be more than 32 characters long.
    The flag contains a logical value which you can modify. A true value for
    the flag will indicate that the HOOK routine is to be called. A false
    value will indicate that the HOOK routine is not to be called.

        These new flag routines are the following.


    SETTING THE FLAG VALUE:

        LOGICAL FUNCTION PBD_SET_FLAG(flage_name,flag_value)

        flag_name : character; Name of the flag which will be set or cleared.

        flag_value : Logical; value assigned to the flag.

        Return Value: PBD_SET_FLAG will return a .TRUE. value if the specified
    flag was found. A return value of .FALSE. indicates that the specified
    flag was not found.

        The logical function PBD_SET_FLAG() will set the value of the flag to
    the contents of the FLAG_VALUE variable. This function will return a
    .TRUE. value if the specified flag was found. It will return a .FALSE.
    value if the specified flag was not found.


    GETTING THE FLAG VALUE:

        LOGICAL FUNCTION PBD_GET_FLAG(flage_name,flag_value)

        flag_name : character; Name of the flag which will be set or cleared.

        flag_value : Logical; value assigned to the flag.

        Return Value: PBD_SET_FLAG will return a .TRUE. value if the specified
    flag was found. A return value of .FALSE. indicates that the specified
    flag was not found.

        The logical function PBD_GET_FLAG() will return the value of the flag
    specified by FLAG_NAME as the contents of the variable FLAG_VALUE.
    PBD_GET_FLAG() will return a .TRUE. value if the flag was found. The
    function will return the value of .FALSE. if the flag was not found. When
    the flag is not found, the contents of FLAG_VALUE are undefined.


    DUMPING THE CONTENTS OF THE FLAGS:

        SUBROUTINE PBD_DUMP_FLAGS()

        Parameters : NONE

        Return value : NONE

        This subroutine will print out the name of all the flags and their
    current value of TRUE or FALSE. This routine does not use the compack
    interface. Unpreditable results may occure if one uses this routine in
    conjunction with the COMPACK interface. This routine is ment to be a
    debugging tool.

