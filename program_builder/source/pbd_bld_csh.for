      SUBROUTINE PBD_BLD_CSH
C----------------------------------------------------------------------
C-
C-   Purpose and Methods : This routine generates the UNIX Setup Script file
C-                         from the RCP file names provided in package PBD
C-                         files.
C-
C-   Inputs  :
C-   Outputs :
C-   Controls: Common error flag ERROR_FLAG
C-            ( .TRUE. if fatal error, .FALSE. if no error )
C-
C-   Modules called by this routine:  PBD_MSG, PBD_PARSE_FILE
C-
C-   Based on the PASCAL procedure Build_Setup_File of the old
C-   Program Builder.
C-
C-
C-   Created  10-Jan-1994   Herbert Greenlee (from C. Silva)
C-      Adapted from PBD_BLD_COM.FOR
C-
C----------------------------------------------------------------------
      IMPLICIT NONE
C----------------------------------------------------------------------
      INCLUDE 'D0$PROGRAM_BUILDER$INC:PBD_COMMON.INC'
 
      INTEGER*4     STATUS              ! ERROR RETURN STATUS
      INTEGER*2     FILE_NAME_LEN       ! FILE NAME LENGTH
      INTEGER*2     EQU_NAME_LEN        ! EQU NAME  LENGHT
      INTEGER*2     NODE_LEN            ! NODE NAME LENGTH
      INTEGER*2     DEV_LEN             ! DEVICE NAME LENGTH
      INTEGER*2     DIR_LEN             ! DIRECOTRY SPEC STRING LENGTH
      INTEGER*2     TYPE_LEN            ! FILE TYPE STRING LENGTH
      INTEGER*2     NUMLOG              ! NUMBER OF RCP LOGICALS
      INTEGER*2     OFFSET              ! OFFSET TO LOG_NAME TABLE
      INTEGER*2     LENGTH              ! STRING LENGTH
      INTEGER*2     LOC_OPT_LEN         ! LOCAL RCP OPTION STRING LENGTH
      INTEGER*2     RCP_TYPE_LEN(20)    ! RCP TYPE NAME STRING LENGTH
      INTEGER*2     OPT_POS             ! RCP OPTION WORD POSITION
      INTEGER*2     NUM_TYPE            ! # OF RCP OPTIONS
      INTEGER*4     I, J , POS ,INTC    ! INDEX VARIABLES
 
      CHARACTER*132 LINE                ! LINE BUFFER
      CHARACTER*80  ERROR_BUF(2)        ! ERROR MESSAGES
      CHARACTER*80  MSG_BUF             ! MESSAGE BUFFER
      CHARACTER*80  FILE_NAME           ! FILE NAME TO OPEN
      CHARACTER*80  DEF_DIR             ! CURRENT DEFAULT DIRECTORY SPEC
      CHARACTER*80  HEADER (6)          ! FILE HEADER MESSAGE
      CHARACTER*80  RCP_HDR (15)        ! RCP COMMAND LINES
      CHARACTER*33  MESSAGE             ! MESSAGE STRING
      CHARACTER*80  FILE_SPEC           ! FILE SPECIFICATION TO PARSE
      CHARACTER*80  NODE_NAME           ! NODE NAME
      CHARACTER*80  DEV_NAME            ! DEVICE NAME
      CHARACTER*80  DIR_NAME            ! DIRECTORY SPECIFICATION
      CHARACTER*20  FILE_TYPE           ! FILE TYPE
      CHARACTER*80  EQU_NAME            ! EQUIVALENCE NAME FOR RCP LOGICALS
      CHARACTER*80  LOC_OPT             ! LOCAL RCP TYPE STRING
      CHARACTER*32  RCP_TYPE(20)        ! LOCAL RCP TYPE STRING TABLE
      CHARACTER*32  OPT_WORD            ! RCP OPTION WORD
      CHARACTER*1   COMMA               ! COMMA
      LOGICAL       RET_FLAG            ! PARSE RETURN STATUS FLAG
      LOGICAL       OPENED              ! OPEN STATUS
      INTEGER       LENOCC
 
      DATA COMMA /','/
      DATA MESSAGE /'-- Building Setup Command Script '/
      DATA ERROR_BUF /
     &     '-E-File Open error for ',
     &     '-W-RCP file specification error in '/
      DATA HEADER /
     &'#******************************************************!',
     &'#     Generated by the Program Builder                 !',
     &'#     It defines a set of logical names for the        !',
     &'#     Run Control Parameters files associated with     !',
     &'#     the combined packages.                           !',
     &'#!/bin/csh -f '/
 
      DATA RCP_HDR /
     &'set  RCP_TYPE = $4 ',
     &'if ($RCP_TYPE != '''') goto CHECK_RCP_TYPE',
     &'GET_RCP_TYPE:',
     &'echo -n "Do you wish  ',
     &'set RCP_TYPE = `line | tr "[a-z]" "[A-Z]"` ',
     &'CHECK_RCP_TYPE:',
     &'if ($RCP_TYPE ==  '''' || $RCP_TYPE == ''DT'')\',
     &'   set RCP_TYPE = ''DEFAULT''',
     &'if ($RCP_TYPE == ''DEFAULT'')  goto DEFINE_RCP',
     &'echo " Invalid type "',
     &'goto GET_RCP_TYPE',
     &'#',
     &'DEFINE_RCP:',
     &'echo " Setting RCP file type to $RCP_TYPE "',
     &'#'/
 
C
C     Send informational message
C
      MSG_BUF = MESSAGE//FOR_FILE_NAME(1:FOR_FILE_LEN)//'.csh'
      CALL PBD_MSG ( MSG_BUF )
C
C     Open PBD COM file
C
      FILE_NAME = FOR_FILE_NAME(1:FOR_FILE_LEN)//'.csh'
      CALL D0OPEN(8, FILE_NAME, 'OFL', OPENED)
 20   IF ( .NOT.OPENED ) THEN    ! Open error
        MSG_BUF = ERROR_BUF(1)(1:23)//FILE_NAME
        ERROR_FLAG = .TRUE.
        CALL PBD_MSG ( MSG_BUF )
        RETURN
      END IF
C
C     Write a header for .csh file being generated
C
      WRITE (8,100) HEADER(6)(1:LENOCC(HEADER(6)))
      WRITE (8,100) HEADER(1)(1:LENOCC(HEADER(1)))
100   FORMAT ( A )
      OUTLINE = '#     '//'File Name : '//FILE_NAME
      OUTLINE(57:57) = '!'
      WRITE (8,100) OUTLINE(1:LENOCC(OUTLINE))
      WRITE (8,100) (HEADER(I)(1:LENOCC(HEADER(I))),I=2,5)
 
      OUTLINE = '# '//DATE_TIME(3: )
      OUTLINE(57:57) = '!'
      WRITE (8,100) OUTLINE(1:LENOCC(OUTLINE))
      WRITE (8,100) HEADER(1)(1:LENOCC(HEADER(1)))
C
C     Determine RCP option string
C
      LOC_OPT = ' '
      LOC_OPT_LEN = 0
      NUM_TYPE = 0
 
      DO I = 1, NUMRCP
        IF ( RCP_OPT_LEN(I) .GT. 0 ) THEN
          J = 1
          DO WHILE ( J .LE. RCP_OPT_LEN(I))
            OPT_POS = INDEX( RCP_OPT(I)(J:RCP_OPT_LEN(I)),COMMA)
            IF (OPT_POS .GT. 0 ) THEN
              OPT_WORD = RCP_OPT(I)(J:J+OPT_POS-2)
              OPT_POS =  OPT_POS - 1
            ELSE
              OPT_WORD = RCP_OPT(I)(J:RCP_OPT_LEN(I))
              OPT_POS = RCP_OPT_LEN(I) - J + 1
            END IF
 
            IF ( OPT_POS .GT. 0 .AND.
     &           INDEX ( LOC_OPT, OPT_WORD(1:OPT_POS) ) .EQ. 0 ) THEN
              IF ( LOC_OPT_LEN .GT. 0 ) THEN
                LOC_OPT = LOC_OPT(1:LOC_OPT_LEN)//COMMA//' '//OPT_WORD
                LOC_OPT_LEN = LOC_OPT_LEN + 2 + OPT_POS
              ELSE
                LOC_OPT = OPT_WORD
                LOC_OPT_LEN = OPT_POS
              END IF
              NUM_TYPE = NUM_TYPE + 1
              RCP_TYPE (NUM_TYPE) = OPT_WORD
              RCP_TYPE_LEN (NUM_TYPE) = OPT_POS
            END IF
            J = J + OPT_POS + 1
          END DO
        END IF
      END DO
C
C     Check if RCP file type is defined. If so, add inquire commad lines
C
      WRITE (8,100) (RCP_HDR(I)(1:LENOCC(RCP_HDR(I))),I=1,3)
      IF ( LOC_OPT_LEN .GT. 0 ) THEN
        WRITE (8,100) RCP_HDR(4)(1:21)//LOC_OPT(1:LOC_OPT_LEN)//
     &                ' or default RCP file? [Default]: "'
        WRITE (8,100) (RCP_HDR(I)(1:LENOCC(RCP_HDR(I))),I=5,9)
 
        DO I = 1, NUM_TYPE
          WRITE (8,100) RCP_HDR(7)(1:19)//RCP_TYPE(I)(1:RCP_TYPE_LEN(I))
     &                  //''')  goto DEFINE_RCP'
        END DO
        WRITE (8,100) ( RCP_HDR(I)(1:LENOCC(RCP_HDR(I))),I=10,15)
 
      END IF
 
      DO I = 1, NUMRCP             ! For each RCP file
C
C         Check if the RCP file specification is valid
C
        FILE_SPEC = RCP_FILE(I)
        CALL PBD_PARSE_FILE ( FILE_SPEC, NODE_NAME, NODE_LEN,
     &      DEV_NAME, DEV_LEN,DIR_NAME,DIR_LEN,FILE_NAME,
     &      FILE_NAME_LEN,FILE_TYPE,TYPE_LEN, RET_FLAG )
C
C       Check PARSE return status
C
        IF ( .NOT. RET_FLAG ) THEN  ! No error
C
C         Define RCP logical name
C
          DO POS = 1,FILE_NAME_LEN
            IF ( LGE(FILE_NAME(POS:POS),'A') .AND.
     &            LLE(FILE_NAME(POS:POS),'Z') ) THEN
              INTC = IBSET(ICHAR(FILE_NAME(POS:POS)),5)
              FILE_NAME(POS:POS) = CHAR(INTC)
            ENDIF
          ENDDO
 
          LINE ='ln -sf `vff ''' //RCP_FILE(I)(1:RCP_FILE_LEN(I))
     &     //''' `   '//FILE_NAME(1:FILE_NAME_LEN)//'_rcp '
          LENGTH = 13 + FILE_NAME_LEN + 7 + RCP_FILE_LEN(I)+4
          WRITE (8,100) LINE(1:LENGTH)
 
        ELSE
C
C         RCP file specification error, output warning message
C
          MSG_BUF = ERROR_BUF(2)(1:36)//RCP_FILE(I)
          CALL PBD_MSG(MSG_BUF)
        END IF
 
      END DO
 
      WRITE (8,100)'#'
 
C
C     If RCP option specified, add prefix 'RCP_TYPE' to the
C     RCP file name and redefine the RCP logicals
C
      DO J = 1, NUM_TYPE
        LINE = 'if ($RCP_TYPE == '''//RCP_TYPE(J)
     &         (1:RCP_TYPE_LEN(J))//''')'//' then'
        LENGTH = 21 + RCP_TYPE_LEN(J) + 5
        WRITE (8,100) LINE(1:LENGTH)
 
        DO I = 1, NUMRCP
          IF ( RCP_OPT_LEN(I) .GT. 0 ) THEN
            IF ( INDEX ( RCP_OPT(I),RCP_TYPE(J)
     &         (1:RCP_TYPE_LEN(J)) ) .GT. 0 ) THEN
              FILE_SPEC = RCP_FILE(I)
              CALL PBD_PARSE_FILE ( FILE_SPEC, NODE_NAME, NODE_LEN,
     &        DEV_NAME, DEV_LEN,DIR_NAME,DIR_LEN,FILE_NAME,
     &        FILE_NAME_LEN,FILE_TYPE,TYPE_LEN, RET_FLAG )
C
C             Check PARSE return status
C
              IF ( .NOT. RET_FLAG ) THEN  ! No error
 
                IF ( TYPE_LEN .EQ. 1 ) TYPE_LEN = 0
                LENGTH = RCP_FILE_LEN(I) - ( FILE_NAME_LEN +
     &                 TYPE_LEN )
 
                EQU_NAME = RCP_FILE(I)(1:LENGTH)//RCP_TYPE(J)
     &               (1:RCP_TYPE_LEN(J))//'_' //
     &               RCP_FILE(I)(LENGTH+1:RCP_FILE_LEN(I))
                EQU_NAME_LEN = RCP_TYPE_LEN(J) + 1 + RCP_FILE_LEN(I)
 
                DO POS = 1,FILE_NAME_LEN
                  IF ( LGE(FILE_NAME(POS:POS),'A') .AND.
     &                LLE(FILE_NAME(POS:POS),'Z') ) THEN
                    INTC = IBSET(ICHAR(FILE_NAME(POS:POS)),5)
                    FILE_NAME(POS:POS) = CHAR(INTC)
                  ENDIF
                ENDDO
 
 
                LINE ='  ln -sf `vff '''//EQU_NAME(1:EQU_NAME_LEN)//
     &          ''' `   '//FILE_NAME(1:FILE_NAME_LEN)//'_rcp '
 
                LENGTH = 16 + FILE_NAME_LEN + 5 + RCP_TYPE_LEN(J)
     &                   + 1 + RCP_FILE_LEN(I)+5
                WRITE (8,100) LINE(1:LENGTH)
              END IF
            END IF
          END IF
        END DO
 
        WRITE (8,100)'endif'
        WRITE (8,100)'#'
 
      END DO
C
C     Get the default directory name
C
      FILE_SPEC = '[]'
      CALL PBD_PARSE_FILE ( FILE_SPEC, NODE_NAME, NODE_LEN,
     &  DEV_NAME, DEV_LEN,DIR_NAME,DIR_LEN,FILE_NAME,
     &  FILE_NAME_LEN,FILE_TYPE,TYPE_LEN, RET_FLAG )
 
      DEF_DIR = DEV_NAME(1:DEV_LEN)//DIR_NAME(1:DIR_LEN)
 
      OUTLINE = 'set argv = ( '//DEF_DIR(3:DEV_LEN+DIR_LEN)//
     &           COMBINED_NAME(1:COMBINED_LEN)//
     &           ' "$1"  "$2"  "$3"  "$RCP_TYPE" )'
      WRITE(8,100) OUTLINE(1:LENOCC(OUTLINE))
 
      OUTLINE ='if ( -f `vff '''//'D0$'//FRAME_NAME(1:FRAME_LEN)//
     &         ':'//FRAME_NAME(1:FRAME_LEN)//
     &           '_SETUP.csh'' `) \ '
      WRITE(8,100) OUTLINE(1:LENOCC(OUTLINE))
      OUTLINE ='source `vff ''D0$'//FRAME_NAME(1:FRAME_LEN)//
     &         ':'//FRAME_NAME(1:FRAME_LEN)//
     &           '_SETUP.csh '' `'
      WRITE(8,100) OUTLINE(1:LENOCC(OUTLINE))
 
      CLOSE(8)
 
      RETURN
      END
