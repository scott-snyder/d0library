                     PROGRAM BUILDER REFERENCE GUIDE
                     ===============================

                                                    Hyon-Joo Kehayias
                                                    Created July 17, 1992
                                                    Modified Nov. 4, 1993

1.  OVERVIEW
    --------

    The main function of the Program Builder is to automatically generate  
a FORTRAN program according to the definitions provided by the framework and
package description files.  The framework description file defines a set of 
routine names called hooks and specific actions to be taken for these hooks.
The package description file provides a set of user interface routine names, 
each of these corresponds to one of the hooks defined in the framework file.
The package description file also includes the link objects and object 
libraries that the subroutines in the package to be linked with and RCP files
being used by the package.
  
    The FORTRAN program generated by the Program Builder is used by the 
framework software.  The framework software includes calls to the hooks 
defined in the framework file and the Program Builder generates the actual
FORTRAN routines with these hooks. The Program Builder reads the framework and
package files and generates the following FORTRAN subroutines and 
functions:  a logical function for each hook provided by the framework file.
These logical functions are named after the hook names.  In each logical 
function it calls the user interface routine and checks the return status of
the interface routine. If the interface routine returns an error, then the 
action defined by the framework file is taken - skip, ignore or abort.  
A PBD initialization subroutine - this routine includes code to initialize 
common block variables used by the program being generated. A run-time switch 
functions to turn on/off any package during the framework software run.  And 
the D0 common block initialization routines when any common block sizes are
changed by the Program Builder option. 

    The Program Builder also generates a link and option files. The link file 
includes all OBJ and OPT files needed to link the framework software with the
program being generated.  The link file is generated by attaching the names of 
the object and option files being created to the framework link file template.
The option file lists all user objects and object libraries defined by the 
package files.  This option file is used by the link file when the framework
software executables are generated.  Additional files generated by the Program
Builder are a command and object files.  The command file assigns DCL 
logical names to all RCP files used by the packages and includes commands to
execute the framework setup command file.  The object files are the compiled
object code of the FORTRAN program. 



2.  MODULE DESCRIPTION
    ------------------

    The Program Builder is written in FORTRAN and consisted of the following    
modules -  PBD, PBD_BLD_COM,  PBD_BLD_INIT, PBD_BLD_LINK, PBD_CHK_DUP,
PBD_COMMAND,  PBD_COMPILE, PBD_FATMEN_DUMMIES, PBD_FILE_OK,  PBD_FLAGS, 
PBD_GET_COM,  PBD_HSTRFL, PBD_HST_BANK,  PBD_INIT_COM,  PBD_INIT_CONST,  
PBD_INTERFACE,  PBD_IS_VALID,  PBD_MSG,  PBD_NEXT_WORD,  PBD_PARSE_FILE,
PBD_READ_FILE,  PBD_READ_PACK,  PBD_REM_BLANK,  PBD_SWITCH,  PBD_UP_CASE
and PBD_CHK_PACK.  The following sections describe each module in detail.


2.01  PBD

PBD is the main program.  It calls PBD_INIT_COM to initialize the common
block data area.  The common block data is defined in the PBD_COMMON.INC file
and is used to pass data among various modules.  The run-time parameters ( PBD
command qualifiers ) are parsed by calling PBD_COMMAND module.  If the history
routine only flag ( HSTRFL ) is set, then the module PBD_HSTRFL is called.
Otherwise the master hook name file, combined package file, and framework file
are read in by calling PBD_READ_FILE.  The package files are read in by 
PBD_READ_PACK module.  Then package initialization FORTRAN code is generated 
by PBD_BLD_INIT and package switch function code by PBD_SWITCH.  The package
user interface code is generated by PBD_INTERFACE and the flag routines code by
PBD_FLAGS module.  The generated FORTRAN code is compiled if the COMPILE option 
is specified.  The package .LNK file is generated by calling PBD_BLD_LINK and 
the .COM file by PBD_BLD_COM module.  If any error returned by the subroutine 
calls, the program is terminated without further processing.


2.02 PBD_BLD_COM

PBD_BLD_COM generates the package .COM file.  The package .COM file contains the
logical symbol definition for each RCP file name defined in the package files.
It generates a DCL command to define RCP logical and writes to the .COM file.
When an RCP file entry "d0$util:test.rcp" is defined in an input package file,
then a line "$define test_rcp d0$util:test.rcp" is written in the .COM file.

2.03 PBD_BLD_CSH
PBD_BLD_CSH generates the equivalent .CSH for UNIX machines.

2.04 PBD_BLD_INIT

This module generates the FORTRAN code for package initialization routines 
and writes to the output source file.  The output FORTRAN source file name 
is determined by the framework and the package or combined package name. 
If the Program Builder is invoked by PBD/NAME=DUMMY/FRAME=D0USER or 
PBD/PACKAGE=DUMMY/FRAME=D0USER then the output FORTRAN source file 
TEST_D0USER.FOR is created.  First it generates code for PBDINI subroutine.
In PBDINI subroutine, the package selector variables are initialized for each
input package.  If HISTORY_BANK qualifier is present then PBD_HST_BANK module is
called to generate code for package zebra bank history routines.  If any ZEBRA 
common block size qualifiers ( ZEBCOM, ZEBSTP, ZEBWRK, PAWC, and GCBANK ) are 
entered, then it generate code for a new ZEBRA common initialization routine 
for each common by calling PBD_INIT_CONST module.


2.05 PBD_BLD_LINK 

PBD_BLD_LINK generates the package .LNK file and .OPT files to be used with 
the link file.  The link commands are based on the framework link file.  
The OPT files are generated from the object library names  provided by 
the package files.  The .OPT files are generated as follows: the object
library file names defined in the .OPT entry of each input package file are 
written in to the output .OPT file.  If any object library file name indicates 
an .OPT file, then the .OPT file is read in and written to the current output
.OPT file.  Thus the generated .OPT file includes all object library files
needed by the framework software to work with the input packages.  Another .OPT
file is generated for DEBUG mode operation by prefixing a string "DEB_" to 
each object library file name.  The .LNK file is generated by writing the
package name ( or combined package name ) as the task name, the FORTRAN file
being generated as the Program Builder source object and the .OPT file name as 
the user object library name.  Then the framework .LNK file is read in and
appended to the current output .LNK file.

2.06 PBD_BLD_LNK_CSH

PBD_BLD_LNK_CSH generates the equivalent _lnk.csh for UNIX machines but don't
generates the .OPT files.
The framework _lnk.csh is appended to the _lnk.csh file. 

2.07 PBD_CHK_DUP

This module searches the interface routine names table to check if the same 
interface name already exists from other packages.  If there is a duplicate 
interface name, then it returns the package number where the interface name 
found and the hook number where the same interface name is used.  If there is 
no duplicate interface name, then it returns 0.


2.08 PBD_COMMAND

This routine parses the run-time parameters ( PBD command qualifiers ), 
verifies them and sets up various tables for use by other modules. 
The run-time parameters are retrieved by a call to VMS library routine 
LIB$GET_FOREIGN and saved in a string variable RUNPARAM.  PBD_COMMAND scans 
RUNPARAM and extracts the next command qualifier.  The valid qualifier 
delimiter is a slash (/). The extracted qualifier string is checked 
against the qualifier table to validate.  If it is a valid qualifier, 
then the associated parameter value is extracted, verified and saved.
A valid delimiter for the parameter value and the qualifier is an 
equal sign (=).  For the qualifiers which allow more than one parameter, 
the parameter values should be enclosed in parentheses and separated by 
a comma(,).  This processing is continued until the entire RUNPARAM string 
is scanned.  Then it checks the presense of the required qualifiers 
( FRAMEWORK and PACKAGE or NAME ).  The error or warning messages are sent to 
the user terminal for any invalid input qualifiers and parameters.

See the COMMAND QUALIFIERS section for the valid qualifiers and expected 
parameter values.

2.09 PBD_COMPILE

PBD_COMPILE writes in a temporary command file the DCL commands to compile the
package FORTRAN source file and executes this command file via a call to 
VMS library routine LIB$SPAWN.
 
2.10 PBD_FATMEN_DUMMIES

This module contains dummies for the FATMEN routines - INFTMN and FMOPEN 
so that D0OPEN would not pull in FATMEN.


2.11 PBD_FILE_OK

This routine inquires the status of a given file and returns .TRUE. if the 
file exists and .FALSE. if not.


2.12 PBD_FLAGS

This module generates FORTRAN code for the PBD flag routines - PBD_SET_FLAG,
PBD_GET_FLAG, PBD_DUMP_FLAGS, PBD_GET_FLAG_NAME and PBD_UPCASE and writes 
them to the output FORTRAN source file.


2.13 PBD_GET_COM

This routine validates zebra common size provided either by the input command 
qualifier or by the combined package file.  The input common size string is 
converted to an integer number.  If the converted size is a negative or too 
big, then an error message is sent to the user terminal.  If the common size 
string is valid and within its range, the size string and its length are saved.


2.14 PBD_HSTRFL

PBD_HSTRFL generates FORTRAN code for the production package history 
subroutine HSTRFL and production flag function PRODUC by calling PBD_HST_BANK.

2.15 PBD_HST_BANK

This routine generates FORTRAN code for History Bank and Production routines 
based on the existing sources - D0$ZEBRA_UTIL$SOURCE:HSTRFL.FOR and 
D0$OFFLINE_UTIL$GENERAL:PRODUC.FOR.  It reads D0$ZEBRA_UTIL$SOURCE:HSTRFL.FOR
and fills the History Bank routine with the current input production id, 
version number, pass number, production site, creation time, and program name 
and writes them to the package FORTRAN output file.  For the Production routine
it reads D0$OFFLINE_UTIL$GENERAL:PRODUC.FOR and changes the production flag to
.TRUE. and writes them to the output file.

2.16 PBD_INIT_COM

PBD_INIT_COM initializes all variables in the common block PBDCOM, PBDCOM2 and
PBDCOM3.

2.17 PBD_INIT_CONST

Generates FORTRAN code for Zebra common initialization routines with the 
modified parameters.  This module is called for each common block qualifier 
entered - ZEBCOM, ZEBSTP, ZEBWRK, PAWC and GCBANK.  

The initialization routine name, the include file name and the parameter name 
are determined from the common block qualifier name as follows:  

Common Block   Initialization                  Include File    Parameter Name   
Qualifier      Routine File                    ------------    --------------
-----------    -------------      

  ZEBCOM    D0$ZEBRA_UTIL$SOURCE:INZCOM.FOR    D0$INC:ZEBCOM.INC    NNQ
  ZEBSTP    D0$ZEBRA_UTIL$SOURCE:INZSTP.FOR    D0$INC:ZEBSTP.INC    NNC
  ZEBWRK    D0$ZEBRA_UTIL$SOURCE:INZWRK.FOR    D0$INC:ZEBWRK.INC    NNW
  PAWC      D0$ZEBRA_UTIL$SOURCE:INPAWC.FOR    D0$INC:PAWC.INC      NPAWC
  GCBANK    D0$ZEBRA_UTIL$SOURCE:INZGCB.FOR    D0$INC:GCBANK.INC    NGCBNK

It reads the initialization routine source file associated with the given 
common and writes each line to the output FORTRAN source file.  When the 
include line is encountered, it reads the associated include file and writes 
each line to the output source file.  If the line in the include file contains
the parameter statement, it replaces the value of the parameter with the input 
common block size and writes the new code in the output FORTRAN source file.

2.18 PBD_INTERFACE

This module generates FORTRAN code for the user hook interface routines and
writes to the output file.  The FORTRAN code includes a logical function for 
each hook defined by the framework file and is generated as follows:

The logical function is named after either the standard hook name or alias 
hook name if exists.  In the logical function code, all interface routine 
names are declared as LOGICAL and EXTERNAL variables.  Then it loops through 
the interface routine names table of each package to see if any interface 
routine name is provided for that hook.  If an interface routine name exists,
then it adds code which calls the user interface routine, checks the 
return status and takes an action provided by the framework file.

2.19 PBD_IS_VALID

This routine searches each entry of the character string array TABLE for the 
input string TOKEN.  If the input string is found in the table, it returns
the index to the table.  Otherwise it returns 0.

2.20 PBD_MSG

This routine outputs the given message to user terminal (logical unit 6) and 
log file ( logical unit 4 - must be opened before the call ) if the LOG 
function is enabled.


2.21 PBD_NEXT_WORD
 
This routine finds the next token from a given input string.  It skips the 
leading blanks of the input string and saves each character until either a 
word delimiter ( blank or comment character '!') or the end of string 
encountered.  It returns the word found from the input string,  the starting 
position of the word and the length of the word.  If no word found, then it 
returns blanks for the word and 0 for the length.


2.22 PBD_PARSE_FILE

Parses the input file specification using VMS PARSE system service and returns
node name, device name, directory specification, file name and file type
with the corresponding string length.


2.23 PBD_READ_FILE

This routine reads the input PBD files defined by the file type and sets up 
common block tables with data from these files:

  File Type 1 = master hook PBD file D0$PBD:MASTER_HOOK.PBD
            2 = the framework PBD file <frame_name>_FRAME.PBD
            3 = combined package PBD file <combined_name>_COMBINED.PBD

If the file type is 1, then D0$PBD:MASTER_HOOK.PBD file is read in. Each
non-comment/non-blank input line contains a valid hook name.  
The hook names defined in this file are stored in hook names table and used to
verify the hook names in the framework and package PBD files.

If the file type is 2, then the framework PBD file is read in.  The file name 
is determined by the frame name as D0$PBD:<frame_name>_FRAME.PBD.  Each
non-comment/non-blank input line contains a hook name, action, and an optional
alias hook name.  The hook name and action are validated and saved.  If the 
hook name and action are valid, then the alias hook name is saved.  For an 
invalid entry,  an error message is sent to the user terminal.

If the file type is 3, it reads the combined package file.  The file name is 
determined as <combined_package_name>_COMBINED.PBD.  The file is read in and 
the combined package name field in the file is checked.  If the combined 
package name defined in the file matches with the current combined package 
name,  then it scans each input line and gets package names defined between
.PACAKGES and .END PACAKAGES lines.  The package names are stored in the 
common data table.  For each common zebra bank entry defined in the input 
file,  the new bank size string is converted to an integer and checked 
against its range by calling PBD_GET_COM.  For an invalid entry,  an error 
message is sent to the user terminal.


2.24 PBD_READ_PACK

This routine reads individual PBD package file,  validates the data and saves
them in the common data area for later processing.

For each input package file,  it performs the following processing:

It determines the package file name, checks if the file exists in user area, 
specific directory or PBD library.  If the package file does not exist, an 
error message is sent to the user terminal.  The package file is open 
and read in.  If any read error, it sends an error message.  It first skips 
lines until '.FRAMES' entry found.  The frame names are extracted from 
non-comment/non-blank lines until '.END FRAMES' line encountered.  If the 
current input frame name is not a member of the frame names of the package 
file, then an error message is sent to the user terminal and no further
processing is performed for the package.  

If the frame is valid, then it processes  hook names section.  The hook names 
section starts with '.HOOKS' line and end with '.END HOOKS' line.  Each valid 
hook name line is expected to contain a hook name and an optional interface 
routine name.  Each hook name is checked against the framework hook names 
table.  If hook name is not found in the framework hook names table, then it 
is checked against the master hook name table.  If invalid hook name, then an 
error message is displayed.  Each interface routine name is checked to see if 
it is a duplicate name.  If the interface name is used in another package, 
then a warning message is sent.  If the same interface name is used for a 
different hook,  then an error message is sent to the user terminal. 
 
For the input/output banks sections, no special processing is performed.  The
module just scans from '.INPUT_BANK' or 'OUTPUT_BANK' line through the matching
'.END' line.

The object libraries section contains the object library names needed for the
package.  Each non-comment/non-blank line between '.OBJECT' and '.END OBJECT' 
is considered to list an object library file name.  The library file names are
collected and stored in common data table.  

The last section in the package file is the RCP files section.  From each
non-comment/non-blank line between '.RCP' and '.END RCP' lines,  the RCP file 
name and RCP option word if exists are extracted and stored in common data
table if not duplicate.  If it is a duplicate RCP file name, but a new option 
word is defined,  then the new option is added to the RCP option table.

2.25 PBD_REM_BLANK

This routine removes all blanks from input string and returns the trimmed 
string and new length to the caller.

2.26 PBD_SWITCH

Generates FORTRAN code for the PBD package switch function STSWCH and writes to
the output file.

2.27 PBD_UP_CASE

Converts each character of the input string to upper case letter.

2.28 PBD_CHK_PACK

This routine checks the input package names for any duplication, reads 
combined packages if any by calling PBD_READ_FILE routine, and generates 
package names table to be used by all other modules.



3.  RUNNING THE PROGRAM BUILDER
    ---------------------------

The Program Builder assumes the following naming convention and file type
for the framework and package files: 

     Framework : 'Framework_Name'_FRAME.PBD 
     Package   : 'Package_Name'.PBD.
     Combined package : 'Combined_Package_Name'_COMBINED.PBD
     Standard hook names : D0$PBD:MASTER_HOOK.PBD

The framework description files must reside in the PBD library - D0$PBD. The 
package description files could be either in user area, in the PBD library - 
D0$PBD, or in any other area when used with the /DIRECTORY qualifier.  
A combined package is used when multiple packages are combined together to 
generate a single FORTRAN source.  The combined package file includes the 
package names to be used.  The Program Builder uses these package names to 
read the individual package files.  MASTER_HOOKS.PBD lists standard D0 hook
names.  The hook names in the framework and package files are validated
using the hook names defined in this master hook names file.  Refer to 
D0$PBD:PBD_FILES.DOC for details about the framework and package files.

The framework link template ( 'Framework_Name'.LNK ) and setup command file 
( 'Framework_Name'_SETUP.COM ) must exist in framework library - 
D0$'Framework_Name'.

A command PBD or PROGRAM_BUILDER executes the Program Builder.  The symbols
PBD and PROGRAM_BUILDER are defined in the D0$PBD:SETUP_PROGRAM_BUILDER.COM 
file.  To run the Program Builder, enter the following command on DCL prompt.

    $PBD/qualifier1[/qualifier2...].  

The required qualifiers are /FRAME and either /NAME or /PACKAGE.  The PBD 
command string can not be longer than 512 characters.  The command line can be 
continued to the next line with the continuation character (-).
 
The following PBD command qualifiers are provided: 

    /FRAME=Framework_Name     
     Specifies the name of the framework.  The framework file 
     'Framework_Name'_FRAME.PBD must exist in D0$PBD.  This qualifier is 
     required.

    /PACKAGES=(Package1[,Package2,...])       
    Specifies a list of packages.  Required unless NAME qualifier is 
    provided.  The package files 'Package'.PBD should be either in 
    user area or in D0$PBD.  When a package name is preceded or appended by
    a "%" character,  the package is interpreted as a combined package -
    'Package'_COMBINED.PBD.  The parentheses are not needed when a single
    package name is specified.

    /NAME=Combined_Packge_Name   
    Specifies the name of the combined package.  Required if more than one 
    package name is entered.  When used without /PACKAGES qualifier, the
    combined package file 'Combined_Package_Name'_COMBINED.PBD must exist 
    either in the user area or in D0$PBD.

    /LOG
    /NOLOG (default)
    Controls whether the log file PBD.LOG is generated.

    /COMPILE (default) 
    /NOCOMPILE 
    Controls whether the FORTRAN code being generated should be compiled or not.

    /DIRECTORY=Directory_Spec        
    Specifies the directory name to search for the package files.
    The Program Builder will search the given directory in addition to the user 
    area and D0$PBD.  The parameter Directory_Spec should be a valid VAX/VMS 
    directory specification or logical name.

    /ZEBCOM=Common_Size
    Modifies the D0 common block ZEBCOM size. The default ZEBCOM size is 
    200000. The parameter Common_Size should be a positive integer less than
    10000000.

    /ZEBSTP=Common_Size 
    Modifies the D0 common block ZEBSTP size. The default ZEBSTP size is 
    100000. 

    /ZEBWRK=Common_Size 
    Modifies the D0 common block ZEBWRK size. The default ZEBWRK size is 40000. 

    /PAWC=Common_Size 
    Modifies the D0 common block PAWC size. The default PAWC size is 20000. 

    /GCBANK=Common_Size 
    Modifies the D0 common block GCBANK size. The default GCBANK size is 10000. 

    /HISTORY_BANK 
    /NOHISTORY_BANK  (default)
     Controls whether the history bank FORTRAN code should be generated.
     Qualifiers PRODID, VERSION and PASS are required for HISTORY_BANK.

    /HSTRFL 
     Bypasses normal processing and generates only the history bank FORTRAN 
     code.  Qualifiers PRODID, VERSION and PASS should be present for HSTRFL.

    /PRODID=Production_Id        
     Specifies the identifier for the production packages.  Required if 
     HISTORY_BANK or HSTRFL provided.  The parameter Production_Id 
     must be an integer number.

    /VERSION=Version_Number      
     Specifies the version number of the production packages.  Required if 
     HISTORY_BANK or HSTRFL provided. The parameter Version_Number must be an
     integer number.

    /PASS=Pass_Number            
     Specifies the pass number of the production packages.  Required if
     HISTORY_BANK or HSTRFL provided.  The parameter Pass_Number must be an
     integer number.

     The qualifiers /HISTORY_BANK, /HSTRFL, /PRODID, /VERSION, and /PASS are 
     used only for the production packages.  

    /SWITCH
     Specifies the full switch function STSWCH code to be generated.  
     A dummy STSWCH function is generated without this qualifier.
 
    /UNIX
     Specifies that shell scripts will be created so the program could be
     setup and linked in UNIX machines.
  

     EXAMPLES
     --------

The Program Builder displays informational messages on the user terminal.
The DCL command PBD/FRAME=D0RECO/PACKAGE=C3PMET displays the following messages.

-- PBD Processing Started --
-- Validating input PBD command qualifiers --
-- Reading master hook name file D0$PBD:MASTER_HOOK.PBD
-- Reading framework PBD file D0$PBD:D0RECO_FRAME.PBD
-- Reading package file D0$PBD:C3PMET.PBD
-- Generating FORTRAN Source File C3PMET_D0RECO.FOR
-- Building Initialization Routine for D0RECO
-- Building Package Switch Functions --
-- Building Set/Reset Flag Routines --
-- Building Interface Subroutines --
-- Compiling source file...
-- Building Link File C3PMET_D0RECO.LNK
-- Building OPT Files C3PMET_D0RECO.OPT and DEB_C3PMET_D0RECO.OPT
-- Building Setup Command File C3PMET_D0RECO.COM
-- PBD Normal Completion --

The Program Builder reads the framework file D0$PBD:D0USER_FRAME.PBD and
uses the hooks defined in this file to generate the FORTRAN code.  The package
file C3PMET.PBD is read from the PBD library D0$PBD.  The output file name is 
constructed as C3PMET_D0USER from the framework name D0USER and the package 
name C3PMET.  The Program Builder generates the following files in the user 
area where the Program Builder is invoked: C3PMET_D0RECO.COM, C3PMET_D0RECO.FOR,
C3PMET_D0RECO.LNK, C3PMET_D0RECO.OBJ, C3PMET_D0RECO.OPT, DEB_C3PMET_D0RECO.OBJ
and DEB_C3PMET_D0RECO.OPT.


$ PBD/FRAME=D0RECO/NAME=FULL/LOG/NOCOMPILE

-- PBD LOG function enabled - Log File : PBD.LOG                                
-- PBD Processing Started --                                                    
-- Validating input PBD command qualifiers --                                   
-- Reading master hook name file D0$PBD:MASTER_HOOK.PBD                         
-- Reading framework PBD file D0$PBD:D0RECO_FRAME.PBD                           
-- Reading combined package PBD file D0$PBD:FULL_COMBINED.PBD                   
-- Reading package file D0$PBD:ZTRAKS.PBD                                       
-- Reading package file D0$PBD:CALOR.PBD                                        
-- Reading package file D0$PBD:CAHITS.PBD                                       
-- Reading package file D0$PBD:MURECO.PBD                                       
-- Reading package file D0$PBD:C3PMET.PBD                                       
-- Reading package file D0$PBD:CAJETS.PBD                                       
-- Reading package file D0$PBD:CAPHEL.PBD                                       
-- Reading package file D0$PBD:CTAUS.PBD                                        
-- Reading package file D0$PBD:CAJNEP.PBD                                       
-- Reading package file D0$PBD:CATD.PBD                                         
-- Reading package file D0$PBD:RECO_ESUM.PBD                                    
-- Generating FORTRAN Source File FULL_D0RECO.FOR                               
-- Building Initialization Routine for D0RECO                                   
-- Reading file D0$ZEBRA_UTIL$SOURCE:INZCOM.FOR                                 
-- Reading file D0$INC:ZEBCOM.INC                                               
-- Reading file D0$ZEBRA_UTIL$SOURCE:INZSTP.FOR                                 
-- Reading file D0$INC:ZEBSTP.INC                                               
-- Reading file D0$ZEBRA_UTIL$SOURCE:INZWRK.FOR                                 
-- Reading file D0$INC:ZEBWRK.INC                                               
-- Reading file D0$ZEBRA_UTIL$SOURCE:INPAWC.FOR                                 
-- Reading file D0$INC:PAWC.INC                                                 
-- Reading file D0$ZEBRA_UTIL$SOURCE:INZGCB.FOR                                 
-- Reading file D0$INC:GCBANK.INC                                               
-- Building Package Switch Functions --                                         
-- Building Set/Reset Flag Routines --                                          
-- Building Interface Subroutines --                                            
-- Building Link File FULL_D0RECO.LNK                                           
-- Building OPT Files FULL_D0RECO.OPT and DEB_FULL_D0RECO.OPT                   
-- Building Setup Command File FULL_D0RECO.COM                                  
-- PBD Normal Completion --                                                     

The Program Builder reads the framework file D0$PBD:D0RECO_FRAME.PBD and 
the combined package file FULL_COMBINED.PBD.  All package files listed in the
FULL_COMBINED.PBD file - ZTRAKS.PBD,  CALOR.PBD, CAHITS.PBD, MURECO.PBD, 
C3PMET.PBD, CAJETS.PBD, CAPHEL.PBD, CTAUS.PBD, CAJNEP.PBD, CATD.PBD,
RECO_ESUM.PBD  are read in from the PBD library D0$PBD.  Since 
FULL_COMBINED.PBD defines D0 common block sizes the Program Builder reads in 
the common initialization FORTRAN files - INZCOM.FOR, INZSTP.FOR, INZWRK.FOR, 
INPAWC.FOR and INZGCB.FOR and the associated INCLUDE files - ZEBCOM.INC,
ZEBSTP.INC, ZEBWRK.INC, PAWC.INC and GCBANK.INC.  It generates: 
FULL_D0USER.FOR, FULL_D0USER.LNK, FULL_D0USER.COM, FULL_D0USER.OPT, and 
DEB_FULL_D0USER.OPT.  It also creates PBD.LOG file with the above dispaly 
messages since the log function is enabled.  No .OBJ files are generated 
because of /NOCOMPILE qualifier. 

$ PBD/FRAME=D0USER/NAME=COMB/PACKAGE=(CAJETS,CAPHEL)

The Program Builder reads the framework file D0$PBD:D0USER_FRAME.PBD and 
the package files CAJETS.PBD and CAPHEL.PBD and generates automatically:
COMB_D0USER.FOR, COMB_D0USER.LNK, COMB_D0USER.COM, COMB_D0USER.OBJ, 
DEB_COMB_D0USER.OBJ, COMB_D0USER.OPT, and DEB_COMB_D0USER.OPT.  Since more than
one packages are specified the /NAME qualifier is required.


$ PBD/FRAME=D0USER/NAME=COMB/PACKAGE=(CAJETS,CAPHEL,%ALL_DISPLAY)

The Program Builder reads the framework file D0$PBD:D0USER_FRAME.PBD and 
the package files CAJETS.PBD and CAPHEL.PBD, and a combined package 
ALL_DISPLAY_COMBINED.PBD and generates :
COMB_D0USER.FOR, COMB_D0USER.LNK, COMB_D0USER.COM, COMB_D0USER.OBJ, 
DEB_COMB_D0USER.OBJ, COMB_D0USER.OPT, and DEB_COMB_D0USER.OPT.

$ PBD/FRAME=D0USER/NAME=COMB/PACKAGE=(CAJETS,CAPHEL)/DIR=USR$DISK:[USER1]

The Program Builder reads the package files CAJETS.PBD and CAPHEL.PBD from 
USR$$DISK:[USER1] directory and generates automatically:
COMB_D0USER.FOR, COMB_D0USER.LNK, COMB_D0USER.COM, COMB_D0USER.OBJ, 
DEB_COMB_D0USER.OBJ, COMB_D0USER.OPT, and DEB_COMB_D0USER.OPT.  


$ PBD/FRAME=D0RECO/NAME=FULL/HISTORY/PRODID=1/VERSION=7/PASS=0

This PBD command is for a production package FULL_D0RECO.  The Program Builder
generates the same output files as in PBD/FRAME=D0RECO/NAME=FULL command 
except for the FORTRAN file.  The .FOR file includes additional code for the 
production history and flag routines.  When the /HISTORY qualifier is entered,
the qualifiers  /PRODID, /VERSION and /PASS are required. 
   
$ PBD/FRAME=D0USER/NAME=TEST/HSTRFL/PRODID=1/VERSION=7/PASS=0

This command generates only TEST_D0USER.FOR file.  The Program Builder bypasses
the normal processing and generates only the production history and flag
routines because of the /HSTRFL qualifier.  The qualifiers /FRAME and /NAME are
used to compose the file name.  The actual framework and package files are not
used for the processing.  When the /HSTRFL qualifier is entered,
the qualifiers  /PRODID, /VERSION and /PASS are required. 

$ PBD/FRAME=D0RECO/PACKAGE=C3PMET/ZEBCOM=2500000/ZEBSTP=2200000/ -
  ZEBWRK=80000

The Program Builder generates the same output files as in 
PBD/FRAME=D0RECO/PACKAGE=C3PMET command except for the FORTRAN file.  
The .FOR file includes additional code for the D0 common initialization
routines - INZCOM, INZSTP, INZWRK because of the new sizes for ZEBCOM, ZEBSTP
and ZEBWRK common blocks. 
